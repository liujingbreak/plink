{"version":3,"file":"markdown-loader.js","sourceRoot":"","sources":["markdown-loader.ts"],"names":[],"mappings":";;;AACA,iDAA2B;AAC3B,2DAAqC;AAErC,mDAA+C;AAC/C,2DAA2D;AAE3D,MAAM,cAAc,GAA6B,UAAS,MAAM,EAAE,SAAS;IACzE,MAAM,EAAE,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;IACxB,MAAM,UAAU,GAAG,EAAc,CAAC;IAClC,IAAI,MAAM,GAAG,CAAC,CAAC;IAEf,oDAAoD;IACpD,YAAY;IAEZ,IAAA,8BAAc,EAAC,MAAM,EAAE,IAAI,CAAC,YAAY,EACtC,MAAM,CAAC,EAAE;QACP,MAAM,GAAG,GAAG,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,GAAG,MAAM,CAAC;QAC5D,UAAU,CAAC,IAAI,CAAC,gBAAgB,MAAM,UAAU,GAAG,IAAI,CAAC,CAAC;QACzD,OAAO,OAAO,CAAC,OAAO,CAAC,QAAQ,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IAChD,CAAC,CAAC;SACD,IAAI,CACH,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EACV,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;QACd,EAAE,CAAC,IAAI,EACL,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,iBAAiB,GAAG,MAAM,CAAC,OAAO,GAAG,eAAe,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,8CAA8C,EAAE,SAAS,CAAC,CAAC;IAC3K,CAAC,CAAC,EACF,EAAE,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;QAClB,EAAE,CAAC,GAAG,EAAE,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,SAAS,CAAC,CAAC;QACxC,OAAO,EAAE,CAAC,KAAK,CAAC;IAClB,CAAC,CAAC,CACH;SACA,SAAS,EAAE,CAAC;AACjB,CAAC,CAAC;AAEF,kBAAe,cAAc,CAAC","sourcesContent":["import {LoaderDefinitionFunction} from 'webpack';\nimport * as rx from 'rxjs';\nimport * as op from 'rxjs/operators';\nimport _ from 'lodash';\nimport {markdownToHtml} from './markdown-util';\n// require('node:inspector').open(9222, 'localhost', true);\n\nconst markdownLoader: LoaderDefinitionFunction = function(source, sourceMap) {\n  const cb = this.async();\n  const importCode = [] as string[];\n  let imgIdx = 0;\n\n  // const logger = this.getLogger('markdown-loader');\n  // debugger;\n\n  markdownToHtml(source, this.resourcePath,\n    imgSrc => {\n      const url = imgSrc.startsWith('.') ? imgSrc : './' + imgSrc;\n      importCode.push(`import imgSrc${imgIdx} from '${url}';`);\n      return Promise.resolve('imgSrc' + (imgIdx++));\n    })\n    .pipe(\n      op.take(1),\n      op.map(result => {\n        cb(null,\n          importCode.join('\\n') + '\\nconst html = ' + result.content + ';\\nlet toc = ' + JSON.stringify(result.toc) + ';\\nlet m = {html, toc};\\nexport default m;\\n', sourceMap);\n      }),\n      op.catchError(err => {\n        cb(err, JSON.stringify(err), sourceMap);\n        return rx.EMPTY;\n      })\n    )\n    .subscribe();\n};\n\nexport default markdownLoader;\n\n"]}