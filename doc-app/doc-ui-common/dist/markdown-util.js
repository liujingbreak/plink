"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.insertOrUpdateMarkdownToc = exports.tocToString = exports.traverseTocTree = exports.markdownToHtml = void 0;
const rx = __importStar(require("rxjs"));
const op = __importStar(require("rxjs/operators"));
const thread_promise_pool_1 = require("@wfh/thread-promise-pool");
const path_1 = __importDefault(require("path"));
const plink_1 = require("@wfh/plink");
const patch_text_1 = __importDefault(require("@wfh/plink/wfh/dist/utils/patch-text"));
const util_1 = __importDefault(require("util"));
const lodash_1 = __importDefault(require("lodash"));
const parse5_1 = __importDefault(require("parse5"));
const os_1 = __importDefault(require("os"));
const log = (0, plink_1.log4File)(__filename);
let threadPool;
const headerSet = new Set('h1 h2 h3 h4 h5'.split(' '));
/**
 * Use Thread pool to parse Markdown file simultaneously
 * @param source
 * @param resolveImage
 */
function markdownToHtml(source, resolveImage) {
    if (threadPool == null) {
        threadPool = new thread_promise_pool_1.Pool();
    }
    return rx.from(threadPool.submit({
        file: path_1.default.resolve(__dirname, 'markdown-loader-worker.js'), exportFn: 'parseToHtml', args: [source]
    })).pipe(op.mergeMap(html => {
        let toc = [];
        const doc = parse5_1.default.parse(html, { sourceCodeLocationInfo: true });
        const done = dfsAccessElement(doc, resolveImage, toc);
        toc = createTocTree(toc);
        return rx.merge(...done).pipe(op.reduce((acc, item) => {
            acc.push(item);
            return acc;
        }, []), op.map(all => {
            const content = (0, patch_text_1.default)(html, all);
            // log.warn(html, '\n=>\n', content);
            return { toc, content };
        }), op.catchError(err => {
            log.error(err);
            // cb(err, JSON.stringify({ toc, content: source }), sourceMap);
            return rx.of({ toc, content: source });
        }));
    }));
}
exports.markdownToHtml = markdownToHtml;
function dfsAccessElement(root, resolveImage, toc = []) {
    const chr = new rx.BehaviorSubject(root.childNodes || []);
    const done = [];
    chr.pipe(op.mergeMap(children => rx.from(children))).pipe(op.map(node => {
        const nodeName = node.nodeName.toLowerCase();
        if (nodeName === '#text' || nodeName === '#comment' || nodeName === '#documentType')
            return;
        const el = node;
        if (nodeName === 'img') {
            const imgSrc = el.attrs.find(item => item.name === 'src');
            if (resolveImage && imgSrc && !imgSrc.value.startsWith('/') && !/^https?:\/\//.test(imgSrc.value)) {
                log.info('found img src=' + imgSrc.value);
                done.push(rx.from(resolveImage(imgSrc.value))
                    .pipe(op.map(resolved => {
                    const srcPos = el.sourceCodeLocation.attrs.src;
                    log.info(`resolve ${imgSrc.value} to ${util_1.default.inspect(resolved)}`);
                    return { start: srcPos.startOffset + 'src'.length + 1, end: srcPos.endOffset, text: resolved };
                })));
            }
        }
        else if (headerSet.has(nodeName)) {
            toc.push({ level: 0, tag: nodeName,
                text: lookupTextNodeIn(el),
                id: ''
            });
        }
        if (el.childNodes)
            chr.next(el.childNodes);
    })).subscribe();
    return done;
}
function lookupTextNodeIn(el) {
    const chr = new rx.BehaviorSubject(el.childNodes || []);
    let text = '';
    chr.pipe(op.mergeMap(children => rx.from(children))).pipe(op.map(node => {
        if (node.nodeName === '#text') {
            text += node.value;
        }
        else if (node.childNodes) {
            chr.next(node.childNodes);
        }
    })).subscribe();
    return text;
}
function createTocTree(input) {
    const root = { level: -1, tag: 'h0', text: '', id: '', children: [] };
    let byLevel = [root]; // a stack of previous TOC items ordered by level
    let prevHeaderSize = Number(root.tag.charAt(1));
    for (const item of input) {
        const headerSize = Number(item.tag.charAt(1));
        // console.log(`${headerSize} ${prevHeaderSize}, ${item.text}`);
        if (headerSize < prevHeaderSize) {
            const pIdx = lodash_1.default.findLastIndex(byLevel, toc => Number(toc.tag.charAt(1)) < headerSize);
            byLevel.splice(pIdx + 1);
            addAsChild(byLevel[pIdx], item);
        }
        else if (headerSize === prevHeaderSize) {
            byLevel.pop();
            const parent = byLevel[byLevel.length - 1];
            addAsChild(parent, item);
        }
        else {
            const parent = byLevel[byLevel.length - 1];
            addAsChild(parent, item);
        }
        prevHeaderSize = headerSize;
    }
    function addAsChild(parent, child) {
        if (parent.children == null)
            parent.children = [child];
        else
            parent.children.push(child);
        child.level = byLevel[byLevel.length - 1] ? byLevel[byLevel.length - 1].level + 1 : 0;
        byLevel.push(child);
    }
    return root.children;
}
function* traverseTocTree(tocs) {
    for (const item of tocs) {
        yield item;
        if (item.children)
            yield* traverseTocTree(item.children);
    }
}
exports.traverseTocTree = traverseTocTree;
function tocToString(tocs) {
    let str = '';
    for (const item of traverseTocTree(tocs)) {
        str += ' |'.repeat(item.level);
        // str += '- ';
        str += `- ${item.text}`;
        str += os_1.default.EOL;
    }
    return str;
}
exports.tocToString = tocToString;
function insertOrUpdateMarkdownToc(input) {
    return markdownToHtml(input).pipe(op.map(({ toc, content: html }) => {
        const tocStr = tocMarkdown(toc);
        const BEGIN = '<!-- Plink markdown toc -->';
        const END = '<!-- Plink markdown toc end -->';
        const existing = input.indexOf(BEGIN);
        let changedMd = '';
        if (existing >= 0) {
            let replacePos = existing + BEGIN.length;
            const replaceEnd = input.indexOf(END);
            changedMd = input.slice(0, replacePos) + '\n' + tocStr + '\n' + input.slice(replaceEnd);
        }
        else {
            changedMd = [BEGIN, tocStr, END, input].join('\n');
        }
        return { changedMd, toc: tocToString(toc), html };
    }), op.take(1)).toPromise();
}
exports.insertOrUpdateMarkdownToc = insertOrUpdateMarkdownToc;
function tocMarkdown(tocs) {
    let str = '';
    for (const item of traverseTocTree(tocs)) {
        if (item.level > 2)
            continue;
        str += '  '.repeat(item.level);
        str += `${item.level > 0 ? '-' : ''} ${item.text}${item.level > 0 ? '' : os_1.default.EOL}`;
        str += '\n';
    }
    return str.slice(0, -1);
}
//# sourceMappingURL=data:application/json;base64,