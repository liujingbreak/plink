{"version":3,"file":"markdown-processor-main.js","sourceRoot":"","sources":["markdown-processor-main.ts"],"names":[],"mappings":";;;;AAAA,yCAAkC;AAClC,mDAAsC;AACtC,wDAAwB;AACxB,oDAAoB;AACpB,2FAAsF;AACtF,sCAAoC;AACpC,6DAAuD;AA8B/C,kGA9BA,sCAAiB,OA8BA;AA5BzB,MAAM,GAAG,GAAG,IAAA,gBAAQ,EAAC,UAAU,CAAC,CAAC;AAEjC,MAAM,eAAe,GAAG,EAAC,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAC,CAAC;AAEpE,MAAM,GAAG,GAAG,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC;AAC5C,SAAS,gBAAgB,CAAC,KAAU;IAClC,OAAO,GAAG,CAAC,IAAI,CAAC,eAAe,EAAE,OAAO,KAAK,CAAC,CAAC;AACjD,CAAC;AAED,SAAgB,WAAW,CAAC,mBAAmB,GAAG,IAAI,EAAE,cAAuB;IAC7E,MAAM,MAAM,GAAG,IAAA,uCAAkB,EAAC,sCAAiB,EAAE;QACnD,IAAI,EAAE,QAAQ;QACd,cAAc,EAAE,cAAc,aAAd,cAAc,cAAd,cAAc,GAAI,YAAE,CAAC,oBAAoB,EAAE,GAAG,CAAC;QAC/D,iBAAiB,EAAE,IAAI;QACvB,KAAK,EAAE,KAAK;QACZ,mBAAmB;QACnB,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI;YACd,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAA,mBAAO,EAAC,IAAI,EAAE,EAAC,UAAU,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,EAAE,OAAO,EAAE,IAAI,EAAC,CAAC,CAAC,CAAC,CAAC;QAClI,CAAC;QACD,iBAAiB,EAAE,CAAC,cAAc,CAAC;QACnC,aAAa;YACX,OAAO,IAAI,uBAAM,CAAC,cAAI,CAAC,OAAO,CAAC,SAAS,EAAE,sCAAsC,CAAC,CAAC,CAAC;QACrF,CAAC;KACF,CAAC,CAAC;IAEH,OAAO,MAAM,CAAC;AAChB,CAAC;AAjBD,kCAiBC","sourcesContent":["import {inspect} from 'node:util';\nimport {Worker} from 'worker_threads';\nimport Path from 'path';\nimport os from 'os';\nimport {setupForMainWorker} from '@wfh/reactivizer/dist/fork-join/node-worker-broker';\nimport {log4File} from '@wfh/plink';\nimport {markdownProcessor} from './markdown-processor';\n\nconst log = log4File(__filename);\n\nconst PRIMITIVE_TYPES = {number: true, string: true, boolean: true};\n\nconst has = Object.prototype.hasOwnProperty;\nfunction isPrimitiveValue(value: any): value is (string | number | boolean) {\n  return has.call(PRIMITIVE_TYPES, typeof value);\n}\n\nexport function setupBroker(excludeCurrentThead = true, maxNumOfWorker?: number) {\n  const broker = setupForMainWorker(markdownProcessor, {\n    name: 'broker',\n    maxNumOfWorker: maxNumOfWorker ?? os.availableParallelism() - 1,\n    threadMaxIdleTime: 4000,\n    debug: false,\n    excludeCurrentThead,\n    log(msg, ...args) {\n      log.info(msg, ...args.map(item => isPrimitiveValue(item) ? item : inspect(item, {showHidden: false, depth: 0, compact: true})));\n    },\n    debugExcludeTypes: ['workerInited'],\n    workerFactory() {\n      return new Worker(Path.resolve(__dirname, '../dist/markdown-processor-worker.js'));\n    }\n  });\n\n  return broker;\n}\n\nexport {markdownProcessor};\n"]}