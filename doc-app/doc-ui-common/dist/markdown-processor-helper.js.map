{"version":3,"file":"markdown-processor-helper.js","sourceRoot":"","sources":["markdown-processor-helper.ts"],"names":[],"mappings":"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","sourcesContent":["import * as rx from 'rxjs';\nimport type {DefaultTreeAdapterMap} from 'parse5';\nimport findLastIndex from 'lodash/findLastIndex';\nimport {TOC} from '../isom/md-types';\n\nexport type ChildNode = DefaultTreeAdapterMap['childNode'];\nexport type Element = DefaultTreeAdapterMap['element'];\nexport type TextNode = DefaultTreeAdapterMap['textNode'];\n\nexport function lookupTextNodeIn(el: Element) {\n  const chr = new rx.BehaviorSubject<ChildNode[]>(el.childNodes || []);\n  let text = '';\n  chr.pipe(\n    rx.mergeMap(children => rx.from(children))\n  ).pipe(\n    rx.map(node => {\n      if (node.nodeName === '#text') {\n        text += (node as TextNode).value;\n      } else if ((node as Element).childNodes) {\n        chr.next((node as Element).childNodes);\n      }\n    })\n  ).subscribe();\n  return text;\n}\n\nexport function createTocTree(input: TOC[]) {\n  const root: TOC = {level: -1, tag: 'h0', text: '', id: '', children: []};\n  const byLevel: TOC[] = [root]; // a stack of previous TOC items ordered by level\n  let prevHeaderWeight = Number(root.tag.charAt(1));\n  for (const item of input) {\n    const headerWeight = Number(item.tag.charAt(1));\n    // console.log(`${headerWeight} ${prevHeaderWeight}, ${item.text}`);\n    if (headerWeight < prevHeaderWeight) {\n      const pIdx = findLastIndex(byLevel, toc => Number(toc.tag.charAt(1)) < headerWeight);\n      byLevel.splice(pIdx + 1);\n      addAsChild(byLevel[pIdx], item);\n    } else if (headerWeight === prevHeaderWeight) {\n      byLevel.pop();\n      const parent = byLevel[byLevel.length - 1];\n      addAsChild(parent, item);\n    } else {\n      const parent = byLevel[byLevel.length - 1];\n      addAsChild(parent, item);\n    }\n    prevHeaderWeight = headerWeight;\n  }\n\n  function addAsChild(parent: TOC, child: TOC) {\n    if (parent.children == null)\n      parent.children = [child];\n    else\n      parent.children.push(child);\n    child.level = byLevel[byLevel.length - 1] ? byLevel[byLevel.length - 1].level + 1 : 0;\n    byLevel.push(child);\n  }\n  return root.children!;\n}\n"]}