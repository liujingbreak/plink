{"version":3,"file":"markdown-loader-worker.js","sourceRoot":"","sources":["markdown-loader-worker.ts"],"names":[],"mappings":";;;;AAAA,6DAAsE;AACtE,sEAAqC;AACrC,2DAAqC;AACrC,iDAA2B;AAC3B,gEAA0C;AAC1C,sCAAwD;AAGxD,IAAA,0BAAkB,GAAE,CAAC;AAErB,MAAM,GAAG,GAAG,IAAA,gBAAQ,EAAC,UAAU,CAAC,CAAC;AAEjC,MAAM,EAAE,GAAG,IAAI,qBAAU,CAAC;IACxB,IAAI,EAAE,IAAI;IACV,SAAS,CAAC,GAAG,EAAE,IAAI,EAAE,KAAK;QACxB,IAAI,IAAI,IAAI,IAAI,KAAK,SAAS,EAAE;YAC9B,IAAI;gBACF,OAAO,SAAS,CAAC,SAAS,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC,KAAK,CAAC;aACnD;YAAC,OAAO,CAAC,EAAE;gBACV,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,6DAA6D;aAC5E;SACF;QACD,OAAO,GAAG,CAAC;IACb,CAAC;CACF,CAAC,CAAC;AAEH,MAAM,2BAA2B,GAAG,iBAAiB,CAAC;AAEtD,SAAgB,eAAe,CAAC,MAAc;IAC5C,MAAM,EAAC,SAAS,EAAC,GAAI,OAAO,CAAC,iBAAiB,CAAwB,CAAC;IACvE,OAAO,SAAS,CAAC,EAAE,CAAC,MAAM,CAAC,MAAM,CAAE,EAAE,MAAM,CAAC,EAAE;QAC5C,OAAO,IAAI,EAAE,CAAC,UAAU,CAAS,GAAG,CAAC,EAAE;YACrC,MAAM,EAAE,GAA8C,CAAC,GAAiC,EAAE,EAAE;gBAC1F,IAAI,GAAG,CAAC,IAAI,KAAK,2BAA2B,EAAE;oBAC5C,gCAAW,CAAC,GAAG,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;oBAC/B,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,8BAAQ,EAAE,uBAAuB,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC;oBAChE,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;oBACnB,GAAG,CAAC,QAAQ,EAAE,CAAC;iBAChB;YACH,CAAC,CAAC;YACF,gCAAW,CAAC,EAAE,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YAC9B,gCAAW,CAAC,WAAW,CAAC,EAAC,IAAI,EAAE,2BAA2B,EAAE,IAAI,EAAE,MAAM,EAAC,CAAC,CAAC;YAC3E,OAAO,GAAG,EAAE,CAAC,gCAAW,CAAC,GAAG,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC,IAAI,CACL,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CACX,CAAC,SAAS,EAAE,CAAC;AAChB,CAAC;AAnBD,0CAmBC","sourcesContent":["import {parentPort, MessagePort, threadId} from 'node:worker_threads';\nimport MarkdownIt from 'markdown-it';\nimport * as op from 'rxjs/operators';\nimport * as rx from 'rxjs';\nimport * as highlight from 'highlight.js';\nimport {log4File, initAsChildProcess} from '@wfh/plink';\nimport type * as markdownUtil from './markdown-util';\n\ninitAsChildProcess();\n\nconst log = log4File(__filename);\n\nconst md = new MarkdownIt({\n  html: true,\n  highlight(str, lang, attrs) {\n    if (lang && lang !== 'mermaid') {\n      try {\n        return highlight.highlight(lang, str, true).value;\n      } catch (e) {\n        log.debug(e); // skip non-important error like: Unknown language: \"mermaid\"\n      }\n    }\n    return str;\n  }\n});\n\nconst THREAD_MSG_TYPE_RESOLVE_IMG = 'resolveImageSrc';\n\nexport function toContentAndToc(source: string) {\n  const {parseHtml}  = require('./markdown-util') as typeof markdownUtil;\n  return parseHtml(md.render(source ), imgSrc => {\n    return new rx.Observable<string>(sub => {\n      const cb: Parameters<MessagePort['addListener']>[1] = (msg: {type: string; data: string}) => {\n        if (msg.type === THREAD_MSG_TYPE_RESOLVE_IMG) {\n          parentPort!.off('message', cb);\n          log.info('thread', threadId, 'recieved resolved URL', msg.data);\n          sub.next(msg.data);\n          sub.complete();\n        }\n      };\n      parentPort!.on('message', cb);\n      parentPort!.postMessage({type: THREAD_MSG_TYPE_RESOLVE_IMG, data: imgSrc});\n      return () => parentPort!.off('message', cb);\n    });\n  }).pipe(\n    op.take(1)\n  ).toPromise();\n}\n"]}