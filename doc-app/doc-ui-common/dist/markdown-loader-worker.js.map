{"version":3,"file":"markdown-loader-worker.js","sourceRoot":"","sources":["markdown-loader-worker.ts"],"names":[],"mappings":";;;;AAAA,6DAA4D;AAC5D,sEAAqC;AACrC,8DAAyB;AACzB,+BAA+B;AAC/B,2DAAqC;AACrC,iDAA2B;AAC3B,gEAA0C;AAC1C,sCAAwD;AAGxD,IAAA,0BAAkB,GAAE,CAAC;AAErB,MAAM,GAAG,GAAG,IAAA,gBAAQ,EAAC,UAAU,CAAC,CAAC;AAEjC,MAAM,EAAE,GAAG,IAAI,qBAAU,CAAC;IACxB,IAAI,EAAE,IAAI;IACV,SAAS,CAAC,GAAG,EAAE,IAAI,EAAE,MAAM;QACzB,IAAI,IAAI,IAAI,IAAI,KAAK,SAAS,EAAE;YAC9B,IAAI;gBACF,OAAO,SAAS,CAAC,SAAS,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC,KAAK,CAAC;aACnD;YAAC,OAAO,CAAC,EAAE;gBACV,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,6DAA6D;aAC5E;SACF;QACD,OAAO,GAAG,CAAC;IACb,CAAC;CACF,CAAC,CAAC;AAEH,MAAM,2BAA2B,GAAG,iBAAiB,CAAC;AAEtD,MAAM,eAAe,GAAG,IAAI,iBAAE,CAAC,MAAM,CACnC;6BAC2B,CAAC,CAAC;AAE/B,SAAgB,eAAe,CAAC,MAAc;IAC5C,MAAM,EAAC,SAAS,EAAC,GAAI,OAAO,CAAC,iBAAiB,CAAwB,CAAC;IACvE,OAAO,SAAS,CACd,EAAE,CAAC,MAAM,CAAC,MAAM,CAAE,EAClB,MAAM,CAAC,EAAE;QACP,OAAO,IAAI,EAAE,CAAC,UAAU,CAAS,GAAG,CAAC,EAAE;YACrC,MAAM,EAAE,GAA8C,CAAC,GAAiC,EAAE,EAAE;gBAC1F,IAAI,GAAG,CAAC,IAAI,KAAK,2BAA2B,EAAE;oBAC5C,gCAAW,CAAC,GAAG,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;oBAC/B,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;oBACnB,GAAG,CAAC,QAAQ,EAAE,CAAC;iBAChB;YACH,CAAC,CAAC;YACF,gCAAW,CAAC,EAAE,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YAC9B,gCAAW,CAAC,WAAW,CAAC,EAAC,IAAI,EAAE,2BAA2B,EAAE,IAAI,EAAE,MAAM,EAAC,CAAC,CAAC;YAC3E,OAAO,GAAG,EAAE,CAAC,gCAAW,CAAC,GAAG,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;IACL,CAAC,EACD,KAAK,EAAE,IAAI,EAAE,UAAU,EAAE,EAAE;QACzB,IAAI,IAAI,KAAK,SAAS,EAAE;YACtB,GAAG,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC;YAChC,OAAO,UAAU,CAAC;SACnB;QACD,GAAG,CAAC,IAAI,CAAC,+BAA+B,EAAE,UAAU,CAAC,CAAC;QACtD,MAAM,IAAI,GAAG,eAAe,CAAC,eAAe,CAAC,EAAC,OAAO,EAAE,UAAU,EAAC,CAA2B,CAAC;QAC9F,MAAM,EAAC,GAAG,EAAC,GAAG,MAAM,IAAI,CAAC;QACzB,GAAG,CAAC,IAAI,CAAC,iBAAiB,EAAE,GAAG,CAAC,CAAC;QACjC,OAAO,GAAG,CAAC;IACb,CAAC,CACF,CAAC,IAAI,CACJ,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CACX,CAAC,SAAS,EAAE,CAAC;AAChB,CAAC;AAhCD,0CAgCC","sourcesContent":["import {parentPort, MessagePort} from 'node:worker_threads';\nimport MarkdownIt from 'markdown-it';\nimport vm from 'node:vm';\n// import {JSDOM} from 'jsdom';\nimport * as op from 'rxjs/operators';\nimport * as rx from 'rxjs';\nimport * as highlight from 'highlight.js';\nimport {log4File, initAsChildProcess} from '@wfh/plink';\nimport type * as markdownUtil from './markdown-util';\n\ninitAsChildProcess();\n\nconst log = log4File(__filename);\n\nconst md = new MarkdownIt({\n  html: true,\n  highlight(str, lang, _attrs) {\n    if (lang && lang !== 'mermaid') {\n      try {\n        return highlight.highlight(lang, str, true).value;\n      } catch (e) {\n        log.debug(e); // skip non-important error like: Unknown language: \"mermaid\"\n      }\n    }\n    return str;\n  }\n});\n\nconst THREAD_MSG_TYPE_RESOLVE_IMG = 'resolveImageSrc';\n\nconst mermaidVmScript = new vm.Script(\n  `const {runMermaid} = require('./mermaid-vm-script');\n   runMermaid(mermaidSource)`);\n\nexport function toContentAndToc(source: string) {\n  const {parseHtml}  = require('./markdown-util') as typeof markdownUtil;\n  return parseHtml(\n    md.render(source ),\n    imgSrc => {\n      return new rx.Observable<string>(sub => {\n        const cb: Parameters<MessagePort['addListener']>[1] = (msg: {type: string; data: string}) => {\n          if (msg.type === THREAD_MSG_TYPE_RESOLVE_IMG) {\n            parentPort!.off('message', cb);\n            sub.next(msg.data);\n            sub.complete();\n          }\n        };\n        parentPort!.on('message', cb);\n        parentPort!.postMessage({type: THREAD_MSG_TYPE_RESOLVE_IMG, data: imgSrc});\n        return () => parentPort!.off('message', cb);\n      });\n    },\n    async (lang, sourceCode) => {\n      if (lang !== 'mermaid') {\n        log.info('skip language', lang);\n        return sourceCode;\n      }\n      log.info('start to compile Mermaid code', sourceCode);\n      const done = mermaidVmScript.runInNewContext({require, sourceCode}) as Promise<{svg: string}>;\n      const {svg} = await done;\n      log.info('Mermaid output:', svg);\n      return svg;\n    }\n  ).pipe(\n    op.take(1)\n  ).toPromise();\n}\n"]}