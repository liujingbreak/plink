{"version":3,"file":"markdown-processor.js","sourceRoot":"","sources":["markdown-processor.ts"],"names":[],"mappings":"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","sourcesContent":["import * as rx from 'rxjs';\nimport {log4File} from '@wfh/plink';\nimport {createWorkerControl, fork} from '@wfh/reactivizer/dist/fork-join/node-worker';\nimport {ActionMeta} from '@wfh/reactivizer';\nimport md5 from 'md5';\nimport MarkdownIt from 'markdown-it';\nimport highlight from 'highlight.js';\nimport type {DefaultTreeAdapterMap} from 'parse5';\nimport {TOC} from '../isom/md-types';\nimport {ChildNode, Element, lookupTextNodeIn, createTocTree} from './markdown-processor-helper';\n\nconst log = log4File(__filename);\n\ntype MdInputActions = {\n  forkProcessFile(markdownFileContent: string, filePath: string): void;\n  processFile(markdownFileContent: string, filePath: string): void;\n  processFileDone(resultHtml: string, toc: TOC[]): void;\n  /** Consumer should dispatach to be related to \"resolveImage\" event */\n  imageResolved(resultUrl: string): void;\n  /** Consumer should dispatch */\n  anchorLinkResolved(url: string): void;\n};\n\ntype MdOutputEvents = {\n  processFileDone: MdInputActions['processFileDone'];\n  /** Consumer program should react on this event */\n  imageToBeResolved(imgSrc: string, mdFilePath: string): void;\n  /** Consumer should react and dispatach \"anchorLinkResolved\" */\n  anchorLinkToBeResolved(linkSrc: string, mdFilePath: string): void;\n\n  htmlRendered(file: string, html: string): void;\n};\n\nconst headerSet = new Set<string>('h1 h2 h3 h4 h5'.split(' '));\nconst md = new MarkdownIt({\n  html: true,\n  highlight(str, lang, _attrs) {\n    if (lang && lang !== 'mermaid') {\n      try {\n        const parsed = highlight.highlight(str, {language: lang}).value;\n        return parsed;\n      } catch (e) {\n        log.debug(e); // skip non-important error like: Unknown language: \"mermaid\"\n      }\n    }\n    return str;\n  }\n});\nexport const markdownProcessor = createWorkerControl<MdInputActions, MdOutputEvents>({name: 'markdownProcessor', debug: true});\n\nconst {r, i, o} = markdownProcessor;\n\nr('forkProcessFile', i.pt.forkProcessFile.pipe(\n  rx.mergeMap(async ([m, content, file]) => {\n    const result = fork(markdownProcessor, 'processFile', [content, file], 'processFileDone');\n    o.dp.wait();\n    const [html, toc] = await result;\n    o.dp.stopWaiting();\n    o.dpf.processFileDone(m, html, toc);\n  })\n));\n\nr('processFile', i.pt.processFile.pipe(\n  rx.combineLatestWith(import('parse5')),\n  rx.mergeMap(([[m, content, file], parse5]) => {\n    const html = md.render(content);\n    const doc = parse5.parse(html, {sourceCodeLocationInfo: true});\n    const content$ = dfsAccessElement(m, html, file, doc);\n    return content$.pipe(rx.map(([content, toc]) => ({toc: createTocTree(toc), content})));\n  }),\n  rx.catchError(err => {\n    log.error(err);\n    return rx.of({toc: [], content: (err as Error).toString()});\n  })\n));\n\nfunction dfsAccessElement(\n  processFileActionMeta: ActionMeta,\n  sourceHtml: string,\n  file: string,\n  root: DefaultTreeAdapterMap['document'],\n  // transpileCode?: (language: string, sourceCode: string) => Promise<string> | rx.Observable<string> | void,\n) {\n  const toc: TOC[] = [];\n  const chr = new rx.BehaviorSubject<ChildNode[]>(root.childNodes || []);\n  const output = [] as Array<string | Promise<string> | rx.Observable<string> | null | undefined>;\n  let htmlOffset = 0;\n\n  chr.pipe(\n    rx.mergeMap(children => rx.from(children)),\n    rx.map(node => {\n      const nodeName = node.nodeName.toLowerCase();\n      if (nodeName === '#text' || nodeName === '#comment' || nodeName === '#documentType')\n        return;\n      const el = node as Element;\n      if (nodeName === 'code') {\n        const classAttr = el.attrs.find(item => item.name === 'class');\n        if (classAttr) {\n          log.warn('markdown code for language:', classAttr.value);\n          const endQuoteSyntaxPos = el.sourceCodeLocation!.attrs!.class!.endOffset - 1;\n          output.push(\n            sourceHtml.slice(htmlOffset, endQuoteSyntaxPos),\n            ' hljs'\n          );\n          htmlOffset = endQuoteSyntaxPos;\n        }\n      } else if (nodeName === 'img') {\n        const imgSrc = el.attrs.find(item => item.name === 'src');\n        if (imgSrc && !imgSrc.value.startsWith('/') && !/^https?:\\/\\//.test(imgSrc.value)) {\n          log.info('found img src=' + imgSrc.value);\n          output.push(sourceHtml.slice(htmlOffset, el.sourceCodeLocation!.attrs!.src!.startOffset + 'src=\"'.length));\n          // eslint-disable-next-line @typescript-eslint/no-non-null-asserted-optional-chain\n          htmlOffset = el.sourceCodeLocation!.attrs?.src.endOffset! - 1;\n          return output.push(rx.merge(\n            new rx.Observable<never>(() => {\n              o.dp.wait();\n            }),\n            o.dfo.imageToBeResolved(i.at.imageResolved, processFileActionMeta, imgSrc.value, file)\n          ).pipe(\n            rx.take(1),\n            rx.map(([, url]) => url),\n            rx.finalize(() => o.dp.stopWaiting())\n          ));\n        }\n      } else if (headerSet.has(nodeName)) {\n        const text = lookupTextNodeIn(el);\n        const hash = btoa(md5(text, {asString: true}));\n        const posBeforeStartTagEnd = el.sourceCodeLocation!.startTag!.endOffset - 1;\n        output.push(sourceHtml.slice(htmlOffset, posBeforeStartTagEnd), ` id=\"mdt-${hash}\"`);\n        htmlOffset = posBeforeStartTagEnd;\n        toc.push({\n          level: 0,\n          tag: nodeName,\n          text: lookupTextNodeIn(el),\n          id: hash\n        });\n      } else if (el.childNodes) {\n        chr.next(el.childNodes);\n      }\n    })\n  ).subscribe();\n\n  output.push(sourceHtml.slice(htmlOffset));\n\n  return rx.from(output).pipe(\n    rx.concatMap(item => typeof item === 'string' ? rx.of(JSON.stringify(item)) : item == null ? ' + img + ' : item),\n    rx.reduce<string, string[]>((acc, item) => {\n      acc.push(item);\n      return acc;\n    }, []),\n    rx.map(frags => [frags.join(' + '), toc] as const)\n  );\n}\n"]}