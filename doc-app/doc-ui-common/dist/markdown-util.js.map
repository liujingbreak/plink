{"version":3,"file":"markdown-util.js","sourceRoot":"","sources":["markdown-util.ts"],"names":[],"mappings":"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","sourcesContent":["import path from 'path';\nimport os from 'os';\nimport * as rx from 'rxjs';\nimport * as op from 'rxjs/operators';\nimport {Pool} from '@wfh/thread-promise-pool';\nimport {log4File} from '@wfh/plink';\n// import type {ChildNode, Element, TextNode} from 'parse5/dist/cjs/tree-adapters/default';\nimport {TOC} from '../isom/md-types';\n\nconst log = log4File(__filename);\n\nlet threadPool: Pool;\n\n/**\n * Use Thread pool to parse Markdown file simultaneously\n * @param source \n * @param resolveImage \n */\nexport function markdownToHtml(\n  source: string,\n  srcFile: string,\n  resolveImage?: (imgSrc: string) => Promise<string> | rx.Observable<string>,\n  resolveLink?: (link: string) => rx.Observable<string> | string):\nrx.Observable<{toc: TOC[]; content: string}> {\n  if (threadPool == null) {\n    threadPool = new Pool(os.cpus().length > 1 ? os.cpus().length - 1 : 3, 1000);\n  }\n\n  const threadTask = threadPool.submitAndReturnTask<{toc: TOC[]; content: string}>({\n    file: path.resolve(__dirname, 'markdown-loader-worker.js'),\n    exportFn: 'toContentAndToc',\n    args: [source]\n  });\n\n  const threadMsg$ = new rx.Subject<{type?: string; data: string}>();\n  threadMsg$.pipe(\n    op.filter(msg => msg.type === 'resolveImageSrc'),\n    op.map(msg => msg.data),\n    op.mergeMap(imgSrc => resolveImage ? resolveImage(imgSrc) : rx.of(JSON.stringify(imgSrc))),\n    op.tap({\n      next: imgUrl => {\n        threadTask.thread?.postMessage({type: 'resolveImageSrc', data: imgUrl});\n        log.info('send resolved image', imgUrl);\n      },\n      complete: () => {\n        threadTask.thread!.off('message', handleThreadMsg);\n        log.info('done');\n      }\n    }),\n    op.takeUntil(rx.from(threadTask.promise)),\n    op.catchError(err => {\n      log.error('markdownToHtml error', err);\n      return rx.of({toc: [], content: ''});\n    })\n  ).subscribe();\n\n  const handleThreadMsg = (msg: {type?: string; data: string}) => {\n    threadMsg$.next(msg);\n  };\n  threadTask.thread!.on('message', handleThreadMsg);\n  return rx.from(threadTask.promise);\n}\n\nexport function* traverseTocTree(tocs: TOC[]): Generator<TOC> {\n  for (const item of tocs) {\n    yield item;\n    if (item.children)\n      yield* traverseTocTree(item.children);\n  }\n}\n\nexport function tocToString(tocs: TOC[]) {\n  let str = '';\n  for (const item of traverseTocTree(tocs)) {\n    str += ' |'.repeat(item.level);\n    // str += '- ';\n    str += `- ${item.text}`;\n    str += os.EOL;\n  }\n  return str;\n}\n\nexport function insertOrUpdateMarkdownToc(input: string, srcFile: string) {\n  return rx.firstValueFrom(markdownToHtml(input, srcFile, img => rx.of(img)).pipe(\n    op.map(({toc, content: html}) => {\n      const tocStr = tocMarkdown(toc);\n      const BEGIN = '<!-- Plink markdown toc -->';\n      const END = '<!-- Plink markdown toc end -->';\n      const existing = input.indexOf(BEGIN);\n      let changedMd = '';\n      if (existing >= 0) {\n        const replacePos = existing + BEGIN.length;\n        const replaceEnd = input.indexOf(END);\n        changedMd = input.slice(0, replacePos) + '\\n' + tocStr + '\\n' + input.slice(replaceEnd);\n      } else {\n        changedMd = [BEGIN, tocStr, END, input].join('\\n');\n      }\n      return {changedMd, toc: tocToString(toc), html};\n    })\n  ));\n}\n\nfunction tocMarkdown(tocs: TOC[]) {\n  let str = '';\n  let i = 0;\n  for (const item of traverseTocTree(tocs)) {\n    if (item.level > 2)\n      continue; // only show title of level 0 - 2\n    str += '  '.repeat(item.level);\n    str += `${item.level > 0 ? '-' : i > 0 ? os.EOL : ''} ${item.text}`;\n    str += os.EOL;\n    i++;\n  }\n  return str.slice(0, -1);\n}\n\n"]}