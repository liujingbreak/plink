{"version":3,"file":"color.js","sourceRoot":"","sources":["color.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable no-console */\n/* tslint:disable no-console */\nimport util from 'node:util';\nimport Color from 'color';\nimport chalk from 'chalk';\n// import * as _ from 'lodash';\n\nexport function* colorInfo(colorStrs: string[]) {\n  for (const colorStr of colorStrs) {\n    const col = new Color(colorStr);\n    const chalker = chalkForColor(col);\n    yield chalker(` ${colorStr} `) + ': ' + chalker(util.inspect({\n      luminosity: col.luminosity(),\n      hue: col.hue(),\n      saturationl: col.saturationl(),\n      lightness: col.lightness(),\n      isLight: col.isLight(),\n      isDark: col.isDark(),\n      alpha: col.alpha(),\n      gray: col.gray(),\n      white: col.white(),\n      grayscale: col.grayscale().toString(),\n      hex: col.hex(),\n      rgb: col.rgb(),\n      hsl: col.hsl(),\n      hsv: col.hsv(),\n      ansi256: col.ansi256(),\n      ansi16: col.ansi16(),\n      cmyk: col.cmyk(),\n      apple:col.apple()\n    }));\n  }\n}\n\nexport function colorContrast(...[cols1, cols2]: [col1: string, col2: string]) {\n  const col1 = new Color(cols1);\n  const  chalker1 = chalkForColor(col1);\n\n  const col2 = new Color(cols2);\n  const  chalker2 = chalkForColor(col2);\n\n  for (const info of colorInfo([cols1, cols2])) {\n    console.log(info);\n  }\n\n  console.log(`Contrast of ${chalker1(cols1)} and ${chalker2(cols2)}: ${col1.contrast(col2)}`);\n}\n\nfunction chalkForColor(col: Color) {\n  return chalk.bgHex(col.hex()).hex(col.isDark() ? '#ffffff' : '#000000');\n}\n\nexport function mixColor(color1: string, color2: string, weightInterval: number) {\n  const col1 = new Color(color1);\n  const col2 = new Color(color2);\n\n  const count = Math.floor(1 / weightInterval);\n  const mixed = [col1];\n  for (let i = 1; i < count; i++) {\n    mixed.push(col1.mix(col2, weightInterval * i));\n  }\n  mixed.push(col2);\n  console.log(mixed.map(col => chalkForColor(col)(`  ${col.hex()}  `)).join('\\n'));\n}\n\n// export function fillPalettes() {\n//   const input: Array<{[hue: string]: string}> = api.config.get([api.packageName, 'fillPalettes']);\n//   console.log(input);\n//   for (const colors of input) {\n//     fillPalette(colors);\n//   }\n// }\n\n// const colorMapkey = ['50', '100', '200', '300', '400', '500', '600', '700', '800', '900',\n//   'A100', 'A200', 'A400', 'A700'];\n\n// function fillPalette(colorMap: {[hue: string]: string}) {\n//   const missingKeys = colorMapkey.filter(key => !_.has(colorMap, key));\n//   console.log(missingKeys);\n\n//   // const colors = (input.colors as string[]).map(color => Color(color));\n//   // console.log(colors.map(col => col.lightenByRatio(0.15).toCSS()));\n// }\n"]}