{"version":3,"file":"ts-cmd-util.js","sourceRoot":"","sources":["../ts/ts-cmd-util.ts"],"names":[],"mappings":"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","sourcesContent":["import fs from 'fs';\nimport Path from 'path';\nimport _ts from 'typescript';\nimport {CompilerOptions as RequiredCompilerOptions} from './package-mgr/package-list-helper';\nexport {RequiredCompilerOptions};\n\n/**\n * \n * @param ts \n * @param fromTsconfigFile \n * @param mergeToTsconfigDir \n * @param mergeTo \n * @return json of fromTsconfigFile\n */\nexport function mergeBaseUrlAndPaths(ts: typeof _ts, fromTsconfigFile: string,\n  mergeToTsconfigDir: string,\n  mergeTo: RequiredCompilerOptions): {compilerOptions: RequiredCompilerOptions} {\n  const mergingTsCfg = ts.parseConfigFileTextToJson(fromTsconfigFile, fs.readFileSync(fromTsconfigFile, 'utf8')).config;\n  const mergingTsCo = mergingTsCfg.compilerOptions as RequiredCompilerOptions;\n\n  if (mergeTo.paths == null) {\n    if (mergeTo.baseUrl == null)\n      mergeTo.baseUrl = './';\n    mergeTo.paths = {};\n  }\n\n  if (mergingTsCo.paths) {\n    const absBaseUrl = mergingTsCo.baseUrl ?\n      Path.resolve(Path.dirname(fromTsconfigFile), mergingTsCo.baseUrl) :\n      Path.dirname(fromTsconfigFile);\n\n    const mergeToBaseUrlAbsPath = Path.resolve(mergeToTsconfigDir, mergeTo.baseUrl);\n\n    for (const [key, plist] of Object.entries(mergingTsCo.paths as {[key: string]: string[]}) ) {\n      mergeTo.paths[key] = plist.map(item => {\n        return Path.relative(mergeToBaseUrlAbsPath, Path.resolve(absBaseUrl, item)).replace(/\\\\/g, '/');\n      });\n    }\n  }\n  return mergingTsCfg;\n}\n\n/**\n * typescript's parseConfigFileTextToJson() does not read \"extends\" property, I have to write my own implementation\n * @param ts \n * @param file \n */\nexport function parseConfigFileToJson(ts: typeof _ts, file: string) {\n  const {config, error} = ts.parseConfigFileTextToJson(file, fs.readFileSync(file, 'utf8'));\n\n  if (error) {\n    console.error(error);\n    throw new Error('Incorrect tsconfig file: ' + file);\n  }\n  const json = config as {compilerOptions: RequiredCompilerOptions; extends?: string};\n  if (json.extends) {\n    const extendsFile = Path.resolve(Path.dirname(file), json.extends);\n    const pJson = parseConfigFileToJson(ts, extendsFile);\n    for (const [prop, value] of Object.entries(pJson.compilerOptions)) {\n      if (prop !== 'baseUrl' && prop !== 'paths' && !Object.prototype.hasOwnProperty.call(json.compilerOptions, prop)) {\n        json.compilerOptions[prop] = value;\n      }\n    }\n\n    if (pJson.compilerOptions.paths) {\n      const absBaseUrl = pJson.compilerOptions.baseUrl ?\n        Path.resolve(Path.dirname(extendsFile), pJson.compilerOptions.baseUrl) :\n        Path.dirname(extendsFile);\n\n      const mergeToBaseUrlAbsPath = Path.resolve(Path.dirname(file), json.compilerOptions.baseUrl);\n\n      for (const [key, plist] of Object.entries(pJson.compilerOptions.paths as {[key: string]: string[]}) ) {\n        if (json.compilerOptions.paths == null) {\n          json.compilerOptions.paths = {};\n        }\n        json.compilerOptions.paths[key] = plist.map(item => {\n          return Path.relative(mergeToBaseUrlAbsPath, Path.resolve(absBaseUrl, item))\n            .replace(/\\\\/g, '/');\n        });\n      }\n    }\n  }\n  return json;\n}\n"]}