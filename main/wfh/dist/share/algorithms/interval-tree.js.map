{"version":3,"file":"interval-tree.js","sourceRoot":"","sources":["../../../ts/share/algorithms/interval-tree.ts"],"names":[],"mappings":"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","sourcesContent":["import {RbTreeNode, RedBlackTree} from './rb-tree';\n\n/**\n * A Red black tree node to contains multiple intervals which has same \"low\" value,\n * \"key\" is interval's low value\n */\nexport interface IntervalTreeNode<V = unknown> extends RbTreeNode<number, V, IntervalTreeNode<V>> {\n  /** For no duplicate single interval*/\n  int?: [low: number, high: number];\n  /** For 2-3 intervals which has same \"low\" value but different \"high\" value */\n  multi?: [high: number, data: V][];\n  /** For 4+ intervals, a tree to store different \"high\" value */\n  highValuesTree?: RedBlackTree<number, V>;\n  /** Maximum \"high\" value of multi intervals that this node contains */\n  maxHighOfMulti?: number;\n  /** Maximum \"high\" of children */\n  max: number;\n}\n\n/**\n * Maintaining:\n *  node.max = max(node.int[1], node.left.max, node.right.max)\n *\n *\n */\nexport class IntervalTree<V = unknown> extends RedBlackTree<number, V, IntervalTreeNode<V>> {\n  insertInterval(low: number, high: number, data: V) {\n    const node = this.insert(low);\n    if (node.int) {\n      // A duplicate low boundray\n      node.multi = [\n        [node.int[1], node.value as V],\n        [high, data]\n      ];\n      node.int = undefined;\n    } else if (node.multi) {\n      if (node.multi.length >= 3) {\n        node.highValuesTree = new RedBlackTree<number, V>();\n        for (const [h, v] of node.multi) {\n          node.highValuesTree.insert(h).value = v;\n        }\n        node.highValuesTree.insert(high).value = data;\n        node.multi = undefined;\n      } else {\n        node.multi.push([high, data]);\n      }\n    } else if (node.highValuesTree) {\n      node.highValuesTree.insert(high).value = data;\n    } else {\n      node.int = [low, high];\n      node.value = data;\n    }\n    if (high > (node.maxHighOfMulti ?? Number.MIN_VALUE)) {\n      node.maxHighOfMulti = high;\n    }\n    maintainNodeMaxValue(node);\n    return node;\n  }\n\n  deleteInterval(low: number, high: number) {\n    const node = this.search(low);\n    if (node == null)\n      return false;\n    if (node.int && node.int[1] === high) {\n      this.deleteNode(node);\n      return true;\n    } else if (node.multi != null) {\n      node.multi = node.multi.filter(it => it[0] !== high);\n      if (node.multi.length === 1) {\n        node.int = [node.key, node.multi[0][0]];\n        node.value = node.multi[0][1];\n        node.multi = undefined;\n        node.maxHighOfMulti = node.int[1];\n      } else {\n        node.maxHighOfMulti = node.multi.reduce((max, curr) => Math.max(curr[0], max), Number.MIN_VALUE);\n      }\n    } else if (node.highValuesTree) {\n      return node.highValuesTree.delete(high);\n    }\n    return false;\n  }\n\n  searchSingleOverlap(low: number, high: number) {\n    let node = this.root;\n    while (node && !doesIntervalOverlap([node.key, node.maxHighOfMulti!], [low, high])) {\n      if (node.left && low <= node.left.max) {\n        node = node.left;\n      } else {\n        node = node.right;\n      }\n    }\n    return node;\n  }\n\n  *searchMultipleOverlaps(low: number, high: number): Generator<[low: number, high: number, data: V, node: IntervalTreeNode<V>]> {\n    const foundNodes = searchMultipleOverlaps(low, high, this.root);\n    // const intervals = new Array<[number, number, V, IntervalTreeNode<V>]>(foundNodes.length);\n    for (const node of foundNodes) {\n      if (node.int) {\n        yield [...node.int, node.value, node];\n      } else if (node.multi) {\n        for (const [h, data] of node.multi) {\n          if (doesIntervalOverlap([low, high], [node.key, h])) {\n            yield [node.key, h, data, node];\n          }\n        }\n      } else if (node.highValuesTree) {\n        for (const highTreeNode of node.highValuesTree.keysSmallererThan(high)) {\n          yield [node.key, highTreeNode.key, highTreeNode.value, node];\n        }\n      }\n    }\n  }\n\n  /** @Override\n   */\n  protected onLeftChildChange(parent: IntervalTreeNode<V>, child: IntervalTreeNode<V> | null | undefined) {\n    maintainNodeMaxValue<V>(parent);\n  }\n  /** @Override\n   */\n  protected onRightChildChange(parent: IntervalTreeNode<V>, child: IntervalTreeNode<V> | null | undefined) {\n    maintainNodeMaxValue<V>(parent);\n  }\n}\n\nfunction maintainNodeMaxValue<V>(node: IntervalTreeNode<V>) {\n  let currNode: IntervalTreeNode<V> | null = node;\n  while (currNode) {\n    if (currNode.maxHighOfMulti == null)\n      throw new Error('currNode.maxHighOfMulti should not be empty');\n    currNode.max = Math.max(currNode.maxHighOfMulti, Math.max(\n      currNode.left?.max ?? Number.MIN_VALUE, currNode.right?.max ?? Number.MIN_VALUE\n    ));\n    currNode = currNode.p;\n  }\n}\n\nfunction doesIntervalOverlap(intA: [number, number], intB: [number, number]) {\n  // Not in case of: intA is left to intB or intA is right to intB entirely\n  return !(intA[1] < intB[0] || intB[1] < intA[0]);\n}\n\nfunction searchMultipleOverlaps<V>(low: number, high: number, node: IntervalTreeNode<V> | null | undefined): IntervalTreeNode<V>[] {\n  const overlaps = [] as IntervalTreeNode<V>[];\n  if (node == null) {\n    return overlaps;\n  }\n  if (doesIntervalOverlap([node.key, node.maxHighOfMulti!], [low, high])) {\n    overlaps.push(node);\n  }\n  if (node.left && low <= node.left.max) {\n    const overlapsLeftChild = searchMultipleOverlaps(low, high, node.left);\n    if (overlapsLeftChild.length > 0) {\n      overlaps.push(...overlapsLeftChild);\n      const overlapsRightChild = searchMultipleOverlaps(low, high, node.right);\n      overlaps.push(...overlapsRightChild);\n    }\n    // Skip right child, as if zero left child overlaps, then\n    // target interval's high value must be even smaller than all left children's low values,\n    // meaning entire left child tree is greater than target interval, so right child tree does the same\n  } else {\n    const overlapsRightChild = searchMultipleOverlaps(low, high, node.right);\n    overlaps.push(...overlapsRightChild);\n  }\n  return overlaps;\n}\n"]}