{"version":3,"file":"minMax.js","sourceRoot":"","sources":["../../../ts/share/algorithms/minMax.ts"],"names":[],"mappings":";;;AACA;;;;;GAKG;AACH,SAAgB,YAAY,CAAa,KAAkB,EACzD,aAAqC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAE,CAAuB,GAAI,CAAuB;IAClG,IAAI,WAAW,GAAa,IAAI,CAAC;IACjC,IAAI,GAAkB,CAAC;IACvB,IAAI,GAAkB,CAAC;IACvB,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;QACxB,IAAI,WAAW,IAAI,IAAI,EAAE,EAAE,+BAA+B;YACxD,MAAM,GAAG,GAAG,UAAU,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;YAC1C,IAAI,MAAS,CAAC;YACd,IAAI,OAAU,CAAC;YACf,IAAI,GAAG,GAAG,CAAC,EAAE;gBACX,MAAM,GAAG,WAAW,CAAC;gBACrB,OAAO,GAAG,IAAI,CAAC;aAChB;iBAAM,IAAI,GAAG,IAAI,CAAC,EAAE;gBACnB,MAAM,GAAG,IAAI,CAAC;gBACd,OAAO,GAAG,WAAW,CAAC;aACvB;YACD,IAAI,GAAG,IAAI,IAAI,IAAI,OAAQ,GAAG,GAAG,EAAE;gBACjC,GAAG,GAAG,OAAQ,CAAC;aAChB;YACD,IAAI,GAAG,IAAI,IAAI,IAAI,MAAO,GAAG,GAAG,EAAE;gBAChC,GAAG,GAAG,MAAO,CAAC;aACf;YACD,WAAW,GAAG,IAAI,CAAC;SACpB;aAAM;YACL,WAAW,GAAG,IAAI,CAAC;SACpB;KACF;IACD,IAAI,WAAW,EAAE;QACf,IAAI,GAAG,IAAI,IAAI,IAAI,WAAW,GAAG,GAAG,EAAE;YACpC,GAAG,GAAG,WAAW,CAAC;SACnB;aAAM,IAAI,GAAG,IAAI,IAAI,IAAI,WAAW,GAAG,GAAG,EAAE;YAC3C,GAAG,GAAG,WAAW,CAAC;SACnB;KACF;IACD,IAAI,GAAG,IAAI,IAAI,IAAI,GAAG,IAAI,IAAI;QAC5B,GAAG,GAAG,GAAG,CAAC;IACZ,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;AACpB,CAAC;AAtCD,oCAsCC","sourcesContent":["\n/**\n * According to the book << Introduction to Algorithms, Third Edition >>, this algorithm\n * costs only (3/2n) time efficiency\n * @param items \n * @param comparator \n */\nexport function getMinAndMax<T = number>(items: Iterable<T>,\n  comparator: (a: T, b: T) => number = (a, b) => (a as unknown as number) - (b as unknown as number)): [T | undefined, T | undefined] {\n  let firstOfPair: T | null = null;\n  let min: T | undefined;\n  let max: T | undefined;\n  for (const item of items) {\n    if (firstOfPair != null) { // firstOfPair must be non-null\n      const res = comparator(item, firstOfPair);\n      let bigger: T;\n      let smaller: T;\n      if (res < 0) {\n        bigger = firstOfPair;\n        smaller = item;\n      } else if (res >= 0) {\n        bigger = item;\n        smaller = firstOfPair;\n      }\n      if (min == null || smaller! < min) {\n        min = smaller!;\n      }\n      if (max == null || bigger! > max) {\n        max = bigger!;\n      }\n      firstOfPair = null;\n    } else {\n      firstOfPair = item;\n    }\n  }\n  if (firstOfPair) {\n    if (min == null || firstOfPair < min) {\n      min = firstOfPair;\n    } else if (max == null || firstOfPair > max) {\n      max = firstOfPair;\n    }\n  }\n  if (min != null && max == null)\n    max = min;\n  return [min, max];\n}\n"]}