{"version":3,"file":"forkJoin-pool.js","sourceRoot":"","sources":["../../../ts/share/forkJoin/forkJoin-pool.ts"],"names":[],"mappings":"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","sourcesContent":["import {Worker as NodeWorker, MessagePort as NodeMessagePort} from 'node:worker_threads';\nimport * as rx from 'rxjs';\nimport * as op from 'rxjs/operators';\nimport type {createActionStreamByType, ActionStreamControl} from '@wfh/redux-toolkit-observable/es/rx-utils';\nimport {RedBlackTree} from '../algorithms/rb-tree';\nimport {ForkWorkerPoolActions, WorkerEvent, PluginActions, RecursiveTaskActions} from './forkJoin-baseWorker';\n\nexport type ForkWorkerActions = {\n  createWorker(workNo: number): void;\n  workerCrearted(workerNo: number, worker: Worker | NodeWorker): void;\n  onWorkerError(worker: number, msg: any): void;\n  workerLoadChange(worker: number, incrementOrDecline: boolean): void;\n};\n\ntype StreamControlOptions = NonNullable<Parameters<typeof createActionStreamByType>[0]>;\n\n/**\n * Fork worker pool is different from original worker poll about below features\n * - Pool can create and assign tasks to worker without waiting for worker finishing previous task\n * - Worker can itself fork new task to pool\n *   - Another or same worker can send response of task finishing message back to specific worker through pool\n * - TODO: try minimize duplicate transferred message data\n */\nexport function createForkWorkerPool(\n  factory: () => Worker | NodeWorker,\n  plugin: ActionStreamControl<PluginActions>,\n  casbt: typeof createActionStreamByType,\n  opts: {\n    concurrent: number;\n  } & StreamControlOptions) {\n\n  const control = casbt<ForkWorkerActions & ForkWorkerPoolActions & WorkerEvent & Pick<RecursiveTaskActions, 'tellPoolReturned' | 'waitForJoin'>>(opts);\n  const {payloadByType, dispatcher, _actionToObject, createAction} = control;\n  const workerByNo = new Map<number, Worker | NodeWorker>();\n  // const actionsFromWorker = new Map<number, rx.Subject<RecursiveTaskActions<Record<string, never>>>>();\n  const workerPortMap = new Map<number, MessagePort | NodeMessagePort>();\n  const idleWorkers = new Set<number>();\n  const workerLoad = new Map<number, number>();\n  /** key is work load or worker, value is workerNo */\n  const workLoadTree = new RedBlackTree<number, number[]>();\n  let workerSeq = 1; // 0 is for master worker\n\n  // const poolId = (SEQ++).toString(16);\n\n  rx.merge(\n    payloadByType.createWorker.pipe(\n      op.map(workerNo => [workerNo, factory()] as const),\n      op.mergeMap(([workerNo, worker]) => {\n        workerByNo.set(workerNo, worker);\n        const workerSpecificCtl = casbt<RecursiveTaskActions>();\n        const {payloadByType: payloadFromWorker} = workerSpecificCtl;\n        plugin.dispatcher.pluginDoInitWorker(workerNo, worker, workerSpecificCtl.dispatchStream);\n        return rx.merge(\n          plugin.payloadByType.pluginDoneInitWorker.pipe(\n            op.filter(([workerNo0]) => workerNo === workerNo0),\n            op.take(1),\n            op.map(([workerNo, port1]) => {\n              workerLoad.set(workerNo, 0);\n              workerPortMap.set(workerNo, port1);\n              dispatcher.workerCrearted(workerNo, worker);\n            })\n          ),\n          rx.merge(\n            payloadFromWorker.waitForJoin,\n            payloadFromWorker.tellPoolReturned.pipe(\n              op.map(callerWorker => {\n                dispatcher.workerLoadChange(callerWorker, true);\n              })\n            )\n          ).pipe(\n            op.map(() => {\n              dispatcher.workerLoadChange(workerNo, false);\n            })\n          )\n        );\n      })\n    ),\n\n    payloadByType.workerLoadChange.pipe(\n      op.map(([worker, incrementOrDecline]) => {\n        const origin = workerLoad.get(worker);\n        if (origin == null) {\n          workerLoad.set(worker, incrementOrDecline ? 1 : -1);\n          const node = workLoadTree.insert(1);\n          if (node.value != null) {\n            node.value.push(worker);\n          } else {\n            node.value = [worker];\n          }\n        } else {\n          const newValue = incrementOrDecline ? origin + 1 : origin - 1;\n          workerLoad.set(worker, newValue);\n          const node = workLoadTree.search(origin);\n          if (node != null) {\n            workLoadTree.deleteNode(node);\n          } else {\n            const newNode = workLoadTree.insert(newValue);\n            if (newNode.value)\n              newNode.value.push(worker);\n            else\n              newNode.value = [worker];\n          }\n        }\n      })\n    ),\n\n    payloadByType.fork.pipe(\n      op.mergeMap(([returnPort, fromWorker, forkAction]) => {\n        if (idleWorkers.size > 0) {\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n          const workerNo = idleWorkers.values().next().value as number;\n          return rx.of([returnPort, workerNo, fromWorker, forkAction] as const);\n        } else if (workerByNo.size < opts.concurrent) {\n          dispatcher.createWorker(workerSeq++);\n          return rx.merge(\n            payloadByType.workerCrearted.pipe(\n              op.take(1),\n              // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n              op.map(([workerNo]) => [returnPort, workerNo, fromWorker, forkAction] as const)\n            ),\n            new rx.Observable<never>(sub => {\n              dispatcher.createWorker(workerSeq++);\n              sub.complete();\n            })\n          );\n        } else {\n          const min = workLoadTree.minimum();\n          return rx.of([returnPort, min!.value[0], fromWorker, forkAction] as const);\n        }\n      }),\n      op.map(([returnPort, toWorker, fromWorker, forkAction]) => {\n        const rawOnForkedForAction = createAction('onForkedFor', returnPort, fromWorker, forkAction);\n        plugin.dispatcher.pluginPostMsgTo(workerPortMap.get(toWorker)!, _actionToObject(rawOnForkedForAction), [returnPort]);\n\n        dispatcher.workerLoadChange(toWorker, true);\n      })\n    )\n  ).pipe(\n    op.catchError((err, src) => {\n      console.error(err);\n      return src;\n    })\n  ).subscribe();\n\n  return control as unknown as ActionStreamControl<ForkWorkerPoolActions>;\n}\n"]}