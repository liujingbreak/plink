{"version":3,"file":"forkJoin-baseWorker.js","sourceRoot":"","sources":["../../../ts/share/forkJoin/forkJoin-baseWorker.ts"],"names":[],"mappings":"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","sourcesContent":["import type {Worker as NodeWorker, MessagePort as NodeMessagePort} from 'node:worker_threads';\nimport * as rx from 'rxjs';\nimport * as op from 'rxjs/operators';\nimport {createActionStreamByType, ActionStreamControl, ActionTypes} from '@wfh/redux-toolkit-observable/es/rx-utils';\nimport {createForkWorkerPool} from './forkJoin-pool';\n\nexport type PluginActions = {\n  /** called by pool */\n  pluginDoInitWorker(\n    workerNo: number, worker: Worker | NodeWorker, actionOfWorker$: rx.Subject<any>): void;\n  pluginDoneInitWorker(workerNo: number, parentPort: MessagePort | NodeMessagePort): void;\n\n  /** called by worker */\n  pluginWorkerOnInit(): void;\n  pluginWorkerDoneInit(workerNo: number, parentPort: MessagePort | NodeMessagePort): void;\n  pluginWorkerOnDestory(): void;\n  pluginCreateReturnPort(workerNo: number): void;\n  pluginDoneCreateReturnPort(port2: MessagePort | NodeMessagePort): void;\n  pluginPostMsgTo(parentPort: MessagePort | NodeMessagePort, content: any, transferable?: any[]): void;\n  pluginOnError(workerNo: number, err: Error): void;\n};\n\nexport type RecursiveTaskActions<\n  A extends Record<string, (...a: any[]) => void> = Record<string, never>\n> = {\n  waitForJoin(): void;\n  setForkActions(action$s: rx.Observable<ActionTypes<A>[keyof A]>[]): void;\n  setReturnActions(action$s: rx.Observable<ActionTypes<A>[keyof A]>[]): void;\n  tellPoolReturned(returnWorkerNo: number): void;\n  onJoinReturn(actionObject: ActionTypes<A>[keyof A]): void;\n\n  getShareData(key: string): void;\n  putShareData(key: string, data: unknown): void;\n  removeShareData(key: string): void;\n};\n\n/** Dispatched by pool or forked worker */\nexport type WorkerEvent = {\n  onForkedFor( returnPort: MessagePort | NodeMessagePort, callerWorkerNo: number, actionObject: {p: [id: string]; t: string}): void;\n};\n\nexport type ForkWorkerPoolActions = {\n  fork(returnPort: MessagePort | NodeMessagePort, fromWorker: number, action: any): void;\n};\n\nexport function createControlForMain<\n  // eslint-disable-next-line space-before-function-paren\n  A extends Record<string, (...payload: any[]) => void> = Record<string, never>\n>(\n  [plugin, casbt]: readonly [ActionStreamControl<PluginActions>, typeof createActionStreamByType],\n  workerFactory: () => Worker | NodeWorker,\n  opts: {\n    concurrent: number;\n  } & NonNullable<Parameters<typeof createActionStreamByType>[0]>,\n  epic: ( controller: ActionStreamControl<A & RecursiveTaskActions<A>>, workerNo: number) => rx.Observable<any>\n) {\n  return createWorkerControl([plugin, casbt], createForkWorkerPool(workerFactory, plugin, casbt, opts), opts, epic);\n}\n\n// eslint-disable-next-line space-before-function-paren\nexport function createControlForWorker< A extends Record<string, (...payload: any[]) => void> = Record<string, never>>(\n  plugin: readonly [ActionStreamControl<PluginActions>, typeof createActionStreamByType],\n  opts: NonNullable<Parameters<typeof createActionStreamByType>[0]>,\n  epic: ( controller: ActionStreamControl<A & RecursiveTaskActions<A>>, workerNo: number) => rx.Observable<any>\n) {\n  return createWorkerControl(plugin, null, opts, epic);\n}\n\n/**\n * @param epic a function which return `observable of actions` to be `postMessage` to worker's caller\n */\nfunction createWorkerControl<\n  // eslint-disable-next-line space-before-function-paren\n  A extends Record<string, (...payload: any[]) => void> = Record<string, never>\n>(\n  [plugin, casbt]: readonly [ActionStreamControl<PluginActions>, typeof createActionStreamByType],\n  pool: ActionStreamControl<ForkWorkerPoolActions> | null, {debug}: {debug?: string | boolean;},\n  epic: ( controller: ActionStreamControl<A & RecursiveTaskActions<A>>, workerNo: number) => rx.Observable<any>\n) {\n  // key is fork task ID\n  const returnResultPortMap = new Map<string, [callerWorkerNo: number, returnPort: MessagePort | NodeMessagePort]>();\n  const sub = rx.defer(() => {\n    if (pool) {\n      return rx.of([0, null] as const);\n    } else {\n      plugin.dispatcher.pluginWorkerOnInit();\n      return plugin.payloadByType.pluginWorkerDoneInit.pipe(op.take(1));\n    }\n  }).pipe(\n    op.switchMap(([workerNo, parentPort]) => {\n      if (pool == null) {\n        // eslint-disable-next-line no-console\n        console.log('worker-' + workerNo, 'is created');\n      }\n      const controller = casbt<RecursiveTaskActions<A>>({debug: debug ?? process.env.NODE_ENV === 'development' ? 'worker-' + workerNo : false});\n      const {_actionFromObject, _actionToObject, payloadByType: pt, createAction} = controller;\n      const rPt = controller.createLatestPayloads('setForkActions', 'setReturnActions');\n      const {createAction: createPoolAction} =\n        controller as unknown as ActionStreamControl<ForkWorkerPoolActions>;\n\n      return rx\n        .merge(\n          epic(controller as unknown as ActionStreamControl< A & RecursiveTaskActions<A>>, workerNo).pipe(\n            op.catchError((err, src) => {\n              if (parentPort != null) {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                plugin.dispatcher.pluginPostMsgTo(parentPort, {error: err, workerNo});\n              } else {\n                console.error(err);\n              }\n              return src;\n            })\n          ),\n\n          rPt.setForkActions.pipe(\n            op.switchMap(action$s => rx.merge(...action$s)),\n            op.concatMap(act => {\n              const wait = plugin.payloadByType.pluginDoneCreateReturnPort.pipe(\n                op.take(1),\n                op.map(port2 => {\n                  const actionObj = _actionToObject(act);\n                  const forkAction = createPoolAction( 'fork', port2, workerNo, actionObj);\n                  if (pool == null && parentPort)\n                    plugin.dispatcher.pluginPostMsgTo(parentPort, _actionToObject(forkAction), [port2]);\n                  else if (pool)\n                    pool.dispatcher.fork(...forkAction.payload);\n                })\n              );\n              plugin.dispatcher.pluginCreateReturnPort(workerNo);\n              return wait;\n            })\n          ),\n\n          pool == null ?\n            rPt.setReturnActions.pipe(\n              op.switchMap(action$s => rx.merge(...action$s)),\n              op.map(act => {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                const id = Array.isArray(act.payload)\n                  ? act.payload[0]\n                  : act.payload;\n                if (typeof id === 'string') {\n                  const entry = returnResultPortMap.get(id);\n                  if (entry) {\n                    const [callerWorkerNo, port] = entry;\n                    returnResultPortMap.delete(id);\n                    plugin.dispatcher.pluginPostMsgTo(port, _actionToObject(createAction('onJoinReturn', act)));\n                    if (parentPort) {\n                      plugin.dispatcher.pluginPostMsgTo(parentPort, _actionToObject(createAction('tellPoolReturned', callerWorkerNo)));\n                    }\n                  }\n                }\n              })\n            )\n            : rx.EMPTY,\n\n          (pt as unknown as ActionStreamControl<WorkerEvent>['payloadByType']).onForkedFor.pipe(\n            op.map(([callerPort, callerWorkerNo, obj]) => {\n              returnResultPortMap.set(obj.p[0], [callerWorkerNo, callerPort]);\n              _actionFromObject(obj);\n            })\n          )\n        )\n        .pipe(\n          op.catchError((err, src) => {\n            if (parentPort) {\n              // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n              plugin.dispatcher.pluginPostMsgTo(parentPort, {error: err});\n            } else {\n              console.error(err);\n            }\n            return src;\n          }),\n          op.finalize(() => plugin.dispatcher.pluginWorkerOnDestory())\n        );\n    })\n  ).subscribe();\n  return () => sub.unsubscribe();\n}\n"]}