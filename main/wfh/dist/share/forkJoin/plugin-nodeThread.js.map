{"version":3,"file":"plugin-nodeThread.js","sourceRoot":"","sources":["../../../ts/share/forkJoin/plugin-nodeThread.ts"],"names":[],"mappings":"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","sourcesContent":["import {MessageChannel, parentPort, Worker} from 'node:worker_threads';\nimport * as rx from 'rxjs';\nimport * as op from 'rxjs/operators';\nimport {createActionStreamByType} from '../../../../packages/redux-toolkit-observable/dist/rx-utils';\nimport {PluginActions} from './forkJoin-baseWorker';\n\nexport function createNodeThreadPlugin() {\n  const ctrl = createActionStreamByType<PluginActions>();\n  const {payloadByType: pt, actionByType: at, objectToAction, dispatcher, _actionFromObject} = ctrl;\n  rx.merge(\n    pt.pluginDoInitWorker.pipe(\n      op.map(([workerNo, worker, actionSubject]) => {\n        (worker as Worker).on('message', event => {\n          if ((event as {type: string}).type === 'WORKER_READY') {\n            dispatcher.pluginDoneInitWorker(workerNo, parentPort!);\n          } else if ((event as {error?: any}).error) {\n            dispatcher.pluginOnError(\n              workerNo,\n              (event as {error?: any}).error\n            );\n          } else {\n            actionSubject.next(objectToAction(event));\n          }\n        });\n        (worker as Worker).on('messageerror', error => {\n          dispatcher.pluginOnError(workerNo, error);\n        });\n        (worker as Worker).postMessage({type: 'ASSIGN_WORKER_NO', data: workerNo});\n      })\n    ),\n\n    pt.pluginWorkerOnInit.pipe(\n      op.switchMap(() => new rx.Observable(_sub => {\n        const handler = (event: {type?: string; data: number}) => {\n          const msg = event;\n          if (msg.type === 'ASSIGN_WORKER_NO') {\n            parentPort!.postMessage({type: 'WORKER_READY'});\n            dispatcher.pluginWorkerDoneInit(msg.data, parentPort!);\n          }\n        };\n        /* eslint-disable no-restricted-globals */\n        parentPort?.addListener('message', handler);\n        return () => parentPort?.removeListener('message', handler);\n      })),\n      op.takeUntil(at.pluginWorkerOnDestory)\n    ),\n\n    pt.pluginCreateReturnPort.pipe(\n      op.map(workerNo => {\n        const chan = new MessageChannel();\n        const workerMsgHandler = (msg: any) => {\n          if (process.env.NODE_ENV === 'development') {\n            // eslint-disable-next-line no-console\n            console.log(`worker #${workerNo} recieve message from forked worker`, msg);\n          }\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n          _actionFromObject(msg);\n          chan.port1.close();\n        };\n        chan.port1.once('message', workerMsgHandler);\n        chan.port1.start();\n        dispatcher.pluginDoneCreateReturnPort(chan.port2);\n      })\n    ),\n    pt.pluginPostMsgTo.pipe(\n      op.map(([content, transfers]) => {\n        parentPort!.postMessage(content, transfers);\n      })\n    )\n  ).pipe(\n    op.catchError((err, src) => {\n      console.error(err);\n      return src;\n    })\n  ).subscribe();\n\n  return [ctrl, createActionStreamByType] as const;\n}\n\n"]}