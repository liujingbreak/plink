{"version":3,"file":"plugin-webWorker.js","sourceRoot":"","sources":["../../../ts/share/forkJoin/plugin-webWorker.ts"],"names":[],"mappings":"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","sourcesContent":["import * as rx from 'rxjs';\nimport * as op from 'rxjs/operators';\nimport {createActionStreamByType} from '@wfh/redux-toolkit-observable/es/rx-utils';\nimport {ForkWorkerActions} from './forkJoin-pool';\nimport {PluginActions} from './forkJoin-baseWorker';\n\nexport function createWebWorkerPlugin() {\n  const ctrl = createActionStreamByType<PluginActions & ForkWorkerActions>();\n  const {payloadByType: pt, dispatcher, actionByType: at, _actionFromObject, objectToAction} = ctrl;\n\n  rx.merge(\n    pt.pluginDoInitWorker.pipe(\n      op.map(([workerNo, worker, actionSubject]) => {\n        const chan = new MessageChannel();\n\n        chan.port1.onmessage = event => {\n          if ((event.data as {type: string}).type === 'WORKER_READY') {\n            dispatcher.pluginDoneInitWorker(workerNo, chan.port1);\n          } else if ((event.data as {error?: any}).error) {\n            dispatcher.onWorkerError(\n              workerNo,\n              (event.data as {error?: any}).error\n            );\n          } else {\n            actionSubject.next(objectToAction(event.data));\n          }\n        };\n        chan.port1.onmessageerror = event => {\n          dispatcher.onWorkerError(workerNo, event.data);\n        };\n        (worker as Worker).postMessage({type: 'ASSIGN_WORKER_NO', workerNo, port: chan.port2}, [chan.port2]);\n      })\n    ),\n    pt.pluginWorkerOnInit.pipe(\n      op.switchMap(() => new rx.Observable(_sub => {\n\n        const handler = (event: MessageEvent<{type?: string; workerNo: number, port: MessagePort}>) => {\n          const msg = event.data;\n          if (msg.type === 'ASSIGN_WORKER_NO') {\n            msg.port.postMessage({type: 'WORKER_READY'});\n            dispatcher.pluginWorkerDoneInit(msg.workerNo, msg.port);\n\n            msg.port.onmessage = (event: MessageEvent<any>) => {\n              if (process.env.NODE_ENV === 'development') {\n                // eslint-disable-next-line no-console\n                console.log(`worker #${msg.workerNo} recieve message from master`, msg);\n              }\n              // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n              _actionFromObject(event.data);\n            };\n          }\n        };\n        // eslint-disable-next-line no-restricted-globals\n        self.onmessage = handler;\n      })),\n      op.takeUntil(at.pluginWorkerOnDestory)\n    ),\n    pt.pluginCreateReturnPort.pipe(\n      op.map(workerNo => {\n        const chan = new MessageChannel();\n        const workerMsgHandler = (event: MessageEvent<unknown>) => {\n          const {data: msg} = event;\n          if (process.env.NODE_ENV === 'development') {\n            // eslint-disable-next-line no-console\n            console.log(`worker #${workerNo} recieve message from forked worker`, msg);\n          }\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n          _actionFromObject(msg as any);\n          chan.port1.removeEventListener('message', workerMsgHandler);\n          chan.port1.close();\n        };\n        chan.port1.addEventListener('message', workerMsgHandler);\n        chan.port1.start();\n        dispatcher.pluginDoneCreateReturnPort(chan.port2);\n      })\n    ),\n    pt.pluginPostMsgTo.pipe(\n      op.map(([port, content, transfers]) => {\n        // eslint-disable-next-line no-restricted-globals\n        port.postMessage(content, transfers);\n      })\n    )\n  ).pipe(\n    op.catchError((err, src) => {\n      console.error(err);\n      return src;\n    })\n  ).subscribe();\n\n  return [ctrl, createActionStreamByType] as const;\n}\n\n"]}