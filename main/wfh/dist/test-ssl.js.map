{"version":3,"file":"test-ssl.js","sourceRoot":"","sources":["../src/test-ssl.ts"],"names":[],"mappings":";;;;;AAAA,+BAA+B;AAC/B,kDAA0B;AAC1B,4CAAoB;AAEpB,SAAS,OAAO,CAAC,QAAgB,EAAE,MAAe;IAChD,IAAI,EAAsB,CAAC;IAC3B,IAAI,MAAM,IAAI,YAAE,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;QACnC,EAAE,GAAG,YAAE,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;KAC9B;IAED,OAAO,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,GAAG,EAAE,EAAE;QACxC,eAAK,CAAC,GAAG,CAAC,UAAU,GAAG,QAAQ,EAAE,EAAC,EAAE,EAAC,EAAE,GAAG,CAAC,EAAE;YAC3C,GAAG,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;YACxB,GAAG,CAAC,EAAE,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE;gBACpB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YACpB,CAAC,CAAC,CAAC;YACH,GAAG,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE,CAAC,OAAO,EAAE,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,CAAC,EAAE;YACnB,OAAO,CAAC,KAAK,CAAC,qBAAqB,QAAQ,KAAK,GAAG,GAAG,CAAC,CAAC;YACxD,GAAG,CAAC,GAAG,CAAC,CAAC;YACT,mBAAmB;QACrB,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;IACX,CAAC,CAAC,CAAC;AACL,CAAC;AAED,KAAK,OAAO,CAAC,GAAG,CAAC;IACf,OAAO,CAAC,eAAe,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC;IACzD,OAAO,CAAC,cAAc,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC,CAAC;CAC3D,CAAC,CAAC","sourcesContent":["/* eslint-disable no-console */\nimport https from 'https';\nimport fs from 'fs';\n\nfunction testSSL(endPoint: string, caFile?: string) {\n  let ca: Buffer | undefined;\n  if (caFile && fs.existsSync(caFile)) {\n    ca = fs.readFileSync(caFile);\n  }\n\n  return new Promise<void>((resolve, rej) => {\n    https.get('https://' + endPoint, {ca}, res => {\n      res.setEncoding('utf8');\n      res.on('data', data => {\n        console.log(data);\n      });\n      res.on('end', () => resolve());\n    }).on('error', err => {\n      console.error(`Failed to connect ${endPoint},\\n` + err);\n      rej(err);\n      // process.exit(1);\n    }).end();\n  });\n}\n\nvoid Promise.all([\n  testSSL('www.baidu.com', process.argv[2]).catch(() => {}),\n  testSSL('www.bing.com', process.argv[2]).catch((() => {}))\n]);\n"]}