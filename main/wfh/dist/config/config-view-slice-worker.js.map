{"version":3,"file":"config-view-slice-worker.js","sourceRoot":"","sources":["../../ts/config/config-view-slice-worker.ts"],"names":[],"mappings":";;;;;AAAA,yEAA6C;AAC7C,4CAAoB;AAGpB,wDAAwD;AAExD,0CAA0C;AAE3B,KAAK,oBAAU,WAAmB,EAAE,UAAkB,EAAE,gBAAqB;IAG1F,MAAM,OAAO,GAAG,YAAE,CAAC,UAAU,CAAC,WAAW,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,WAAW,GAAG,KAAK,CAAC,CAAC,CAAC,WAAW,GAAG,OAAO,CAAC;IAEhG,MAAM,OAAO,GAAG,MAAM,YAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IAC7D,MAAM,GAAG,GAAG,IAAI,sBAAQ,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IAC3C,kBAAkB;IAClB,uEAAuE;IACvE,kEAAkE;IAClE,iCAAiC;IACjC,sCAAsC;IACtC,0CAA0C;IAC1C,IAAI,SAA8C,CAAC;IACnD,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,wBAAwB,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,EAAE;QAC/E,IAAK,GAA+B,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,UAAU,EAAE;YAClE,6GAA6G;YAC7G,uBAAuB;YACvB,SAAS,GAAG,GAA8B,CAAC;YAC3C,OAAO,IAAI,CAAC;SACb;IACH,CAAC,CAAC,CAAC;IACH,MAAM,KAAK,GAAmB,EAAE,CAAC;IACjC,IAAI,SAAS,EAAE;QACb,GAAG,CAAC,IAAI,CAAC,SAAS,EAAE,6BAA6B,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,EAAE;;YAEzF,MAAM,IAAI,GAAG,GAA2B,CAAC;YACzC,0DAA0D;YAC1D,4CAA4C;YAC5C,gBAAgB;YAChB,mFAAmF;YACnF,IAAI;YACJ,KAAK,CAAC,IAAI,CAAC;gBACT,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;gBAC7B,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,uBAAuB,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE;gBACzF,IAAI,EAAE,CAAA,MAAA,IAAI,CAAC,IAAI,0CAAE,OAAO,EAAE,KAAI,EAAE;gBAChC,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa;aAC/B,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;KACJ;IACD,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;AAC1B,CAAC;AAzCD,4BAyCC","sourcesContent":["import Selector from '../utils/ts-ast-query';\nimport fs from 'fs';\nimport ts from 'typescript';\nimport {PropertyMeta} from './config.types';\n// import {jsonToCompilerOptions} from '../ts-compiler';\n\n// let co: ts.CompilerOptions | undefined;\n\nexport default async function(dtsFileBase: string, typeExport: string, _compilerOptions: any)\n: Promise<[metas: PropertyMeta[], dtsFile: string]> {\n\n  const dtsFile = fs.existsSync(dtsFileBase + 'ts') ? dtsFileBase + '.ts' : dtsFileBase + '.d.ts';\n\n  const content = await fs.promises.readFile(dtsFile, 'utf-8');\n  const sel = new Selector(content, dtsFile);\n  // if (co == null)\n  //   co = jsonToCompilerOptions(compilerOptions, 'tsconfig-base.json');\n  // const tsPgm = ts.createProgram([dtsFile.replace(/\\\\/g, '/')], {\n  //   target: ts.ScriptTarget.ES5,\n  //   module: ts.ModuleKind.CommonJS});\n  // const checker = tsPgm.getTypeChecker();\n  let interfAst: ts.InterfaceDeclaration | undefined;\n  sel.some(null, '^:InterfaceDeclaration', (ast, path, parents, isLeaf, comment) => {\n    if ((ast as ts.InterfaceDeclaration).name.getText() === typeExport) {\n      // const symbol = checker.getSymbolsInScope((ast as ts.InterfaceDeclaration).name, ts.SymbolFlags.Interface);\n      // console.log(symbol);\n      interfAst = ast as ts.InterfaceDeclaration;\n      return true;\n    }\n  });\n  const metas: PropertyMeta[] = [];\n  if (interfAst) {\n    sel.some(interfAst, '^.members:PropertySignature', (ast, path, parents, isLeaf, comment) => {\n\n      const node = ast as ts.PropertySignature;\n      // const symbol = checker.getSymbolAtLocation(node.type!);\n      // console.log(node.name.getText(), symbol);\n      // if (symbol) {\n      //   console.log(ts.displayPartsToString(symbol.getDocumentationComment(checker)));\n      // }\n      metas.push({\n        property: node.name.getText(),\n        desc: comment ? comment.replace(/(?:^\\/\\*\\*\\s*|\\*\\/$)/g, '').replace(/^\\s*\\*/mg, '') : '',\n        type: node.type?.getText() || '',\n        optional: !!node.questionToken\n      });\n    });\n  }\n  return [metas, dtsFile];\n}\n"]}