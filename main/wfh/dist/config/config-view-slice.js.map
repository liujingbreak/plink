{"version":3,"file":"config-view-slice.js","sourceRoot":"","sources":["../../src/config/config-view-slice.ts"],"names":[],"mappings":"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","sourcesContent":["import Path from 'path';\n// import Selector from '../utils/ts-ast-query';\nimport os from 'os';\nimport {PayloadAction} from '@reduxjs/toolkit';\nimport * as rx from 'rxjs';\nimport * as op from 'rxjs/operators';\nimport {getLogger} from 'log4js';\nimport {getState as getPkgMgrState, PackageInfo} from '../package-mgr';\nimport {Pool} from '../../../packages/thread-promise-pool/dist';\nimport {stateFactory, ofPayloadAction, processExitAction$} from '../store';\nimport {PropertyMeta} from './config.types';\nimport {getPackageSettingFiles} from './index';\n// import {ConfigHandlerMgr} from '../config-handler';\nconst log = getLogger('plink.config-view-slice');\n\nexport interface ConfigViewState {\n  /** key is packageName + ',' + propertyName */\n  propertyByName: Map<string, PropertyMeta>;\n  /** key is package name */\n  packageMetaByName: Map<string, {\n    properties: string[];\n    typeFile: string;\n  }>;\n  packageNames?: string[];\n  updateChecksum: number;\n}\n\nconst initialState: ConfigViewState = {\n  propertyByName: new Map(),\n  packageMetaByName: new Map(),\n  updateChecksum: 0\n};\n\nexport const configViewSlice = stateFactory.newSlice({\n  name: 'configView',\n  initialState,\n  reducers: {\n    loadPackageSettingMeta(d, action: PayloadAction<{workspaceKey: string; packageName?: string}>) {},\n    _packageSettingMetaLoaded(s,\n      {payload: [propMetas, dtsFile, pkg]}: PayloadAction<[PropertyMeta[], string, PackageInfo]>) {\n      s.packageMetaByName.set(pkg.name, {\n        typeFile: dtsFile,\n        properties: propMetas.map(item => item.property)\n      });\n\n      for (const item of propMetas) {\n        s.propertyByName.set(pkg.name + ',' + item.property, item);\n      }\n    },\n    packageSettingsMetaLoaded(s) {\n      // Sort packages to move Plink package to the first\n      s.packageNames = Array.from(s.packageMetaByName.keys());\n      const plinkIdx = s.packageNames.findIndex(name => name === '@wfh/plink');\n      s.packageNames.splice(plinkIdx, 1);\n      s.packageNames.unshift('@wfh/plink');\n      s.updateChecksum++;\n    }\n  }\n});\n\n// type MapValue<M> = M extends Map<string, infer T> ? T : never;\n\nexport const dispatcher = stateFactory.bindActionCreators(configViewSlice);\n\nstateFactory.addEpic<{configView: ConfigViewState}>((action$, state$) => {\n  return rx.merge(\n    action$.pipe(ofPayloadAction(configViewSlice.actions.loadPackageSettingMeta),\n      op.switchMap(({payload}) => {\n        const pool = new Pool(os.cpus().length - 1);\n        const pkgState = getPkgMgrState();\n        const plinkPkg = pkgState.linkedDrcp ? pkgState.linkedDrcp : pkgState.installedDrcp!;\n\n        return Promise.all(Array.from(getPackageSettingFiles(\n          payload.workspaceKey, payload.packageName ? new Set([payload.packageName]) : undefined)\n        ).concat([ ['wfh/dist/config/config-slice', 'PlinkSettings', '', '', plinkPkg] ])\n          .map(([typeFile, typeExport, , , pkg]) => {\n\n            const dtsFileBase = Path.resolve(pkg.realPath, typeFile);\n            return pool.submit<[metas: PropertyMeta[], dtsFile: string]>({\n              file: Path.resolve(__dirname, 'config-view-slice-worker.js'),\n              exportFn: 'default',\n              args: [dtsFileBase, typeExport/* , ConfigHandlerMgr.compilerOptions*/]\n            })\n              .then(([propMetas, dtsFile]) => {\n                log.debug(propMetas);\n                dispatcher._packageSettingMetaLoaded([propMetas, Path.relative(pkg.realPath, dtsFile), pkg]);\n              });\n          }));\n      }),\n      op.tap(() => {\n        dispatcher.packageSettingsMetaLoaded();\n      })\n    ),\n    processExitAction$.pipe(\n      op.tap(() => dispatcher._change(s => {\n        s.packageMetaByName.clear();\n        s.propertyByName.clear();\n      }))\n    )\n  ).pipe(\n    op.catchError((ex, src) => {\n      log.error(ex);\n      return src;\n    }),\n    op.ignoreElements()\n  );\n});\n\nexport function getState() {\n  return stateFactory.sliceState(configViewSlice);\n}\n\nexport function getStore() {\n  return stateFactory.sliceStore(configViewSlice);\n}\n"]}