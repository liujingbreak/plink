{"version":3,"file":"config-slice.js","sourceRoot":"","sources":["../../src/config/config-slice.ts"],"names":[],"mappings":"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","sourcesContent":["import Path from 'path';\nimport {isMainThread, threadId} from 'worker_threads';\nimport * as op from 'rxjs/operators';\nimport * as rx from 'rxjs';\nimport {PayloadAction} from '@reduxjs/toolkit';\nimport log4js from 'log4js';\nimport {PlinkEnv} from '../node-path';\nimport {stateFactory, processExitAction$} from '../store';\nimport { GlobalOptions } from '../cmd/types';\nimport {getLanIPv4} from '../utils/network-util';\n\nconst {distDir, rootDir} = JSON.parse(process.env.__plink!) as PlinkEnv;\nexport interface PlinkSettings {\n  /** Node.js server port number */\n  port: number | string;\n  publicPath: string;\n  localIP: string;\n  useYarn: boolean;\n  /**\n   * process.env.NODE_ENV will be automatically\n   * updated to 'developement' or 'production corresponding to this property\n   * */\n  devMode: boolean;\n  /** default directory is <rootDir>/dist */\n  destDir: string;\n  /** default directory is <rootDir>/dist/static */\n  staticDir: string;\n  /** default directory is <rootDir>/dist/server server side render resource directory */\n  serverDir: string;\n  /** Repository directory */\n  rootPath: string;\n  /** Node package scope names, omit leading \"@\" and tailing \"/\" character,\n   * when we type package names in command line, we can omit scope name part,\n   * Plink can guess complete package name based on this property\n   */\n  packageScopes: string[];\n  /** Plink command line options */\n  cliOptions?: GlobalOptions;\n  logger?: {\n    noFileLimit: boolean;\n    onlyFileOut: boolean;\n  };\n  /** command line \"--prop <json-path>=<json-value>\" arguments */\n  [cliProp: string]: unknown;\n  /** @deprecated */\n  outputPathMap: {[pkgName: string]: string};\n  /** default is '/' */\n  nodeRoutePath: string;\n  /** @deprecated */\n  staticAssetsURL: string;\n  /** @deprecated */\n  packageContextPathMapping: {[path: string]: string};\n  browserSideConfigProp: string[];\n  /** @deprecated */\n  enableSourceMaps: boolean;\n}\n\nconst initialState: Partial<PlinkSettings> = {\n  port: 14333,\n  localIP: getLanIPv4(),\n  publicPath: '/',\n  devMode: false,\n  useYarn: false,\n  destDir: distDir,\n  staticDir: Path.resolve(distDir, 'static'),\n  serverDir: Path.resolve(distDir, 'server'),\n  rootPath: rootDir,\n  packageScopes: ['wfh', 'bk', 'bk-core', 'dr', 'dr-core', 'types'],\n  nodeRoutePath: '/',\n  staticAssetsURL: '',\n  packageContextPathMapping: {},\n  browserSideConfigProp: [],\n  enableSourceMaps: true,\n  outputPathMap: {},\n  __filename\n};\n\nexport const configSlice = stateFactory.newSlice({\n  name: 'config',\n  initialState: initialState as PlinkSettings,\n  reducers: {\n    saveCliOption(s, {payload}: PayloadAction<GlobalOptions>) {\n      if (payload.config) {\n        // Later on process may change cwd by chdir(), make sure file paths are absolute, so that it remains correctly even in difference working directory\n        payload.config = payload.config.map(entry => Path.resolve(entry));\n      }\n      s.cliOptions = payload;\n      s.devMode = payload.dev === true;\n    }\n  }\n});\n\nexport const dispatcher = stateFactory.bindActionCreators(configSlice);\n\nstateFactory.addEpic<{config: PlinkSettings}>((action$, state$) => {\n  return rx.merge(\n    getStore().pipe(\n      op.map(s => s.devMode), op.distinctUntilChanged(),\n      op.map(devMode => {\n        process.env.NODE_ENV = devMode ? 'development' : 'production';\n      })\n    ),\n    getStore().pipe(op.map(s => s.cliOptions?.verbose), op.distinctUntilChanged(),\n      op.filter(verbose => !!verbose),\n      op.map(() => {\n        // initial log configure is in store.ts\n        let logPatternPrefix = '';\n        if (process.send || !isMainThread)\n          logPatternPrefix += `[P${process.pid}.T${threadId}] `;\n        log4js.configure({\n          appenders: {\n            out: {\n              type: 'stdout',\n              layout: {type: 'pattern', pattern: logPatternPrefix + '%[[%p] %c%] - %m'}\n            }\n          },\n          categories: {\n            default: {appenders: ['out'], level: 'debug'},\n            plink: {appenders: ['out'], level: 'debug'}\n          }\n        });\n      }),\n      op.take(1)\n    ),\n    processExitAction$.pipe(\n      op.tap(() => dispatcher._change(s => {\n        s.cliOptions = undefined;\n        s.view = undefined;\n      }))\n    )\n  ).pipe(\n    op.catchError((ex, src) => {\n      // eslint-disable-next-line no-console\n      console.error(ex);\n      return src;\n    }),\n    op.ignoreElements()\n  );\n});\n\nexport function getState() {\n  return stateFactory.sliceState(configSlice);\n}\n\nexport function getStore() {\n  return stateFactory.sliceStore(configSlice);\n}\n"]}