{"version":3,"file":"tsc-packages.js","sourceRoot":"","sources":["../../src/deprecated/tsc-packages.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable import/order */\n/**\n * Use Typescript \"Project Reference\" & \"tsc -b Commandline\" ability to compile multiple packages\n */\nimport fs from 'fs';\nimport Path from 'path';\nimport fse from 'fs-extra';\nimport _ from 'lodash';\nimport log4js from 'log4js';\nimport {merge, Observable, EMPTY} from 'rxjs';\nimport {reduce, concatMap, filter} from 'rxjs/operators';\nimport {CompilerOptions} from 'typescript';\nimport config from '../config';\nimport {setTsCompilerOptForNodePath} from '../package-mgr/package-list-helper';\nimport {getState, PackageInfo, workspaceKey} from '../package-mgr';\nimport {findPackagesByNames} from '../cmd/utils';\nimport {getState as getTscState} from './tsc-packages-slice';\nimport {allPackages} from '../package-mgr/package-list-helper';\nimport {fork} from 'child_process';\nimport {plinkEnv} from '../utils/misc';\nconst log = log4js.getLogger('plink.tsc-packages');\n\nexport interface Tsconfig {\n  extends?: string;\n  compilerOptions: {[key in keyof CompilerOptions]: any};\n  include?: string[];\n  exclude?: string[];\n  files?: string[];\n  references?: {path: string}[];\n}\n\nexport interface TscCmdParam {\n  package?: string[];\n  project?: string[];\n  watch?: boolean;\n  sourceMap?: string;\n  jsx?: boolean;\n  ed?: boolean;\n  compileOptions?: {[key in keyof CompilerOptions]: any};\n}\n\n/**\n * All directories are relative to package real path\n */\nexport interface PackageJsonTscPropertyItem {\n  rootDir: string;\n  outDir: string;\n  files?: string[];\n  /** \"references\" in tsconfig https://www.typescriptlang.org/docs/handbook/project-references.html */\n  references?: string[];\n}\n\nexport type PackageJsonTscProperty = PackageJsonTscPropertyItem | PackageJsonTscPropertyItem[];\n\nexport function tsc(opts: TscCmdParam) {\n  if (opts.package) {\n    const pkgs = findPackagesByNames(getState(), opts.package);\n    const tsconfigFile$ = generateTsconfigFiles(\n      Array.from(pkgs).filter(pkg => pkg != null)\n        .map(pkg => pkg!.name), opts);\n    return tsconfigFile$.pipe(\n      reduce((all, tsconfigFile) => {\n        all.push(tsconfigFile);\n        return all;\n      }, [] as string[]),\n      filter(files => files.length > 0),\n      concatMap(files => {\n        const env = process.env;\n        delete env.NODE_OPTIONS;\n\n        const arg = ['-b', ...files, '-v'];\n        if (opts.watch)\n          arg.push('-w');\n\n        log.info('tsc ' + arg.join(' '));\n        const cp = fork(require.resolve('typescript/lib/tsc.js'), arg, {env});\n        return new Observable(sub => {\n          cp.on('exit', (code, signal) => {\n            log.info(code + ' ' + signal);\n            sub.next();\n            sub.complete();\n          });\n          cp.on('error', err => sub.error(err));\n        });\n      })\n    );\n  } else if (opts.project) {\n    allPackages('*', 'src', opts.project);\n  }\n  return EMPTY;\n}\n\nexport function generateTsconfigFiles(pkgs: Iterable<string>, opts: TscCmdParam) {\n  let wsKey: string | null | undefined = workspaceKey(plinkEnv.workDir);\n  const walked = new Set<string>();\n\n  for (const pkg of pkgs) {\n    walkReferencedPkg(pkg);\n  }\n\n  if (!getState().workspaces.has(wsKey))\n    wsKey = getState().currWorkspace;\n  if (wsKey == null) {\n    throw new Error('Current directory is not a work space');\n  }\n\n  const tsConfigsDir = config.resolve('destDir', 'tsconfigs');\n  fse.mkdirpSync(tsConfigsDir);\n  // const files = fs.readdirSync(tsConfigsDir);\n  // console.log(files);\n\n  const baseConfigFile = Path.resolve(__dirname, '..', '..', 'tsconfig-base.json');\n  const baseTsxConfigFile = Path.resolve(__dirname, '..', '..', 'tsconfig-tsx.json');\n\n  const done = Array.from(walked.values())\n    .map(pkg => {\n      const rawConfigs = getTscState().configs.get(pkg);\n      if (rawConfigs == null) {\n        throw new Error(`Package ${pkg} does not exist.`);\n      }\n      const tsconfigFiles = tsconfigFileNames(pkg)!;\n\n      const works = rawConfigs\n        .map((raw, idx) => {\n          return new Observable<string>(sub => {\n            const tsconfig = createTsconfigs(\n              getState().srcPackages.get(pkg)!, tsconfigFiles, idx, raw.rootDir, raw.outDir, raw.files, raw.references);\n            const toWrite = Path.resolve(tsConfigsDir, tsconfigFiles[idx]);\n            fs.writeFile(toWrite, JSON.stringify(tsconfig, null, '  '), (err) => {\n              if (err) {\n                return sub.error();\n              }\n              log.info(`Write ${toWrite}`);\n              sub.next(toWrite);\n              sub.complete();\n            });\n          });\n        });\n      return merge(...works);\n    });\n\n  function createTsconfigs(pkg: PackageInfo, fileNames: string[], idx: number, rootDir: string, outDir: string,\n    entries?: string[], references?: string[]) {\n    const rootDirValue = Path.relative(tsConfigsDir, Path.resolve(pkg.realPath, rootDir)).replace(/\\\\/g, '/');\n    const configJson: Tsconfig = {\n      extends: Path.relative(tsConfigsDir, opts.jsx ? baseTsxConfigFile : baseConfigFile).replace(/\\\\/g, '/'),\n      compilerOptions: {\n        rootDir: rootDirValue,\n        outDir: Path.relative(tsConfigsDir, Path.resolve(pkg.realPath, outDir)).replace(/\\\\/g, '/'),\n        composite: true, // required by Project Reference\n        declaration: true,\n        importHelpers: false,\n        skipLibCheck: true,\n        sourceMap: true,\n        inlineSources: true,\n        inlineSourceMap: false,\n        emitDeclarationOnly: opts.ed\n      },\n      exclude: []\n    };\n\n    if (entries && entries.length > 0) {\n      configJson.files = entries.map(entry =>\n        Path.relative(tsConfigsDir, Path.resolve(pkg.realPath, entry))\n          .replace(/\\\\/g, '/')\n      );\n    } else {\n      configJson.include = [rootDirValue + '/**/*.ts'];\n      if (opts.jsx) {\n        configJson.include.push(rootDirValue + '/**/*.tsx');\n      }\n    }\n\n    if (references) {\n      configJson.references = references.map(refValue => {\n        const refFile = tsconfigFileName4Ref(refValue);\n\n        if (refFile == null)\n          throw new Error(`Referenced package ${refValue} does not exist, referenced by ${pkg.name}`);\n\n        return {path: refFile};\n      });\n    }\n\n    setTsCompilerOptForNodePath(tsConfigsDir, './', configJson.compilerOptions, {\n      enableTypeRoots: true,\n      workspaceDir: Path.resolve(config().rootPath, wsKey!)\n    });\n\n    if (idx > 1) {\n      if (configJson.references == null) {\n        configJson.references = [];\n      }\n      configJson.references.push({path: fileNames[idx - 1]});\n    }\n    return configJson;\n  }\n\n  function walkReferencedPkg(pkg: string) {\n    walked.add(pkg);\n    const rawCfgs = getTscState().configs.get(pkg);\n    if (rawCfgs == null) {\n      log.warn(`Reference package \"${pkg}\" is not linked, skip it`);\n      return;\n    }\n    for (const raw of rawCfgs) {\n      if (raw.references && raw.references.length > 0) {\n        for (const ref of raw.references) {\n          if (!walked.has(ref)) {\n            walkReferencedPkg(ref);\n          }\n        }\n      }\n    }\n  }\n\n  return merge(...done);\n}\n\nfunction tsconfigFileNames(packageName: string): string[] | null {\n  const configs = getTscState().configs.get(packageName);\n  if (configs == null) {\n    return null;\n  }\n  const name = packageName.replace(/\\//g, '-');\n  return configs.map((_, index) => name + index + '.json');\n}\n\nfunction tsconfigFileName4Ref(packageName: string): string | null {\n  const configs = getTscState().configs.get(packageName);\n  if (configs == null) {\n    return null;\n  }\n  const name = packageName.replace(/\\//g, '-');\n  return name + (configs.length - 1) + '.json';\n}\n\n"]}