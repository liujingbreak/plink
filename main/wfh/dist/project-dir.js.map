{"version":3,"file":"project-dir.js","sourceRoot":"","sources":["../ts/project-dir.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @Deprecated\n */\nimport fs from 'fs';\nimport {removeSync} from 'fs-extra';\nimport * as Path from 'path';\nimport {getWorkDir} from './utils/misc';\n/**\n * Otherwise `npm install` will get an max stack overflow error\n * @param isDrcpDevMode \n */\nexport function removeProjectSymlink(isDrcpDevMode: boolean) {\n  let projects;\n  const projectListFile = Path.join(getWorkDir(), 'dr.project.list.json');\n  if (fs.existsSync(projectListFile))\n    projects = require(projectListFile);\n  if (projects && projects.length > 0) {\n    for (const prjdir of projects) {\n      const moduleDir = Path.resolve(prjdir, 'node_modules');\n      try {\n        const stats = fs.lstatSync(moduleDir);\n        if (stats.isSymbolicLink()) {\n          fs.unlinkSync(moduleDir);\n        }\n      } catch (e) {}\n    }\n  }\n  if (isDrcpDevMode) {\n    // Since drcp itself is symlink, in case there is no dr.project.list.json, we still need to make sure...\n    const moduleDir = Path.join(Path.dirname(fs.realpathSync(require.resolve('@wfh/plink/package.json'))),\n      'node_modules');\n    try {\n      const stats = fs.lstatSync(moduleDir);\n      if (stats.isSymbolicLink()) {\n        fs.unlinkSync(moduleDir);\n      }\n    } catch (e) {}\n  }\n}\n\n/* eslint-disable no-console */\nexport function createProjectSymlink() {\n  const isWin32 = require('os').platform().indexOf('win32') >= 0;\n  const nodePath = fs.realpathSync(Path.resolve(getWorkDir(), 'node_modules'));\n  const projectListFile = Path.join(getWorkDir(), 'dr.project.list.json');\n  if (!fs.existsSync(projectListFile))\n    return;\n  for (const prjdir of require(projectListFile) as string[]) {\n    const moduleDir = Path.resolve(prjdir, 'node_modules');\n    let needCreateSymlink = false;\n    let stats;\n\n    try {\n      stats = fs.lstatSync(moduleDir);\n      if (stats.isSymbolicLink() || stats.isDirectory() || stats.isFile()) {\n        if (!fs.existsSync(moduleDir) || fs.realpathSync(moduleDir) !== nodePath) {\n          if (stats.isSymbolicLink()) {\n            fs.unlinkSync(moduleDir);\n          } else {\n            if (fs.existsSync(moduleDir + '.bak')) {\n              const _removeSync: typeof removeSync = require('fs-extra').removeSync;\n              _removeSync(moduleDir + '.bak');\n            }\n            fs.renameSync(moduleDir, moduleDir + '.bak');\n            console.log(`Backup \"${moduleDir}\" to \"${moduleDir}.bak\"`);\n          }\n          needCreateSymlink = true;\n        }\n      } else\n        needCreateSymlink = true;\n    } catch (e) {\n      // node_modules does not exists, fs.lstatSync() throws error\n      needCreateSymlink = true;\n    }\n    if (needCreateSymlink) {\n      // console.log('Create symlink \"%s\"', Path.resolve(prjdir, 'node_modules'));\n      fs.symlinkSync(Path.relative(prjdir, fs.realpathSync(nodePath)), moduleDir, isWin32 ? 'junction' : 'dir');\n    }\n  }\n}\n"]}