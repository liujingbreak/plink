{"version":3,"file":"preinstall.js","sourceRoot":"","sources":["../src/preinstall.ts"],"names":[],"mappings":";AAAA;;GAEG;;;;;AAEH,4CAAoB;AACpB,gDAAwB;AAExB,IAAI,YAAE,CAAC,UAAU,CAAC,cAAc,CAAC,EAAE;IACjC,MAAM,KAAK,GAAG,YAAE,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC;IAC7C,KAAK,MAAM,KAAK,IAAI,KAAK,EAAE;QACzB,MAAM,MAAM,GAAG,cAAI,CAAC,OAAO,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;QACnD,IAAI;YACF,MAAM,IAAI,GAAG,YAAE,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YAClC,IAAI,IAAI,CAAC,WAAW,EAAE,IAAI,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;gBAC/C,MAAM,QAAQ,GAAG,MAAM,CAAC;gBACxB,MAAM,WAAW,GAAG,YAAE,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;gBAC7C,KAAK,MAAM,QAAQ,IAAI,WAAW,EAAE;oBAClC,MAAM,SAAS,GAAG,cAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;oBACnD,IAAI;wBACF,IAAI,YAAE,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,cAAc,EAAE,EAAE;4BAC5C,YAAE,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;4BACzB,sCAAsC;4BACtC,OAAO,CAAC,GAAG,CAAC,6BAA6B,EAAE,SAAS,CAAC,CAAC;yBACvD;qBACF;oBAAC,OAAO,GAAG,EAAE;wBACZ,sCAAsC;wBACtC,OAAO,CAAC,GAAG,CAAC,6BAA6B,EAAE,SAAS,CAAC,CAAC;wBACtD,YAAE,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;qBAC1B;iBACF;aACF;iBAAM,IAAI,IAAI,CAAC,cAAc,EAAE,EAAE;gBAChC,sCAAsC;gBACtC,OAAO,CAAC,GAAG,CAAC,6BAA6B,EAAE,MAAM,CAAC,CAAC;gBACnD,YAAE,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;aACvB;SACF;QAAC,OAAO,EAAE,EAAE;YACX,sCAAsC;YACtC,OAAO,CAAC,GAAG,CAAC,6BAA6B,EAAE,MAAM,CAAC,CAAC;YACnD,YAAE,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;SACvB;KACF;CACF","sourcesContent":["/**\n * This file is intented to run before \"npm install\" in workspace, should not dependens on any 3rd-party node packages\n */\n\nimport fs from 'fs';\nimport Path from 'path';\n\nif (fs.existsSync('node_modules')) {\n  const files = fs.readdirSync('node_modules');\n  for (const fname of files) {\n    const target = Path.resolve('node_modules', fname);\n    try {\n      const stat = fs.lstatSync(target);\n      if (stat.isDirectory() && fname.startsWith('@')) {\n        const scopeDir = target;\n        const scopedNames = fs.readdirSync(scopeDir);\n        for (const partName of scopedNames) {\n          const scopedPkg = Path.resolve(scopeDir, partName);\n          try {\n            if (fs.lstatSync(scopedPkg).isSymbolicLink()) {\n              fs.unlinkSync(scopedPkg);\n              // eslint-disable-next-line no-console\n              console.log('[preinstall] delete symlink', scopedPkg);\n            }\n          } catch (err) {\n            // eslint-disable-next-line no-console\n            console.log('[preinstall] delete symlink', scopedPkg);\n            fs.unlinkSync(scopedPkg);\n          }\n        }\n      } else if (stat.isSymbolicLink()) {\n        // eslint-disable-next-line no-console\n        console.log('[preinstall] delete symlink', target);\n        fs.unlinkSync(target);\n      }\n    } catch (ex) {\n      // eslint-disable-next-line no-console\n      console.log('[preinstall] delete symlink', target);\n      fs.unlinkSync(target);\n    }\n  }\n}\n"]}