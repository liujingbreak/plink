{"version":3,"file":"async-LLn-parserSpec.js","sourceRoot":"","sources":["../../src/spec/async-LLn-parserSpec.ts"],"names":[],"mappings":";;;;;AAAA,+BAA+B;AAC/B,6BAA6B;AAC7B,4EAA4E;AAC5E,4CAAoB;AACpB,gDAAwB;AACxB,2CAA8D;AAC9D,uEAA6C;AAC7C,iFAAsD;AAEtD,6CAA6C;AAC7C,cAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;AAExB,IAAA,kBAAQ,EAAC,aAAa,EAAE,GAAG,EAAE;IAC3B,IAAA,aAAG,EAAC,mBAAmB,EAAE,KAAK,IAAI,EAAE;QAClC,MAAM,GAAG,GAAG,YAAE,CAAC,YAAY,CAAC,cAAI,CAAC,OAAO,CAAC,SAAS,EAAE,yBAAyB,CAAC,EAAE,EAAC,QAAQ,EAAE,MAAM,EAAC,CAAC,CAAC;QACpG,MAAM,MAAM,GAAG,YAAE,CAAC,gBAAgB,CAAC,cAAI,CAAC,OAAO,CAAC,SAAS,EAAE,yBAAyB,CAAC,EAAE,EAAC,QAAQ,EAAE,MAAM,EAAC,CAAC,CAAC;QAC3G,MAAM,GAAG,GAAG,MAAM,IAAA,qBAAS,EAAC,MAAM,EAAE,KAAK,CAAC,EAAE;YAC1C,sCAAsC;YACtC,IAAA,gBAAM,EAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;QACH,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;IACvD,CAAC,CAAC,CAAC;IAEH,IAAA,YAAE,EAAC,kBAAkB,EAAE,GAAG,EAAE;QAC1B,MAAM,GAAG,GAAG,YAAE,CAAC,YAAY,CAAC,cAAI,CAAC,OAAO,CAAC,SAAS,EAAE,yBAAyB,CAAC,EAAE,EAAC,QAAQ,EAAE,MAAM,EAAC,CAAC,CAAC;QACpG,MAAM,GAAG,GAAG,IAAA,0BAAa,EAAC,GAAG,CAAC,CAAC;QAC/B,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;IACvD,CAAC,CAAC,CAAC;AAEL,CAAC,CAAC,CAAC","sourcesContent":["/* eslint-disable no-console */\n// eslint-disable  no-console\n// import {LLStateMachine, StateHandler, Chunk} from '../LLn-state-machine';\nimport fs from 'fs';\nimport Path from 'path';\nimport {jest, xit, describe, it, expect} from '@jest/globals';\nimport parseJson from '../utils/json-parser';\nimport parseJsonSync from '../utils/json-sync-parser';\n\n// jasmine.DEFAULT_TIMEOUT_INTERVAL = 300000;\njest.setTimeout(300000);\n\ndescribe('JSON parser', () => {\n  xit('async json-parser', async () => {\n    const str = fs.readFileSync(Path.resolve(__dirname, '../../ts/spec/test.json'), {encoding: 'utf8'});\n    const reader = fs.createReadStream(Path.resolve(__dirname, '../../ts/spec/test.json'), {encoding: 'utf8'});\n    const ast = await parseJson(reader, token => {\n      // console.log('token: ', token.text);\n      expect(str.slice(token.pos, token.end)).toBe(token.text);\n    });\n    console.log('AST:', JSON.stringify(ast, null, '  '));\n  });\n\n  it('sync json-parser', () => {\n    const str = fs.readFileSync(Path.resolve(__dirname, '../../ts/spec/test.json'), {encoding: 'utf8'});\n    const ast = parseJsonSync(str);\n    console.log('AST:', JSON.stringify(ast, null, '  '));\n  });\n\n});\n\n"]}