{"version":3,"file":"_app-server.js","sourceRoot":"","sources":["../ts/_app-server.ts"],"names":[],"mappings":";;;;;AAAA,0DAAkC;AAElC,8DAAqC;AAIrC,MAAM,EAAC,OAAO,EAAC,GAAG,OAAO,CAAC,oBAAoB,CAAsB,CAAC;AAErE,qEAAqE;AACrE,OAAO,CAAC,KAAK,GAAG,gBAAgB,CAAC;AAEjC,MAAM,OAAO,GAAG,IAAI,mBAAS,CAAC,OAAO,EAAE;KACpC,SAAS,CAAC,WAAW,CAAC;KACtB,MAAM,CAAC,GAAG,EAAE;IACX,sCAAsC;IACtC,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,OAAO,CAAC,CAAC;IACzC,MAAM,EAAC,UAAU,EAAE,SAAS,EAAC,GAAG,OAAO,CAAC,2BAA2B,CAAyB,CAAC;IAC7F,MAAM,OAAO,GAAG,UAAU,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC;IAC3C,IAAA,oBAAS,EAAC,OAAO,EAAE,CAAC,CAAC;IACrB,MAAM,EAAC,SAAS,EAAC,GAAG,OAAO,CAAC,kBAAkB,CAAmB,CAAC;IAClE,MAAM,QAAQ,GAAG,SAAS,EAAE,CAAC,QAAQ,CAAC;IAEtC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AAC3B,CAAC,CAAC,CAAC;AAEL,MAAM,EAAC,iBAAiB,EAAC,GAAG,OAAO,CAAC,0BAA0B,CAAuB,CAAC;AACtF,iBAAiB,CAAC,OAAO,CAAC,CAAC;AAE3B,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC;KAC7B,KAAK,CAAC,CAAC,CAAQ,EAAE,EAAE;IAClB,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;IAC1B,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC","sourcesContent":["import commander from 'commander';\nimport * as overrideCmd from './cmd/override-commander';\nimport logConfig from './log-config';\nimport * as _runner from './package-runner';\nimport * as bootstrapProc from './utils/bootstrap-process';\n\nconst {version} = require('../../package.json') as {version: string};\n\n/** Emitted function will be executed during server shutdown phase */\nprocess.title = 'Plink - server';\n\nconst program = new commander.Command()\n  .arguments('[args...]')\n  .action(() => {\n    // eslint-disable-next-line no-console\n    console.log('\\nPlink version:', version);\n    const {initConfig, exitHooks} = require('./utils/bootstrap-process') as typeof bootstrapProc;\n    const setting = initConfig(program.opts());\n    logConfig(setting());\n    const {runServer} = require('./package-runner') as typeof _runner;\n    const shutdown = runServer().shutdown;\n\n    exitHooks.push(shutdown);\n  });\n\nconst {withGlobalOptions} = require('./cmd/override-commander') as typeof overrideCmd;\nwithGlobalOptions(program);\n\nprogram.parseAsync(process.argv)\n  .catch((e: Error) => {\n    console.error(e, e.stack);\n    process.exit(1);\n  });\n\n\n"]}