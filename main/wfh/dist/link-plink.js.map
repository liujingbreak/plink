{"version":3,"file":"link-plink.js","sourceRoot":"","sources":["../ts/link-plink.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;GAEG;AACH,uCAAyB;AACzB,gDAAkC;AAClC,gDAAwB;AACxB,4CAAoB;AACP,QAAA,OAAO,GAAG,YAAE,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AAE1D;;;GAGG;AACJ,SAAgB,QAAQ;IACtB,MAAM,SAAS,GAAG,cAAI,CAAC,OAAO,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC,CAAC,mBAAmB;IAEtE,iEAAiE;IAClE,MAAM,MAAM,GAAG,WAAW,CAAC,yBAAyB,CAAC,CAAC;IACtD,IAAI,MAAM,KAAK,SAAS,EAAE;QACxB,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,cAAc,CAAC;YAChC,EAAE,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;QAC/B,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,mBAAmB,CAAC;YACrC,EAAE,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC;QAEpC,IAAI,MAAM,IAAI,IAAI,EAAE;YAClB,KAAK,CAAC,UAAU,CAAC,cAAI,CAAC,OAAO,CAAC,yBAAyB,CAAC,CAAC,CAAC;YAC1D,0DAA0D;SAC3D;QACD,EAAE,CAAC,WAAW,CAAC,cAAI,CAAC,QAAQ,CAAC,cAAI,CAAC,OAAO,CAAC,cAAc,EAAE,MAAM,CAAC,EAAE,SAAS,CAAC,EAC1E,cAAI,CAAC,OAAO,CAAC,cAAc,EAAE,MAAM,EAAE,OAAO,CAAC,EAAE,eAAO,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;KACjF;IACD,sCAAsC;IACtC,OAAO,CAAC,GAAG,CAAC,cAAI,CAAC,OAAO,CAAC,cAAc,EAAE,YAAY,CAAC,GAAG,aAAa,CAAC,CAAC;IAEvE,kFAAkF;IAClF,mEAAmE;IACnE,qCAAqC;IACrC,0EAA0E;IAC1E,mCAAmC;IACnC,8FAA8F;IAC9F,mDAAmD;IACnD,wCAAwC;IACxC,iDAAiD;IACjD,MAAM;IACN,WAAW;IACX,4FAA4F;IAC5F,mDAAmD;IACnD,wCAAwC;IACxC,+CAA+C;IAC/C,IAAI;AACP,CAAC;AArCD,4BAqCC;AAED,SAAS,WAAW,CAAC,IAAY;IAC/B,IAAI;QACF,IAAI,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,cAAc,EAAE,EAAE;YACvC,OAAO,cAAI,CAAC,OAAO,CAAC,cAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;SAChE;aAAM;YACL,OAAO,cAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;SAC3B;KACF;IAAC,OAAO,CAAC,EAAE;QACV,OAAO,IAAI,CAAC;KACb;AACH,CAAC","sourcesContent":["/**\n * To develop Plink, we need to symlink Plink repo to a workspace directory\n */\nimport * as fs from 'fs';\nimport * as fsExt from 'fs-extra';\nimport Path from 'path';\nimport os from 'os';\nexport const isWin32 = os.platform().indexOf('win32') >= 0;\n\n /**\n  * 1. create symlink node_modules/@wfh/plink --> directory \"main\"\n  * 2. create symlink parent directory of \"main\">/node_modules --> node_modules\n  */\nexport function linkDrcp() {\n  const sourceDir = Path.resolve(__dirname, '../..'); // directory \"main\"\n\n   // 1. create symlink node_modules/@wfh/plink --> directory \"main\"\n  const target = getRealPath('node_modules/@wfh/plink');\n  if (target !== sourceDir) {\n    if (!fs.existsSync('node_modules'))\n      fs.mkdirSync('node_modules');\n    if (!fs.existsSync('node_modules/@wfh'))\n      fs.mkdirSync('node_modules/@wfh');\n\n    if (target != null) {\n      fsExt.removeSync(Path.resolve('node_modules/@wfh/plink'));\n      // fs.unlinkSync(Path.resolve('node_modules/@wfh/plink'));\n    }\n    fs.symlinkSync(Path.relative(Path.resolve('node_modules', '@wfh'), sourceDir),\n       Path.resolve('node_modules', '@wfh', 'plink'), isWin32 ? 'junction' : 'dir');\n  }\n  // eslint-disable-next-line no-console\n  console.log(Path.resolve('node_modules', '@wfh/plink') + ' is created');\n\n   // // 2. create symlink <parent directory of \"main\">/node_modules --> node_modules\n   // const topModuleDir = Path.resolve(sourceDir, '../node_modules');\n   // if (fs.existsSync(topModuleDir)) {\n   //   if (fs.realpathSync(topModuleDir) !== Path.resolve('node_modules')) {\n   //     fs.unlinkSync(topModuleDir);\n   //     fs.symlinkSync(Path.relative(Path.dirname(topModuleDir), Path.resolve('node_modules')),\n   //     topModuleDir, isWin32 ? 'junction' : 'dir');\n   // eslint-disable-next-line , no-console\n   //     console.log(topModuleDir + ' is created');\n   //   }\n   // } else {\n   //   fs.symlinkSync(Path.relative(Path.dirname(topModuleDir), Path.resolve('node_modules')),\n   //     topModuleDir, isWin32 ? 'junction' : 'dir');\n   // eslint-disable-next-line , no-console\n   //   console.log(topModuleDir + ' is created');\n   // }\n}\n\nfunction getRealPath(file: string): string | null {\n  try {\n    if (fs.lstatSync(file).isSymbolicLink()) {\n      return Path.resolve(Path.dirname(file), fs.readlinkSync(file));\n    } else {\n      return Path.resolve(file);\n    }\n  } catch (e) {\n    return null;\n  }\n}\n"]}