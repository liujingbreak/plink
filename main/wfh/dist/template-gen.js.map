{"version":3,"file":"template-gen.js","sourceRoot":"","sources":["../ts/template-gen.ts"],"names":[],"mappings":"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","sourcesContent":["import Path from 'path';\nimport {promises, existsSync} from 'fs';\nimport fse from 'fs-extra';\nimport {from, Observable, of} from 'rxjs';\nimport {mergeMap} from 'rxjs/operators';\nimport chalk from 'chalk';\nimport _ from 'lodash';\nimport {getLogger} from 'log4js';\nconst log = getLogger('plink.template-gen');\nexport interface TemplReplacement {\n  fileMapping?: [RegExp, string][];\n  /** lodah template */\n  textMapping?: {[key: string]: any};\n  /** Suffix name of target file, default: /(?:[tj]sx?|s?css|json|yaml|yml|html|svg)$/ */\n  includeTextType?: RegExp;\n}\n\nexport interface GenerateOption {\n  dryrun?: boolean;\n  /** By default, after copying all template files to target directory, file name suffix will be trimed,\n   *  e.g.\n   * \n   *  If the template file is named \"foobar.ts.txt\", then it will become \"foobar.ts\" in target directory.\n   * \n   */\n  keepFileSuffix?: boolean;\n  /** overwrite existing file */\n  // overwrite?: boolean;\n}\n\nconst lodashTemplateSetting: NonNullable<Parameters<typeof _.template>[1]> = {\n  interpolate: /\\$__([\\s\\S]+?)__\\$/g,\n  evaluate: /\\/\\*<%([\\s\\S]+?)%>\\*\\//g,\n  escape: /<%-([\\s\\S]+?)%>/g\n  // evaluate: /<%([\\s\\S]+?)%>/g,\n  // interpolate: /<%=([\\s\\S]+?)%>/g,\n  // variable: '',\n  // imports: {_: lodash}\n};\n/**\n * The template file name and directory name is replaced by regular expression,\n * file name suffix is removed, therefor you should use a double suffix as a template\n * file name (like 'hellow.ts.txt' will become 'hellow.ts').\n * \n * lodash template setting:\n * - interpolate: /\\$__([\\s\\S]+?)__\\$/g,\n * - evaluate: /\\/\\*<%([\\s\\S]+?)%>\\*\\//g,\n * \n * The template file content is replace by lodash template function\n * @param templDir \n * @param targetDir \n * @param replacement \n * @param opt \n */\nexport default function generateStructure(\n  templDir: string, targetDir: string, replacement: TemplReplacement, opt: GenerateOption = {dryrun: false}) {\n  if (replacement.includeTextType == null) {\n    replacement.includeTextType = /(?:[tj]sx?|s?css|json|yaml|yml|html|svg)$/;\n  }\n  if (!opt.dryrun)\n    fse.mkdirpSync(targetDir);\n  return _recurseDir(templDir, targetDir, replacement, opt).toPromise();\n}\n\nfunction _recurseDir(templDir: string, targetDir: string, replacement: TemplReplacement,\n  opt: GenerateOption = {dryrun: false}, targetIsEmpty = false): Observable<any> {\n  const dryrun = !!opt.dryrun;\n  return from(promises.readdir(templDir)).pipe(\n    mergeMap(files => from(files)),\n    mergeMap(sub => {\n      const absSub = Path.resolve(templDir, sub);\n      return from(promises.stat(absSub)).pipe(\n        mergeMap(state => {\n          if (state.isDirectory()) {\n            let newDir = sub;\n            for (const [reg, repl] of replacement.fileMapping || []) {\n              newDir = newDir.replace(reg, repl);\n            }\n            newDir = Path.resolve(targetDir, newDir);\n            // console.log(newDir, absSub);\n            const done$ = dryrun ? of(undefined) :\n              from(fse.mkdirp(Path.resolve(targetDir, newDir)));\n            return done$.pipe(\n              mergeMap(() => _recurseDir(absSub, newDir, replacement, opt, true))\n            );\n          } else {\n            let newFile = sub;\n            for (const [reg, repl] of replacement.fileMapping || []) {\n              newFile = newFile.replace(reg, repl);\n            }\n            newFile = Path.resolve(targetDir,\n              opt.keepFileSuffix ? newFile : newFile.replace(/\\.([^./\\\\]+)$/, '')\n            );\n\n            return (async () => {\n              if (targetIsEmpty || !existsSync(newFile)) {\n                if (!dryrun) {\n                  if (!replacement.includeTextType!.test(newFile)) {\n                    await promises.copyFile(absSub, newFile);\n                    // eslint-disable-next-line no-console\n                    log.info(`${chalk.cyan(Path.relative(Path.resolve(), newFile))} is copied`);\n                  } else {\n                    let content = await promises.readFile(absSub, 'utf-8');\n                    try {\n                      content = _.template(content, lodashTemplateSetting)(replacement.textMapping);\n                    } catch (e) {\n                      console.error(`In file ${absSub}`);\n                      console.error(e);\n                    }\n                    await promises.writeFile(newFile, content);\n                    // eslint-disable-next-line no-console\n                    log.info(`${chalk.cyan(Path.relative(Path.resolve(), newFile))} is written`);\n                  }\n                } else {\n                  // eslint-disable-next-line no-console\n                  log.info(`${chalk.cyan(Path.relative(Path.resolve(), newFile))} is created`);\n                }\n              } else {\n                // eslint-disable-next-line no-console\n                log.info('target file already exists:', Path.relative(Path.resolve(), newFile));\n              }\n            })();\n          }\n        })\n      );\n    })\n  );\n}\n"]}