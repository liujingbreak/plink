{"version":3,"file":"node-path.js","sourceRoot":"","sources":["../ts/node-path.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Path from 'path';\nimport * as fs from 'fs';\nimport {isMainThread, threadId} from 'worker_threads';\nimport chalk from 'chalk';\nimport log4js from 'log4js';\nimport _ from 'lodash';\nimport {hookCommonJsRequire} from './loaderHooks';\nimport {calcNodePaths} from './node-path-calc';\n\nlet logPrefix = '';\nif (process.send || !isMainThread)\n  logPrefix += `[P${process.pid}.T${threadId}]`;\n\nlet envSetDone = false;\n\nif (!envSetDone) {\n  envSetDone = true;\n  require('source-map-support/register');\n  hookCommonJsRequire((file, target, req, resolve) => {\n    if (target === 'log4js') {\n      return log4js;\n    }\n  });\n  /** environment varaible __plink is used for share basic Plink information between:\n   * - Node.js \"-r\" preload module and normal modules, especially setting NODE_PATH in \"-r\" module\n   * - Main process and forked process or thread worker\n   */\n  const exitingEnvVar = process.env.__plink ? JSON.parse(process.env.__plink) as PlinkEnv : null;\n\n  if (!process.env.PLINK_DATA_DIR) {\n    process.env.PLINK_DATA_DIR = 'dist';\n    if (isMainThread || process.send == null) {\n      // eslint-disable-next-line no-console\n      console.log(chalk.gray(logPrefix + 'By default, Plink reads and writes state files in directory \"<root-dir>/dist\",\\n' +\n      'you may change it by' +\n      ' setting environment variable PLINK_DATA_DIR to another relative directory'));\n    }\n  } else {\n    // eslint-disable-next-line no-console\n    console.log(chalk.gray(logPrefix + 'PLINK_DATA_DIR: ' + process.env.PLINK_DATA_DIR));\n  }\n  const PLINK_WORK_DIR = process.env.PLINK_WORK_DIR;\n  if (PLINK_WORK_DIR) {\n    // eslint-disable-next-line no-console\n    console.log(chalk.gray(logPrefix + `Environment variable PLINK_WORK_DIR is set: ${PLINK_WORK_DIR}`));\n  }\n  const workDir = PLINK_WORK_DIR ? Path.resolve(PLINK_WORK_DIR) : process.cwd();\n  const rootDir = exitingEnvVar ? exitingEnvVar.rootDir : findRootDir(process.env.PLINK_DATA_DIR, workDir);\n  checkUpLevelNodeModules(rootDir);\n  // We can change this path to another directory like '.links',\n  // if we don't want node_modules to be polluted by symlinks;\n  const symlinkDirName = exitingEnvVar && exitingEnvVar.symlinkDirName ?\n    exitingEnvVar.symlinkDirName : 'node_modules';\n\n\n  let plinkDir = Path.resolve(rootDir, 'node_modules/@wfh/plink');\n  const isDrcpSymlink = exitingEnvVar ? exitingEnvVar.isDrcpSymlink : fs.lstatSync(plinkDir).isSymbolicLink();\n  if (isDrcpSymlink)\n    plinkDir = fs.realpathSync(plinkDir);\n\n  // TODO: remove nodePath, it no longer useful\n  const nodePath = setupNodePath(workDir, rootDir,\n    fs.existsSync(Path.resolve(symlinkDirName)) ? Path.resolve(symlinkDirName) : null,\n    plinkDir);\n  const distDir = Path.resolve(rootDir, process.env.PLINK_DATA_DIR);\n  process.env.__plink = JSON.stringify({\n    workDir, distDir, isDrcpSymlink, rootDir, symlinkDirName, nodePath, plinkDir} as PlinkEnv);\n\n  // delete register from command line option, to avoid child process get this option, since we have NODE_PATH set\n  // for child process\n  const deleteExecArgIdx: number[] = [];\n  for (let i = 0, l = process.execArgv.length; i < l; i++) {\n    if (i < l - 1 && /^(?:-r|--require)$/.test(process.execArgv[i]) &&\n      /^@wfh\\/plink\\/register$/.test(process.execArgv[i + 1])) {\n      deleteExecArgIdx.push(i);\n    }\n  }\n  deleteExecArgIdx.reduce((offset, deleteIdx) => {\n    process.execArgv.splice(deleteIdx + offset, 2);\n    return offset + 2;\n  }, 0);\n\n  const envOptions = process.env.NODE_OPTIONS ? process.env.NODE_OPTIONS.split(Path.delimiter) : [];\n  process.env.NODE_OPTIONS =\n    envOptions.filter(item => !/(-r|--require)\\s+@wfh\\/plink\\/register/.test(item)).join(Path.delimiter);\n}\n\nfunction findRootDir(distDir: string, currDir: string) {\n  let dir = Path.resolve(currDir);\n  const {root} = Path.parse(dir);\n  while (!fs.existsSync(Path.resolve(dir, distDir, 'plink-state.json'))) {\n    const parentDir = Path.dirname(dir);\n    if (parentDir === root) {\n      dir = currDir;\n      break;\n    }\n    dir = parentDir;\n  }\n  return dir;\n}\n\n/**\n * if cwd is not root directory, then append NODE_PATH with <cwd>/node_modules:<rootDir>/symlinks,\n * otherwise append NODE_PATH with <rootDir>/node_modules\n * @param rootDir \n * @param isDrcpSymlink \n */\nfunction setupNodePath(currDir: string, rootDir: string, symlinksDir: string | null, plinkDir: string) {\n  const pathArray = calcNodePaths(rootDir, symlinksDir, currDir, plinkDir);\n  // process.env.NODE_PATH = pathArray.join(Path.delimiter);\n  // process.env.NODE_PRESERVE_SYMLINKS = '1';\n  // require('module').Module._initPaths();\n  return pathArray;\n}\n\n/**\n * Get environment variables predefined by\n```\nimport {plinkEnv} from './utils/misc';\n```\n */\nexport interface PlinkEnv {\n  distDir: string;\n  /** whether Plink is a symlink, Drcp is old name of Plink */\n  isDrcpSymlink: boolean;\n  rootDir: string;\n  /** current worktree space directory */\n  workDir: string;\n  symlinkDirName: string | 'node_modules';\n  nodePath: string[];\n  plinkDir: string;\n}\n\n/**\n * Webpack and TS compiler by default will look up node_modules from up level directries,\n * this breaks Plink's way of adding extra node path for Node.js, TS or Webpack, it leads\n * to problematic module loading issue.\n */\nfunction checkUpLevelNodeModules(rootDir: string) {\n  // Go with preserve\n  // const dirs = [] as string[];\n\n  // let currDir = rootDir;\n  // const {root} = Path.parse(rootDir);\n  // do {\n  //   currDir = Path.dirname(currDir);\n  //   dirs.push(Path.resolve(currDir, 'node_modules'));\n  // } while (currDir !== root);\n\n  // const nodeModule = dirs.find(dir => fs.existsSync(dir));\n  // if (nodeModule) {\n  //   // eslint-disable-next-line no-console\n  //   console.log(`Please install in another directory, or remove ${chalk.red(nodeModule)}.\\n` +\n  //     chalk.yellow('It could be problematic for Plink to manage monorepo dependency (through environmet variable \"NODE_PATH\" in runtime).\\n' +\n  //     '(Alternatively, you may consider install whatever \"global\" dependency with `npm i -g` instead of having directory like ' +\n  //     chalk.red(nodeModule) + ')' ) );\n\n  //   throw new Error(chalk.red('Found \"node_modules\" in upper level directories, ' +\n  //     'Installation is cancelled, sorry for inconvienience.'));\n  // }\n}\n\n\n\n"]}