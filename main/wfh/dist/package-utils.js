"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findPackageByType = exports.findPackageJsonPath = exports.findAllPackages = exports.lookForPackages = exports.createLazyPackageFileFinder = exports.packages4Workspace = exports.packages4WorkspaceKey = exports.allPackages = void 0;
const lru_cache_1 = __importDefault(require("lru-cache"));
const lazy_package_factory_1 = __importDefault(require("./package-mgr/lazy-package-factory"));
const package_mgr_1 = require("./package-mgr");
// import * as Path from 'path';
const lodash_1 = __importDefault(require("lodash"));
// import log4js from 'log4js';
// import * as fs from 'fs';
const utils_1 = require("./cmd/utils");
Object.defineProperty(exports, "findPackageJsonPath", { enumerable: true, get: function () { return utils_1.lookupPackageJson; } });
const misc_1 = require("./utils/misc");
const path_1 = __importDefault(require("path"));
const package_list_helper_1 = require("./package-mgr/package-list-helper");
Object.defineProperty(exports, "allPackages", { enumerable: true, get: function () { return package_list_helper_1.allPackages; } });
Object.defineProperty(exports, "packages4WorkspaceKey", { enumerable: true, get: function () { return package_list_helper_1.packages4WorkspaceKey; } });
Object.defineProperty(exports, "packages4Workspace", { enumerable: true, get: function () { return package_list_helper_1.packages4Workspace; } });
// const log = log4js.getLogger('plink.package-utils');
const lazyPackageFactory = new lazy_package_factory_1.default((0, package_list_helper_1.allPackages)());
function createLazyPackageFileFinder() {
    const cache = new lru_cache_1.default({ max: 20, maxAge: 20000 });
    return function (file) {
        let found = cache.get(file);
        if (!found) {
            found = lazyPackageFactory.getPackageByPath(file);
            if (found)
                cache.set(file, found);
        }
        return found;
    };
}
exports.createLazyPackageFileFinder = createLazyPackageFileFinder;
function lookForPackages(packageList, cb) {
    for (const pkg of (0, utils_1.findPackagesByNames)((0, package_mgr_1.getState)(), Array.isArray(packageList) ? packageList : [packageList])) {
        if (pkg == null)
            continue;
        cb(pkg.name, path_1.default.join(misc_1.plinkEnv.workDir, pkg.path), { name: pkg.shortName, scope: pkg.scope }, pkg.json, pkg.realPath, pkg.isInstalled);
    }
}
exports.lookForPackages = lookForPackages;
function findAllPackages(packageList, callback, recipeType, projectDir) {
    // oldPu.findAllPackages.apply(oldPu, arguments);
    if (lodash_1.default.isFunction(callback) && packageList) {
        lookForPackages([].concat(packageList), callback);
        return;
    }
    else if (lodash_1.default.isFunction(packageList)) {
        // arguments.length <= 2
        projectDir = recipeType;
        recipeType = callback;
        callback = packageList;
    }
    return findPackageByType('*', callback, recipeType, projectDir);
}
exports.findAllPackages = findAllPackages;
function findPackageByType(_types, callback, recipeType, projectDir) {
    const arr = Array.isArray(projectDir) ? projectDir : projectDir == null ? projectDir : [projectDir];
    for (const pkg of (0, package_list_helper_1.allPackages)(_types, recipeType, arr)) {
        callback(pkg.name, path_1.default.join(misc_1.plinkEnv.workDir, pkg.path), { scope: pkg.scope, name: pkg.shortName }, pkg.json, pkg.realPath, pkg.isInstalled);
    }
}
exports.findPackageByType = findPackageByType;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFja2FnZS11dGlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3RzL3BhY2thZ2UtdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsMERBQTRCO0FBRTVCLDhGQUFvRTtBQUNwRSwrQ0FBdUM7QUFDdkMsZ0NBQWdDO0FBQ2hDLG9EQUF1QjtBQUN2QiwrQkFBK0I7QUFDL0IsNEJBQTRCO0FBQzVCLHVDQUFtRTtBQXVFdEMsb0dBdkVyQix5QkFBaUIsT0F1RXVCO0FBdEVoRCx1Q0FBc0M7QUFDdEMsZ0RBQXdCO0FBQ3hCLDJFQUFzSDtBQUNqRyw0RkFEQSxpQ0FBVyxPQUNBO0FBQUUsc0dBREEsMkNBQXFCLE9BQ0E7QUFBRSxtR0FEQSx3Q0FBa0IsT0FDQTtBQUUzRSx1REFBdUQ7QUFFdkQsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLDhCQUFrQixDQUFDLElBQUEsaUNBQVcsR0FBRSxDQUFDLENBQUM7QUFFakUsU0FBZ0IsMkJBQTJCO0lBQ3pDLE1BQU0sS0FBSyxHQUFHLElBQUksbUJBQUcsQ0FBMEIsRUFBQyxHQUFHLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUMsQ0FBQyxDQUFDO0lBRXpFLE9BQU8sVUFBUyxJQUFZO1FBQzFCLElBQUksS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDNUIsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNWLEtBQUssR0FBRyxrQkFBa0IsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUUsQ0FBQztZQUNuRCxJQUFJLEtBQUs7Z0JBQ1AsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDMUI7UUFDRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUMsQ0FBQztBQUNKLENBQUM7QUFaRCxrRUFZQztBQVVELFNBQWdCLGVBQWUsQ0FBQyxXQUE4QixFQUFFLEVBQWlCO0lBQy9FLEtBQUssTUFBTSxHQUFHLElBQUksSUFBQSwyQkFBbUIsRUFBQyxJQUFBLHNCQUFRLEdBQUUsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBRTtRQUMzRyxJQUFJLEdBQUcsSUFBSSxJQUFJO1lBQ2IsU0FBUztRQUNYLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLGNBQUksQ0FBQyxJQUFJLENBQUMsZUFBUSxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLFNBQVMsRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDLEtBQUssRUFBQyxFQUN6RixHQUFHLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0tBQzVDO0FBQ0gsQ0FBQztBQVBELDBDQU9DO0FBV0QsU0FBZ0IsZUFBZSxDQUFDLFdBQThDLEVBQzVFLFFBQThDLEVBQzlDLFVBQThCLEVBQzlCLFVBQThCO0lBQzlCLGlEQUFpRDtJQUVqRCxJQUFJLGdCQUFDLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxJQUFJLFdBQVcsRUFBRTtRQUN6QyxlQUFlLENBQUUsRUFBZSxDQUFDLE1BQU0sQ0FBQyxXQUFrQyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDdkYsT0FBTztLQUNSO1NBQU0sSUFBSSxnQkFBQyxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsRUFBRTtRQUNwQyx3QkFBd0I7UUFDeEIsVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUN4QixVQUFVLEdBQUcsUUFBK0IsQ0FBQztRQUM3QyxRQUFRLEdBQUcsV0FBVyxDQUFDO0tBQ3hCO0lBQ0QsT0FBTyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsUUFBeUIsRUFBRSxVQUFpQyxFQUN4RixVQUFVLENBQUMsQ0FBQztBQUNoQixDQUFDO0FBakJELDBDQWlCQztBQU1ELFNBQWdCLGlCQUFpQixDQUFDLE1BQW1DLEVBQ25FLFFBQXVCLEVBQUUsVUFBZ0MsRUFBRSxVQUE4QjtJQUV6RixNQUFNLEdBQUcsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNwRyxLQUFLLE1BQU0sR0FBRyxJQUFJLElBQUEsaUNBQVcsRUFBQyxNQUFNLEVBQUUsVUFBVSxFQUFFLEdBQUcsQ0FBQyxFQUFFO1FBQ3RELFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLGNBQUksQ0FBQyxJQUFJLENBQUMsZUFBUSxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQ3RELEVBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxTQUFTLEVBQUMsRUFBRSxHQUFHLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0tBQ3JGO0FBQ0gsQ0FBQztBQVJELDhDQVFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IExSVSBmcm9tICdscnUtY2FjaGUnO1xuaW1wb3J0IFBhY2thZ2VJbnN0YW5jZSBmcm9tICcuL3BhY2thZ2VOb2RlSW5zdGFuY2UnO1xuaW1wb3J0IExhenlQYWNrYWdlRmFjdG9yeSBmcm9tICcuL3BhY2thZ2UtbWdyL2xhenktcGFja2FnZS1mYWN0b3J5JztcbmltcG9ydCB7Z2V0U3RhdGV9IGZyb20gJy4vcGFja2FnZS1tZ3InO1xuLy8gaW1wb3J0ICogYXMgUGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG4vLyBpbXBvcnQgbG9nNGpzIGZyb20gJ2xvZzRqcyc7XG4vLyBpbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XG5pbXBvcnQge2xvb2t1cFBhY2thZ2VKc29uLCBmaW5kUGFja2FnZXNCeU5hbWVzfSBmcm9tICcuL2NtZC91dGlscyc7XG5pbXBvcnQge3BsaW5rRW52fSBmcm9tICcuL3V0aWxzL21pc2MnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQge1BhY2thZ2VUeXBlLCBhbGxQYWNrYWdlcywgcGFja2FnZXM0V29ya3NwYWNlS2V5LCBwYWNrYWdlczRXb3Jrc3BhY2V9IGZyb20gJy4vcGFja2FnZS1tZ3IvcGFja2FnZS1saXN0LWhlbHBlcic7XG5leHBvcnQge1BhY2thZ2VUeXBlLCBhbGxQYWNrYWdlcywgcGFja2FnZXM0V29ya3NwYWNlS2V5LCBwYWNrYWdlczRXb3Jrc3BhY2V9O1xuXG4vLyBjb25zdCBsb2cgPSBsb2c0anMuZ2V0TG9nZ2VyKCdwbGluay5wYWNrYWdlLXV0aWxzJyk7XG5cbmNvbnN0IGxhenlQYWNrYWdlRmFjdG9yeSA9IG5ldyBMYXp5UGFja2FnZUZhY3RvcnkoYWxsUGFja2FnZXMoKSk7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVMYXp5UGFja2FnZUZpbGVGaW5kZXIoKSB7XG4gIGNvbnN0IGNhY2hlID0gbmV3IExSVTxzdHJpbmcsIFBhY2thZ2VJbnN0YW5jZT4oe21heDogMjAsIG1heEFnZTogMjAwMDB9KTtcblxuICByZXR1cm4gZnVuY3Rpb24oZmlsZTogc3RyaW5nKTogUGFja2FnZUluc3RhbmNlIHwgdW5kZWZpbmVkIHtcbiAgICBsZXQgZm91bmQgPSBjYWNoZS5nZXQoZmlsZSk7XG4gICAgaWYgKCFmb3VuZCkge1xuICAgICAgZm91bmQgPSBsYXp5UGFja2FnZUZhY3RvcnkuZ2V0UGFja2FnZUJ5UGF0aChmaWxlKSE7XG4gICAgICBpZiAoZm91bmQpXG4gICAgICAgIGNhY2hlLnNldChmaWxlLCBmb3VuZCk7XG4gICAgfVxuICAgIHJldHVybiBmb3VuZDtcbiAgfTtcbn1cblxuZXhwb3J0IHR5cGUgRmluZFBhY2thZ2VDYiA9IChmdWxsTmFtZTogc3RyaW5nLFxuICAvKiogQERlcHJlY2F0ZWQgZW1wdHkgc3RyaW5nICovXG4gIHBhY2thZ2VQYXRoOiBzdHJpbmcsXG4gIHBhcnNlZE5hbWU6IHtuYW1lOiBzdHJpbmcsIHNjb3BlOiBzdHJpbmd9LFxuICBqc29uOiBhbnksXG4gIHJlYWxQYWNrYWdlUGF0aDogc3RyaW5nLFxuICBpc0luc3RhbGxlZDogYm9vbGVhbikgPT4gdm9pZDtcblxuZXhwb3J0IGZ1bmN0aW9uIGxvb2tGb3JQYWNrYWdlcyhwYWNrYWdlTGlzdDogc3RyaW5nW10gfCBzdHJpbmcsIGNiOiBGaW5kUGFja2FnZUNiKTogdm9pZCB7XG4gIGZvciAoY29uc3QgcGtnIG9mIGZpbmRQYWNrYWdlc0J5TmFtZXMoZ2V0U3RhdGUoKSwgQXJyYXkuaXNBcnJheShwYWNrYWdlTGlzdCkgPyBwYWNrYWdlTGlzdCA6IFtwYWNrYWdlTGlzdF0pKSB7XG4gICAgaWYgKHBrZyA9PSBudWxsKVxuICAgICAgY29udGludWU7XG4gICAgY2IocGtnLm5hbWUsIHBhdGguam9pbihwbGlua0Vudi53b3JrRGlyLCBwa2cucGF0aCksIHtuYW1lOiBwa2cuc2hvcnROYW1lLCBzY29wZTogcGtnLnNjb3BlfSxcbiAgICAgIHBrZy5qc29uLCBwa2cucmVhbFBhdGgsIHBrZy5pc0luc3RhbGxlZCk7XG4gIH1cbn1cblxuLy8gZXhwb3J0IHR5cGUgUGFja2FnZVR5cGUgPSAnKicgfCAnYnVpbGQnIHwgJ2NvcmUnO1xuXG5leHBvcnQgZnVuY3Rpb24gZmluZEFsbFBhY2thZ2VzKGNhbGxiYWNrOiBGaW5kUGFja2FnZUNiLFxuICByZWNpcGVUeXBlPzogJ3NyYycgfCAnaW5zdGFsbGVkJyxcbiAgcHJvamVjdERpcj86IHN0cmluZyB8IHN0cmluZ1tdKTogdm9pZDtcbmV4cG9ydCBmdW5jdGlvbiBmaW5kQWxsUGFja2FnZXMocGFja2FnZUxpc3Q6IHN0cmluZ1tdIHwgc3RyaW5nLFxuICBjYWxsYmFjazogRmluZFBhY2thZ2VDYixcbiAgcmVjaXBlVHlwZT86ICdzcmMnIHwgJ2luc3RhbGxlZCcsXG4gIHByb2plY3REaXI/OiBzdHJpbmcgfCBzdHJpbmdbXSk6IHZvaWQ7XG5leHBvcnQgZnVuY3Rpb24gZmluZEFsbFBhY2thZ2VzKHBhY2thZ2VMaXN0OiBzdHJpbmdbXSB8IHN0cmluZyB8IEZpbmRQYWNrYWdlQ2IsXG4gIGNhbGxiYWNrPzogRmluZFBhY2thZ2VDYiB8ICdzcmMnIHwgJ2luc3RhbGxlZCcsXG4gIHJlY2lwZVR5cGU/OiBzdHJpbmcgfCBzdHJpbmdbXSxcbiAgcHJvamVjdERpcj86IHN0cmluZyB8IHN0cmluZ1tdKSB7XG4gIC8vIG9sZFB1LmZpbmRBbGxQYWNrYWdlcy5hcHBseShvbGRQdSwgYXJndW1lbnRzKTtcblxuICBpZiAoXy5pc0Z1bmN0aW9uKGNhbGxiYWNrKSAmJiBwYWNrYWdlTGlzdCkge1xuICAgIGxvb2tGb3JQYWNrYWdlcygoW10gYXMgc3RyaW5nW10pLmNvbmNhdChwYWNrYWdlTGlzdCBhcyAoc3RyaW5nW10gfCBzdHJpbmcpKSwgY2FsbGJhY2spO1xuICAgIHJldHVybjtcbiAgfSBlbHNlIGlmIChfLmlzRnVuY3Rpb24ocGFja2FnZUxpc3QpKSB7XG4gICAgLy8gYXJndW1lbnRzLmxlbmd0aCA8PSAyXG4gICAgcHJvamVjdERpciA9IHJlY2lwZVR5cGU7XG4gICAgcmVjaXBlVHlwZSA9IGNhbGxiYWNrIGFzICdzcmMnIHwgJ2luc3RhbGxlZCc7XG4gICAgY2FsbGJhY2sgPSBwYWNrYWdlTGlzdDtcbiAgfVxuICByZXR1cm4gZmluZFBhY2thZ2VCeVR5cGUoJyonLCBjYWxsYmFjayBhcyBGaW5kUGFja2FnZUNiLCByZWNpcGVUeXBlIGFzICdzcmMnIHwgJ2luc3RhbGxlZCcsXG4gICAgcHJvamVjdERpcik7XG59XG5cbi8vIGV4cG9ydCB7ZWFjaFJlY2lwZX0gZnJvbSAnLi9yZWNpcGUtbWFuYWdlcic7XG5cbmV4cG9ydCB7bG9va3VwUGFja2FnZUpzb24gYXMgZmluZFBhY2thZ2VKc29uUGF0aH07XG5cbmV4cG9ydCBmdW5jdGlvbiBmaW5kUGFja2FnZUJ5VHlwZShfdHlwZXM6IFBhY2thZ2VUeXBlIHwgUGFja2FnZVR5cGVbXSxcbiAgY2FsbGJhY2s6IEZpbmRQYWNrYWdlQ2IsIHJlY2lwZVR5cGU/OiAnc3JjJyB8ICdpbnN0YWxsZWQnLCBwcm9qZWN0RGlyPzogc3RyaW5nW10gfCBzdHJpbmcpIHtcblxuICBjb25zdCBhcnIgPSBBcnJheS5pc0FycmF5KHByb2plY3REaXIpID8gcHJvamVjdERpciA6IHByb2plY3REaXIgPT0gbnVsbCA/IHByb2plY3REaXIgOiBbcHJvamVjdERpcl07XG4gIGZvciAoY29uc3QgcGtnIG9mIGFsbFBhY2thZ2VzKF90eXBlcywgcmVjaXBlVHlwZSwgYXJyKSkge1xuICAgIGNhbGxiYWNrKHBrZy5uYW1lLCBwYXRoLmpvaW4ocGxpbmtFbnYud29ya0RpciwgcGtnLnBhdGgpLFxuICAgICAge3Njb3BlOiBwa2cuc2NvcGUsIG5hbWU6IHBrZy5zaG9ydE5hbWV9LCBwa2cuanNvbiwgcGtnLnJlYWxQYXRoLCBwa2cuaXNJbnN0YWxsZWQpO1xuICB9XG59XG5cbiJdfQ==