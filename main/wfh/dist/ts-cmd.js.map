{"version":3,"file":"ts-cmd.js","sourceRoot":"","sources":["../ts/ts-cmd.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable max-len */\nimport Path, {resolve, join, relative, sep} from 'path';\nimport * as fs from 'fs';\nimport chalk from 'chalk';\nimport * as rx from 'rxjs';\nimport * as op from 'rxjs/operators';\nimport * as fse from 'fs-extra';\nimport _ from 'lodash';\nimport glob from 'glob';\nimport {default as _ts} from 'typescript';\nimport {DirTree} from 'require-injector/dist/dir-tree';\nimport log4js from 'log4js';\nimport {getTscConfigOfPkg, PackageTsDirs, plinkEnv} from './utils/misc';\nimport {setTsCompilerOptForNodePath, CompilerOptions as RequiredCompilerOptions, allPackages} from './package-mgr/package-list-helper';\nimport {findPackagesByNames} from './cmd/utils';\nimport {getState, workspaceKey, PackageInfo} from './package-mgr';\nimport * as packageUtils from './package-utils';\nimport {mergeBaseUrlAndPaths} from './ts-cmd-util';\nimport {webInjector} from './injector-factory';\nimport {analyseFiles} from './cmd/cli-analyze';\nimport {languageServices} from './utils/tsc-util';\nimport {exitHooks} from './utils/bootstrap-process';\nexport {RequiredCompilerOptions};\n\nconst {symlinkDirName} = plinkEnv;\nconst log = log4js.getLogger('plink.ts-cmd');\nexport interface TscCmdParam {\n  package?: string[];\n  project?: string[];\n  watch?: boolean;\n  sourceMap?: string;\n  jsx?: boolean;\n  ed?: boolean;\n  /** merge compilerOptions \"baseUrl\" and \"paths\" from specified tsconfig file */\n  mergeTsconfig?: string;\n  /** JSON string, to be merged to compilerOptions \"paths\",\n   * be aware that \"paths\" should be relative to \"baseUrl\" which is relative to `PlinkEnv.workDir`\n   * */\n  pathsJsons?: Array<string> | {[path: string]: string[]};\n  /**\n   * Partial compiler options to be merged, except \"baseUrl\".\n   * \"paths\" should be relative to `plinkEnv.workDir`\n   */\n  compilerOptions?: any;\n  overridePackgeDirs?: {[pkgName: string]: PackageTsDirs};\n}\n\ninterface PackageDirInfo extends PackageTsDirs {\n  pkgDir: string;\n  symlinkDir: string;\n}\n\nexport async function tsc(argv: TscCmdParam, ts: typeof _ts = _ts ): Promise<string[]> {\n  const rootFiles: string[] = [];\n  const watchDirs: string[] = [];\n  const includePatterns: string[] = [];\n\n  const compDirInfo: Map<string, PackageDirInfo> = new Map(); // {[name: string]: {srcDir: string, destDir: string}}\n\n  const packageDirTree = new DirTree<PackageDirInfo>();\n  const workDir = plinkEnv.workDir;\n  // const commonRootDir = plinkEnv.rootDir;\n\n  let countPkg = 0;\n  let pkgInfos: PackageInfo[] | undefined;\n  if (argv.package && argv.package.length > 0)\n    pkgInfos = Array.from(findPackagesByNames(argv.package)).filter(pkg => pkg != null) as PackageInfo[];\n  else if (argv.project && argv.project.length > 0) {\n    pkgInfos = Array.from(allPackages('*', 'src', argv.project));\n  } else {\n    pkgInfos = Array.from(packageUtils.packages4Workspace(plinkEnv.workDir, false));\n  }\n  // const commonRootDir = closestCommonParentDir(pkgInfos.map(pkg => pkg.realPath));\n  await Promise.all(pkgInfos.map(pkg => onComponent(pkg.name, pkg.path, null, pkg.json, pkg.realPath)));\n  for (const info of compDirInfo.values()) {\n    const treePath = relative(workDir, info.pkgDir);\n    log.debug('treePath', treePath);\n    packageDirTree.putData(treePath, info);\n  }\n\n  if (countPkg === 0) {\n    throw new Error('No available source package found in current workspace');\n  }\n\n  // const destDir = Path.relative(process.cwd(), commonRootDir).replace(/\\\\/g, '/');\n\n  /** set compGlobs */\n  async function onComponent(name: string, packagePath: string, _parsedName: any, json: any, realPath: string) {\n    countPkg++;\n    const tscCfg = argv.overridePackgeDirs && _.has(argv.overridePackgeDirs, name) ?\n      argv.overridePackgeDirs[name]\n      : getTscConfigOfPkg(json);\n    // For workaround https://github.com/microsoft/TypeScript/issues/37960\n    // Use a symlink path instead of a real path, so that Typescript compiler will not\n    // recognize them as from somewhere with \"node_modules\", the symlink must be reside\n    // in directory which does not contain \"node_modules\" as part of absolute path.\n    const symlinkDir = resolve(plinkEnv.workDir, symlinkDirName, name);\n    compDirInfo.set(name, {...tscCfg, pkgDir: realPath, symlinkDir});\n\n    const srcDirs = [tscCfg.srcDir, tscCfg.isomDir].filter(srcDir => {\n      if (srcDir == null)\n        return false;\n      try {\n        return fs.statSync(join(realPath, srcDir)).isDirectory();\n      } catch (e) {\n        return false;\n      }\n    });\n\n    if (srcDirs.length === 0) {\n      if (!fs.existsSync(symlinkDir)) {\n        log.error(`There is no existing directory ${chalk.red(symlinkDir)},` +\n        ` it is possible that package ${name} is yet not added to current worktree space's package.json file,` +\n        ' current worktree space is not synced yet, try \"sync\"/\"init\" command please');\n      } else {\n        log.error(`There is no existing ts source directory found for package ${chalk.red(name)}:` +\n          ` ${[tscCfg.srcDir, tscCfg.isomDir].filter(item => item != null).join(', ')}`);\n      }\n    }\n\n    if (tscCfg.files) {\n      const files = ([] as string[]).concat(tscCfg.files);\n      const aRes = await analyseFiles(files.map(file => resolve(symlinkDir, file)), argv.mergeTsconfig, []);\n      log.debug('analyzed files:', aRes);\n      if (aRes) {\n        rootFiles.push(...(aRes.files.filter(file => file.startsWith(symlinkDir + sep) && !/\\.(?:jsx?|d\\.ts)$/.test(file))\n          .map(file => file.replace(/\\\\/g, '/')))\n        );\n      }\n    }\n    if (tscCfg.include) {\n      const patterns = ([] as string[]).concat(tscCfg.include);\n      for (const pattern of patterns) {\n        const globPattern = resolve(symlinkDir, pattern).replace(/\\\\/g, '/');\n        includePatterns.push(globPattern);\n        // glob.sync(globPattern).filter(file => !file.endsWith('.d.ts')).forEach(file => rootFiles.push(file));\n      }\n    }\n    if (tscCfg.files == null && tscCfg.include == null) {\n      for (const srcDir of srcDirs) {\n        const relPath = resolve(realPath, srcDir!).replace(/\\\\/g, '/');\n        watchDirs.push(relPath);\n        // glob.sync(relPath + '/**/*.ts').filter(file => !file.endsWith('.d.ts')).forEach(file => rootFiles.push(file));\n        // if (argv.jsx) {\n        //   glob.sync(relPath + '/**/*.tsx').filter(file => !file.endsWith('.d.ts')).forEach(file => rootFiles.push(file));\n        // }\n      }\n    }\n  }\n\n  const {action$, ofType, dispatchFactory} = languageServices(ts, {\n    transformSourceFile(file, content) {\n      const changed = webInjector.injectToFile(file, content);\n      if (changed !== content) {\n        log.info(Path.relative(cwd, file) + ' is patched');\n      }\n      return changed;\n    },\n    tscOpts: {\n      jsx: argv.jsx,\n      inlineSourceMap: false,\n      emitDeclarationOnly: argv.ed,\n      basePath: workDir,\n      changeCompilerOptions(co) {\n        setupCompilerOptionsWithPackages(co as RequiredCompilerOptions, workDir.replace(/\\\\/g, '/'), argv, ts);\n      }\n    }\n  });\n\n  const cwd = process.cwd();\n\n  const writtenFile$ = new rx.Subject<string>();\n\n  function dealCommonJob() {\n    return rx.merge(\n      action$.pipe(\n        ofType('onCompilerOptions'),\n        op.take(1),\n        op.map(({payload: compilerOptions}) => {\n          log.info('typescript compilerOptions:', compilerOptions);\n        })\n      ),\n      action$.pipe(\n        ofType('emitFile'),\n        op.map(async ({payload: [file, content]}) => {\n          const destFile = realPathOf(file, workDir, packageDirTree, false);\n          if (destFile == null)\n            return;\n          writtenFile$.next(destFile);\n          log.info('emit file', Path.relative(cwd, destFile));\n          await fse.mkdirp(Path.dirname(destFile));\n          void fs.promises.writeFile(destFile, content);\n        })\n      ),\n      action$.pipe(\n        ofType('onEmitFailure'),\n        op.map(({payload: [file, msg, type]}) => {\n          log.error(`[${type}] ` + msg);\n        })\n      ),\n      action$.pipe(\n        ofType('onSuggest'),\n        op.map(({payload: [_fileName, msg]}) => {\n          log.warn(msg);\n        })\n      )\n    );\n  }\n\n  if (argv.watch) {\n    log.info('Watch mode');\n\n    rx.merge(\n      dealCommonJob()\n    ).subscribe();\n    exitHooks.push(() => dispatchFactory('stop')());\n    dispatchFactory('watch')([...watchDirs, ...includePatterns]);\n    // watch(rootFiles, compilerOptions, commonRootDir, packageDirTree, ts);\n    return [];\n  } else {\n    const emitted = [] as string[];\n    rx.merge(\n      dealCommonJob(),\n      writtenFile$.pipe(\n        op.map(file => emitted.push(file))\n      )\n    ).subscribe();\n\n    for (const dir of watchDirs) {\n      rootFiles.push(...glob.sync(dir + '/**/*.ts'));\n      if (argv.jsx) {\n        rootFiles.push(...glob.sync(dir + '/**/*.tsx'));\n      }\n    }\n    for (const pat of includePatterns) {\n      rootFiles.push(...pat);\n      if (argv.jsx) {\n        rootFiles.push(...pat);\n      }\n    }\n    for (const file of rootFiles) {\n      dispatchFactory('addSourceFile')(file, true);\n    }\n    writtenFile$.complete();\n    // const emitted = compile(rootFiles, compilerOptions, commonRootDir, packageDirTree, ts);\n    if (process.send)\n      process.send('plink-tsc compiled');\n    return emitted;\n  }\n}\n\n// const formatHost: _ts.FormatDiagnosticsHost = {\n//   getCanonicalFileName: path => path,\n//   getCurrentDirectory: _ts.sys.getCurrentDirectory,\n//   getNewLine: () => _ts.sys.newLine\n// };\n\n// function watch(rootFiles: string[], jsonCompilerOpt: any, commonRootDir: string, packageDirTree: DirTree<PackageDirInfo>, ts: typeof _ts = _ts) {\n//   const compilerOptions = ts.parseJsonConfigFileContent({compilerOptions: jsonCompilerOpt}, ts.sys,\n//     process.cwd().replace(/\\\\/g, '/'),\n//     undefined, 'tsconfig.json').options;\n\n//   function _reportDiagnostic(diagnostic: _ts.Diagnostic) {\n//     return reportDiagnostic(diagnostic, commonRootDir, packageDirTree, ts);\n//   }\n//   const programHost = ts.createWatchCompilerHost(rootFiles, compilerOptions, ts.sys,\n//     // https://github.com/microsoft/TypeScript/wiki/Using-the-Compiler-API\n//     // TypeScript can use several different program creation \"strategies\":\n//     //  * ts.createEmitAndSemanticDiagnosticsBuilderProgram,\n//     //  * ts.createSemanticDiagnosticsBuilderProgram\n//     //  * ts.createAbstractBuilder\n//     // The first two produce \"builder programs\". These use an incremental strategy\n//     // to only re-check and emit files whose contents may have changed, or whose\n//     // dependencies may have changes which may impact change the result of prior\n//     // type-check and emit.\n//     // The last uses an ordinary program which does a full type check after every\n//     // change.\n//     // Between `createEmitAndSemanticDiagnosticsBuilderProgram` and\n//     // `createSemanticDiagnosticsBuilderProgram`, the only difference is emit.\n//     // For pure type-checking scenarios, or when another tool/process handles emit,\n//     // using `createSemanticDiagnosticsBuilderProgram` may be more desirable\n//     ts.createEmitAndSemanticDiagnosticsBuilderProgram, _reportDiagnostic, d => reportWatchStatusChanged(d, ts),\n//     undefined, {watchDirectory: ts.WatchDirectoryKind.UseFsEvents});\n//   patchWatchCompilerHost(programHost);\n\n//   const origCreateProgram = programHost.createProgram;\n//   // Ts's createWatchProgram will call WatchCompilerHost.createProgram(), this is where we patch \"CompilerHost\"\n//   programHost.createProgram = function(rootNames: readonly string[] | undefined, options: CompilerOptions | undefined,\n//     host?: _ts.CompilerHost, ...rest: any[]) {\n//     // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n//     if (host && (host as any)._overrided == null) {\n//       patchCompilerHost(host, commonRootDir, packageDirTree, compilerOptions, ts);\n//     }\n//     const program = origCreateProgram.call(this, rootNames, options, host, ...rest) ;\n//     return program;\n//   };\n\n//   ts.createWatchProgram(programHost);\n// }\n\n// function compile(rootFiles: string[], jsonCompilerOpt: any, commonRootDir: string, packageDirTree: DirTree<PackageDirInfo>,\n//   ts: typeof _ts = _ts) {\n//   const compilerOptions = ts.parseJsonConfigFileContent({compilerOptions: jsonCompilerOpt}, ts.sys,\n//     process.cwd().replace(/\\\\/g, '/'),\n//     undefined, 'tsconfig.json').options;\n//   const host = ts.createCompilerHost(compilerOptions);\n//   patchWatchCompilerHost(host);\n//   const emitted = patchCompilerHost(host, commonRootDir, packageDirTree, compilerOptions, ts);\n//   const program = ts.createProgram(rootFiles, compilerOptions, host);\n//   const emitResult = program.emit();\n//   const allDiagnostics = ts.getPreEmitDiagnostics(program)\n//     .concat(emitResult.diagnostics);\n\n//   function _reportDiagnostic(diagnostic: _ts.Diagnostic) {\n//     return reportDiagnostic(diagnostic, commonRootDir, packageDirTree, ts);\n//   }\n//   allDiagnostics.forEach(diagnostic => {\n//     _reportDiagnostic(diagnostic);\n//   });\n//   if (emitResult.emitSkipped) {\n//     throw new Error('Compile failed');\n//   }\n//   return emitted;\n// }\n\n/** Overriding WriteFile() */\n// function patchCompilerHost(host: _ts.CompilerHost, commonRootDir: string, packageDirTree: DirTree<PackageDirInfo>,\n//   co: _ts.CompilerOptions, ts: typeof _ts = _ts): string[] {\n//   const emittedList: string[] = [];\n//   // It seems to not able to write file through symlink in Windows\n//   // const _writeFile = host.writeFile;\n//   const writeFile: _ts.WriteFileCallback = function(fileName, data, writeByteOrderMark, onError, sourceFiles) {\n//     const destFile = realPathOf(fileName, commonRootDir, packageDirTree);\n//     if (destFile == null) {\n//       log.debug('skip', fileName);\n//       return;\n//     }\n//     emittedList.push(destFile);\n//     log.info('write file', Path.relative(process.cwd(), destFile));\n//     // Typescript's writeFile() function performs weird with symlinks under watch mode in Windows:\n//     // Every time a ts file is changed, it triggers the symlink being compiled and to be written which is\n//     // as expected by me,\n//     // but late on it triggers the same real file also being written immediately, this is not what I expect,\n//     // and it does not actually write out any changes to final JS file.\n//     // So I decide to use original Node.js file system API\n//     fs.mkdirpSync(Path.dirname(destFile));\n//     fs.writeFileSync(destFile, data);\n//     // It seems Typescript compiler always uses slash instead of back slash in file path, even in Windows\n//     // return _writeFile.call(this, destFile.replace(/\\\\/g, '/'), ...Array.prototype.slice.call(arguments, 1));\n//   };\n//   host.writeFile = writeFile;\n\n//   return emittedList;\n// }\n\n// function patchWatchCompilerHost(host: _ts.WatchCompilerHostOfFilesAndCompilerOptions<_ts.EmitAndSemanticDiagnosticsBuilderProgram> | _ts.CompilerHost) {\n//   const readFile = host.readFile;\n//   const cwd = process.cwd();\n//   host.readFile = function(path: string, encoding?: string) {\n//     const content = readFile.call(this, path, encoding) ;\n//     if (content && !path.endsWith('.d.ts') && !path.endsWith('.json')) {\n//       // console.log('WatchCompilerHost.readFile', path);\n//       const changed = webInjector.injectToFile(path, content);\n//       if (changed !== content) {\n//         log.info(Path.relative(cwd, path) + ' is patched');\n//         return changed;\n//       }\n//     }\n//     return content;\n//   };\n// }\n\n\n// function reportDiagnostic(diagnostic: _ts.Diagnostic, commonRootDir: string, packageDirTree: DirTree<PackageDirInfo>, ts: typeof _ts = _ts) {\n//   // let fileInfo = '';\n//   // if (diagnostic.file) {\n//   //   const {line, character} = diagnostic.file.getLineAndCharacterOfPosition(diagnostic.start!);\n//   //   const realFile = realPathOf(diagnostic.file.fileName, commonRootDir, packageDirTree, true) || diagnostic.file.fileName;\n//   //   fileInfo = `${realFile}, line: ${line + 1}, column: ${character + 1}`;\n//   // }\n//   // console.error(chalk.red(`Error ${diagnostic.code} ${fileInfo} :`), ts.flattenDiagnosticMessageText( diagnostic.messageText, formatHost.getNewLine()));\n//   const out = ts.formatDiagnosticsWithColorAndContext([diagnostic], {\n//     getCanonicalFileName: fileName => realPathOf(fileName, commonRootDir, packageDirTree, true) || fileName,\n//     getCurrentDirectory: ts.sys.getCurrentDirectory,\n//     getNewLine: () => ts.sys.newLine\n//   });\n//   console.error(out);\n// }\n\n// function reportWatchStatusChanged(diagnostic: _ts.Diagnostic, ts: typeof _ts = _ts) {\n//   console.info(chalk.cyan(ts.formatDiagnosticsWithColorAndContext([diagnostic], formatHost)));\n// }\n\nconst COMPILER_OPTIONS_MERGE_EXCLUDE = new Set(['baseUrl', 'typeRoots', 'paths', 'rootDir']);\n\nfunction setupCompilerOptionsWithPackages(compilerOptions: RequiredCompilerOptions, basePath: string, opts?: TscCmdParam, ts: typeof _ts = _ts): void {\n  let wsKey: string | null | undefined = workspaceKey(plinkEnv.workDir);\n  if (!getState().workspaces.has(wsKey))\n    wsKey = getState().currWorkspace;\n  if (wsKey == null) {\n    throw new Error(`Current directory \"${plinkEnv.workDir}\" is not a work space`);\n  }\n\n  if (opts?.mergeTsconfig) {\n    const json = mergeBaseUrlAndPaths(ts, opts.mergeTsconfig, basePath, compilerOptions);\n    for (const [key, value] of Object.entries(json.compilerOptions)) {\n      if (!COMPILER_OPTIONS_MERGE_EXCLUDE.has(key)) {\n        compilerOptions[key] = value;\n        log.debug('merge compiler options', key, value);\n      }\n    }\n  }\n\n  // appendTypeRoots([], cwd, compilerOptions, {});\n  setTsCompilerOptForNodePath(basePath, './', compilerOptions, {\n    enableTypeRoots: true,\n    workspaceDir: plinkEnv.workDir,\n    realPackagePaths: true\n  });\n\n  if (opts?.pathsJsons) {\n    if (Array.isArray(opts.pathsJsons)) {\n      compilerOptions.paths = opts.pathsJsons.reduce((pathMap, jsonStr) => {\n        Object.assign(pathMap, JSON.parse(jsonStr));\n        return pathMap;\n      }, compilerOptions.paths);\n    } else {\n      Object.assign(compilerOptions.paths, opts.pathsJsons);\n    }\n  }\n\n  // if (compilerOptions.paths == null)\n  //   compilerOptions.paths = {};\n  // compilerOptions.paths['*'] = ['node_modules/*'];\n\n  if (opts?.compilerOptions) {\n    for (const [prop, value] of Object.entries(opts.compilerOptions)) {\n      if (prop === 'baseUrl') {\n        continue;\n      }\n      if (prop === 'paths') {\n        if (compilerOptions.paths)\n          Object.assign(compilerOptions.paths, value);\n        else\n          compilerOptions.paths = value as any;\n      } else {\n        compilerOptions[prop] = value as any;\n      }\n    }\n  }\n}\n\n/**\n * Return real path of targeting file, return null if targeting file is not in our compiliation scope\n * @param fileName \n * @param commonRootDir \n * @param packageDirTree \n */\nfunction realPathOf(fileName: string, commonRootDir: string, packageDirTree: DirTree<PackageDirInfo>, isSrcFile = false): string | null {\n  const treePath = relative(commonRootDir, fileName);\n  const _originPath = fileName; // absolute path\n  const foundPkgInfo = packageDirTree.getAllData(treePath).pop();\n  if (foundPkgInfo == null) {\n    // this file is not part of source package.\n    // log.info('Not part of entry files', fileName);\n    return null;\n  }\n  const {srcDir, destDir, pkgDir, isomDir} = foundPkgInfo;\n\n  const pathWithinPkg = relative(pkgDir, _originPath);\n\n  if (srcDir === '.' || srcDir.length === 0) {\n    fileName = join(pkgDir, isSrcFile ? srcDir : destDir, pathWithinPkg);\n  } else if (pathWithinPkg.startsWith(srcDir + sep)) {\n    fileName = join(pkgDir, isSrcFile ? srcDir : destDir, pathWithinPkg.slice(srcDir.length + 1));\n  } else if (isomDir && pathWithinPkg.startsWith(isomDir + sep)) {\n    fileName = join(pkgDir, isomDir, pathWithinPkg.slice(isomDir.length + 1));\n  }\n  return fileName;\n}\n"]}