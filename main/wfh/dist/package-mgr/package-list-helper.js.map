{"version":3,"file":"package-list-helper.js","sourceRoot":"","sources":["../../ts/package-mgr/package-list-helper.ts"],"names":[],"mappings":"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","sourcesContent":["import Path from 'path';\nimport _ from 'lodash';\nimport {getLogger} from 'log4js';\nimport ts from 'typescript';\nimport {plinkEnv, getTscConfigOfPkg} from '../utils/misc';\nimport {calcNodePaths} from '../node-path-calc';\nimport {getState, pathToProjKey, workspaceKey, PackageInfo, workspaceDir} from './index';\n\nexport type PackageType = '*' | 'build' | 'core';\nconst log = getLogger('plink.package-list-helper');\n\nexport function* allPackages(_types?: PackageType | PackageType[],\n  recipeType?: 'src' | 'installed', projectDirs?: string[]): Generator<PackageInfo> {\n\n  if (recipeType !== 'installed') {\n    if (projectDirs) {\n      for (const projectDir of projectDirs) {\n        const projKey = pathToProjKey(projectDir);\n        const pkgNames = getState().project2Packages.get(projKey);\n        if (pkgNames == null)\n          return;\n        for (const pkgName of pkgNames) {\n          const pkg = getState().srcPackages.get(pkgName);\n          if (pkg) {\n            yield pkg;\n          }\n        }\n      }\n    } else {\n      for (const pkg of getState().srcPackages.values()) {\n        yield pkg;\n      }\n    }\n  }\n  if (recipeType !== 'src') {\n    for (const ws of getState().workspaces.values()) {\n      const installed = ws.installedComponents;\n      if (installed) {\n        for (const comp of installed.values()) {\n          yield comp;\n        }\n      }\n    }\n  }\n}\n\nexport function* packages4WorkspaceKey(wsKey: string, includeInstalled = true): Generator<PackageInfo> {\n  const ws = getState().workspaces.get(wsKey);\n  if (!ws)\n    return;\n\n  const linked = getState().srcPackages;\n  const installed = ws.installedComponents;\n  const avoidDuplicateSet = new Set<string>();\n  for (const [pkName] of ws.linkedDependencies) {\n    avoidDuplicateSet.add(pkName);\n    const pk = linked.get(pkName);\n    if (pk == null)\n      log.info(`Missing package ${pkName} in workspace ${wsKey}`);\n    else\n      yield pk;\n  }\n  for (const [pkName] of ws.linkedDevDependencies) {\n    if (avoidDuplicateSet.has(pkName)) {\n      continue;\n    }\n    const pk = linked.get(pkName);\n    if (pk == null)\n      log.info(`Missing package ${pkName} in workspace ${wsKey}`);\n    else\n      yield pk;\n  }\n  if (includeInstalled && installed) {\n    for (const comp of installed.values()) {\n      if (avoidDuplicateSet.has(comp.name)) {\n        continue;\n      }\n      yield comp;\n    }\n  }\n}\n\nexport function packages4Workspace(workspaceDir?: string, includeInstalled = true) {\n  const wsKey = workspaceKey(workspaceDir || plinkEnv.workDir);\n  return packages4WorkspaceKey(wsKey, includeInstalled);\n}\n\n/**\n * @returns a map of workspace keys of which has specified dependency\n */\nexport function workspacesOfDependencies(...depPkgNames: string[]) {\n  const deps = new Set(depPkgNames);\n  const wsKeys = new Set<string>();\n  for (const [key, wsState] of getState().workspaces.entries()) {\n    for (const [pkgName] of wsState.linkedDependencies.concat(wsState.linkedDevDependencies)) {\n      if (deps.has(pkgName)) {\n        wsKeys.add(key);\n      }\n    }\n    for (const [pkgName] of wsState.installedComponents?.keys() || []) {\n      if (deps.has(pkgName)) {\n        wsKeys.add(key);\n      }\n    }\n  }\n  return wsKeys;\n}\n\nexport interface CompilerOptionSetOpt {\n  /** Will add typeRoots property for specific workspace, and add paths of file \"package-settings.d.ts\" */\n  workspaceDir?: string;\n  /** Add real path of all link package to \"paths\" property */\n  realPackagePaths?: boolean;\n  enableTypeRoots?: boolean;\n  noTypeRootsInPackages?: boolean;\n  /** Default false, Do not include linked package symlinks directory in path*/\n  noSymlinks?: boolean;\n  extraNodePath?: string[];\n  extraTypeRoot?: string[];\n}\n\nexport interface CompilerOptions {\n  baseUrl: string;\n  typeRoots: string[];\n  paths?: {[path: string]: string[]};\n  [prop: string]: ts.CompilerOptionsValue;\n}\n\n/**\n * Set \"baseUrl\", \"paths\" and \"typeRoots\" property relative to tsconfigDir, process.cwd()\n * and process.env.NODE_PATHS\n * @param tsconfigDir project directory where tsconfig file is (virtual),\n * \"baseUrl\", \"typeRoots\" is relative to this parameter\n * @param baseUrl compiler option \"baseUrl\", \"paths\" will be relative to this paremter\n * @param assigneeOptions \n * @param opts CompilerOptionSetOpt\n */\nexport function setTsCompilerOptForNodePath(\n  tsconfigDir: string,\n  baseUrl = './',\n  assigneeOptions: Partial<CompilerOptions>,\n  opts: CompilerOptionSetOpt = {enableTypeRoots: false}) {\n\n  // const {rootDir, plinkDir, symlinkDirName} = JSON.parse(process.env.__plink!) as PlinkEnv;\n  let symlinksDir: string | undefined;\n  /** for paths mapping \"*\" */\n  let pathsDirs: string[] = [];\n  // workspace node_modules should be the first\n  const baseUrlAbsPath = Path.resolve(tsconfigDir, baseUrl);\n\n  if (opts.realPackagePaths) {\n    if (assigneeOptions.paths == null) {\n      assigneeOptions.paths = {};\n    }\n    Object.assign(assigneeOptions.paths, pathMappingForLinkedPkgs(baseUrlAbsPath));\n  }\n\n  if (opts.workspaceDir != null) {\n    symlinksDir = Path.resolve(opts.workspaceDir, plinkEnv.symlinkDirName);\n    pathsDirs.push(...calcNodePaths(plinkEnv.rootDir, symlinksDir,\n      opts.workspaceDir || plinkEnv.workDir, plinkEnv.plinkDir));\n  }\n\n  if (opts.extraNodePath && opts.extraNodePath.length > 0) {\n    pathsDirs.push(...opts.extraNodePath);\n  }\n\n  pathsDirs = _.uniq(pathsDirs);\n\n  if (opts.noSymlinks && symlinksDir) {\n    const idx = pathsDirs.indexOf(symlinksDir);\n    if (idx >= 0) {\n      pathsDirs.splice(idx, 1);\n    }\n  }\n\n  if (Path.isAbsolute(baseUrl)) {\n    let relBaseUrl = Path.relative(tsconfigDir, baseUrl);\n    if (!relBaseUrl.startsWith('.'))\n      relBaseUrl = './' + relBaseUrl;\n    baseUrl = relBaseUrl;\n  }\n\n  if (assigneeOptions.paths == null)\n    assigneeOptions.paths = {};\n\n  assigneeOptions.baseUrl = baseUrl.replace(/\\\\/g, '/');\n\n  appendTypeRoots(pathsDirs, tsconfigDir, assigneeOptions, opts);\n\n  return assigneeOptions as CompilerOptions;\n}\n\n/**\n * For those special scoped package which is like @loadable/component, its type definition package is\n * @types/loadable__component\n */\n// function assignSpecialPaths(dependencies: {[dep: string]: string} | undefined,\n//   nodePaths: Iterable<string>,\n//   assigneeOptions: Partial<CompilerOptions>, absBaseUrlPath: string) {\n//   if (dependencies == null)\n//     return;\n\n//   // if (assigneeOptions.paths == null)\n//   //   assigneeOptions.paths = {};\n//   for (const item of Object.keys(dependencies)) {\n//     const m = /^@types\\/(.*?)__(.*?)$/.exec(item);\n//     if (m) {\n//       const originPkgName = `@${m[1]}/${m[2]}`;\n//       const exactOne: string[] = assigneeOptions.paths![originPkgName] = [];\n//       const wildOne: string[] = assigneeOptions.paths![originPkgName + '/*'] = [];\n//       for (const dir of nodePaths) {\n//         const relativeDir = Path.relative(absBaseUrlPath, dir + '/' + item).replace(/\\\\/g, '/');\n//         exactOne.push(relativeDir);\n//         wildOne.push(relativeDir + '/*');\n//       }\n//     }\n//   }\n// }\n\nfunction pathMappingForLinkedPkgs(baseUrlAbsPath: string) {\n  let drcpDir = (getState().linkedDrcp || getState().installedDrcp)!.realPath;\n\n  const pathMapping: {[key: string]: string[]} = {};\n\n  for (const [name, {realPath, json}] of getState().srcPackages.entries() || []) {\n    const tsDirs = getTscConfigOfPkg(json);\n    const realDir = Path.relative(baseUrlAbsPath, realPath).replace(/\\\\/g, '/');\n    pathMapping[name] = [realDir];\n\n    pathMapping[`${name}/${tsDirs.destDir}/*`.replace(/\\/\\//g, '/')] = [`${realDir}/${tsDirs.srcDir}/*`.replace(/\\/\\//g, '/')];\n    // pathMapping[`${name}/${tsDirs.isomDir}/*`] = [`${realDir}/${tsDirs.isomDir}/*`];\n    pathMapping[name + '/*'] = [`${realDir}/*`];\n  }\n\n  // if (pkgName !== '@wfh/plink') {\n  drcpDir = Path.relative(baseUrlAbsPath, drcpDir).replace(/\\\\/g, '/');\n  pathMapping['@wfh/plink'] = [drcpDir + '/wfh/ts/index.ts'];\n  pathMapping['@wfh/plink/wfh/dist/*'] = [drcpDir + '/wfh/ts/*'];\n  return pathMapping;\n}\n\n/**\n * \n * @param pathsDirs Node path like path information\n * @param tsconfigDir \n * @param assigneeOptions \n * @param opts \n */\nexport function appendTypeRoots(pathsDirs: string[], tsconfigDir: string, assigneeOptions: Partial<CompilerOptions>,\n  opts: CompilerOptionSetOpt) {\n  if (opts.noTypeRootsInPackages == null || !opts.noTypeRootsInPackages) {\n    if (assigneeOptions.typeRoots == null)\n      assigneeOptions.typeRoots = [];\n    assigneeOptions.typeRoots.push(\n      // plink directory: wfh/types, it is a symlink at runtime, due to Plink uses preserve-symlinks to run commands\n      Path.relative(tsconfigDir, Path.resolve(__dirname, '../../types')).replace(/\\\\/g, '/'),\n      ...typeRootsInPackages(opts.workspaceDir).map(dir => Path.relative(tsconfigDir, dir).replace(/\\\\/g, '/'))\n    );\n  }\n\n  if (opts.enableTypeRoots ) {\n    if (assigneeOptions.typeRoots == null)\n      assigneeOptions.typeRoots = [];\n    assigneeOptions.typeRoots.push(...pathsDirs.map(dir => {\n      const relativeDir = Path.relative(tsconfigDir, dir).replace(/\\\\/g, '/');\n      return relativeDir + '/@types';\n    }));\n  }\n\n  if (opts.extraTypeRoot) {\n    if (assigneeOptions.typeRoots == null)\n      assigneeOptions.typeRoots = [];\n    assigneeOptions.typeRoots.push(...opts.extraTypeRoot.map(\n      dir => Path.relative(tsconfigDir, dir).replace(/\\\\/g, '/')));\n  }\n\n  assigneeOptions.typeRoots = _.uniq(assigneeOptions.typeRoots);\n  if (assigneeOptions.typeRoots != null && assigneeOptions.typeRoots.length === 0)\n    delete assigneeOptions.typeRoots;\n}\n\nfunction typeRootsInPackages(onlyIncludedWorkspace?: string) {\n  // const {getState, workspaceKey}: typeof _pkgMgr = require('./package-mgr');\n  const wsKeys = onlyIncludedWorkspace ? [workspaceKey(onlyIncludedWorkspace)] : getState().workspaces.keys();\n  const dirs: string[] = [];\n  for (const wsKey of wsKeys) {\n    for (const pkg of packages4WorkspaceKey(wsKey)) {\n      const typeRoot = pkg.json.plink?.typeRoot || pkg.json.dr?.typeRoot;\n      if (typeRoot) {\n        const dir = Path.resolve(workspaceDir(wsKey), pkg.realPath, typeRoot);\n        dirs.push(dir);\n      }\n    }\n  }\n  return dirs;\n}\n"]}