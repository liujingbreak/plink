{"version":3,"file":"package-info-gathering.js","sourceRoot":"","sources":["../../src/package-mgr/package-info-gathering.ts"],"names":[],"mappings":"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","sourcesContent":["import Path from 'path';\nimport * as _ from 'lodash';\nimport {getLogger} from 'log4js';\nimport LRU from 'lru-cache';\nimport {DirTree} from '../../../packages/require-injector/dist/dir-tree';\nimport PackageInstance from '../packageNodeInstance';\nimport {plinkEnv} from '../utils/misc';\nimport {packages4Workspace} from './package-list-helper';\nimport {parseName} from './lazy-package-factory';\nimport {PackageInfo as PackageState} from './index';\n// import inspector from 'inspector';\n\nconst log = getLogger('plink.package-info-gathering');\n\nconst {workDir, symlinkDirName} = plinkEnv;\nexport interface PackageInfo {\n  allModules: PackageInstance[];\n  dirTree: DirTree<PackageInstance>;\n  moduleMap: Map<string, PackageInstance>;\n}\n\nexport {PackageInstance};\n\nlet existingFileToPkgHelper: {\n  packageInfo: PackageInfo;\n  getPkgOfFile(file: string): PackageInstance | undefined;\n} | undefined;\n// let packageInfo: PackageInfo;\n\nexport function packageOfFileFactory() {\n  if (existingFileToPkgHelper) {\n    return existingFileToPkgHelper;\n  }\n  const cache = new LRU<string, PackageInstance>({max: 20, maxAge: 20000});\n  const packageInfo: PackageInfo = walkPackages();\n\n  function getPkgOfFile(file: string): PackageInstance | undefined {\n    let found = cache.get(file);\n    if (!found) {\n      found = packageInfo.dirTree.getAllData(file).pop();\n      if (found)\n        cache.set(file, found);\n    }\n    return found;\n  }\n  existingFileToPkgHelper = {packageInfo, getPkgOfFile};\n  return existingFileToPkgHelper;\n}\n\nexport function walkPackages() {\n  // if (packageInfo)\n  //   return packageInfo;\n  log.info('scan for packages info');\n  const packageInfo: PackageInfo = {\n    get allModules() {\n      return [...packageInfo.moduleMap.values()];\n    }, // array\n    moduleMap: new Map(),\n    dirTree: null as unknown as DirTree<PackageInstance>\n  };\n\n  for (const pk of packages4Workspace()) {\n    addPackageToInfo(packageInfo.moduleMap, pk);\n  }\n\n  createPackageDirTree(packageInfo);\n  return packageInfo;\n}\n\n\nfunction addPackageToInfo(moduleMap: PackageInfo['moduleMap'], pkg: PackageState) {\n  let instance = moduleMap.get(pkg.name);\n  if (instance == null) {\n    const parsed = parseName(pkg.name);\n    // There are also node packages\n    instance = new PackageInstance({\n      moduleName: pkg.name,\n      shortName: parsed.name,\n      name: pkg.name,\n      longName: pkg.name,\n      scope: pkg.scope,\n      path: Path.resolve(workDir, pkg.path),\n      json: pkg.json,\n      realPath: pkg.realPath,\n      orig: pkg\n    });\n  }\n  moduleMap.set(instance.longName, instance);\n}\n\n// function trimNoParseSetting(p: string) {\n//   p = p.replace(/\\\\/g, '/');\n//   if (p.startsWith('./')) {\n//     p = p.substring(2);\n//   }\n//   return p;\n// }\n\nfunction createPackageDirTree(packageInfo: PackageInfo) {\n  const tree = new DirTree<PackageInstance>();\n  let count = 0;\n  packageInfo.allModules.forEach(pkg => {\n    if (pkg == null)\n      return;\n\n    if (pkg.realPath) {\n      tree.putData(pkg.realPath, pkg);\n    }\n    // Don't trust pkg.path, it is set by command line: plink sync/init, and loaded from state file,\n    // which is not up-to-dates.\n    tree.putData(Path.resolve(workDir, symlinkDirName, pkg.name), pkg);\n    // if (pkg.path !== pkg.realPath) {\n    //   tree.putData(Path.resolve(workDir, symlinkDirName, pkg.name), pkg);\n    // }\n    // if (pkg.name === '@bk/trade-aggr') {\n    //   inspector.open(9222, 'localhost', true);\n    //   debugger;\n    // }\n    count++;\n  });\n  log.info('%s Plink compliant node packages found', count);\n  packageInfo.dirTree = tree;\n}\n\n"]}