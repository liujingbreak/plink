{"version":3,"file":"store.js","sourceRoot":"","sources":["../ts/store.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-argument */\nimport Path from 'path';\nimport fs from 'fs';\nimport {isMainThread, threadId} from 'worker_threads';\nimport fse from 'fs-extra';\nimport {tap, filter} from 'rxjs/operators';\nimport * as rx from 'rxjs';\nimport * as op from 'rxjs/operators';\nimport chalk from 'chalk';\nimport log4js from 'log4js';\nimport serialize from 'serialize-javascript';\nimport {enableMapSet} from 'immer';\nimport {StateFactory, ofPayloadAction} from '../../packages/redux-toolkit-observable/dist/redux-toolkit-observable';\nimport {createReducers, action$Of, castByActionType} from '../../packages/redux-toolkit-observable/dist/helper';\nimport {PlinkEnv} from './node-path';\n\nexport {ofPayloadAction, createReducers, action$Of, castByActionType};\nenableMapSet();\nconfigDefaultLog();\n\nconst PROCESS_MSG_TYPE = 'rtk-observable:state';\nexport type ProcessStateSyncMsg = {\n  type: typeof PROCESS_MSG_TYPE;\n  data: string;\n};\nexport function isStateSyncMsg(msg: unknown): msg is ProcessStateSyncMsg {\n  return (msg as ProcessStateSyncMsg).type === PROCESS_MSG_TYPE;\n}\n\nfunction configDefaultLog() {\n  let logPatternPrefix = '';\n  if (process.send || !isMainThread)\n    logPatternPrefix = `[P${process.pid}.T${threadId}] `;\n  log4js.configure({\n    appenders: {\n      out: {\n        type: 'stdout',\n        layout: {type: 'pattern', pattern: logPatternPrefix + '%[%c%] - %m'}\n      }\n    },\n    categories: {\n      default: {appenders: ['out'], level: 'info'}\n    }\n  });\n  /**\n   - %r time in toLocaleTimeString format\n   - %p log level\n   - %c log category\n   - %h hostname\n   - %m log data\n   - %d date, formatted - default is ISO8601, format options are: ISO8601, ISO8601_WITH_TZ_OFFSET, ABSOLUTE, DATE, or any string compatible with the date-format library. e.g. %d{DATE}, %d{yyyy/MM/dd-hh.mm.ss}\n   - %% % - for when you want a literal % in your output\n   - %n newline\n   - %z process id (from process.pid)\n   - %f full path of filename (requires enableCallStack: true on the category, see configuration object)\n   - %f{depth} pathâ€™s depth let you chose to have only filename (%f{1}) or a chosen number of directories\n   - %l line number (requires enableCallStack: true on the category, see configuration object)\n   - %o column postion (requires enableCallStack: true on the category, see configuration object)\n   - %s call stack (requires enableCallStack: true on the category, see configuration object)\n   - %x{<tokenname>} add dynamic tokens to your log. Tokens are specified in the tokens parameter.\n   - %X{<tokenname>} add values from the Logger context. Tokens are keys into the context values.\n   - %[ start a coloured block (colour will be taken from the log level, similar to colouredLayout)\n   - %] end a coloured block\n   */\n}\n\n\nexport const BEFORE_SAVE_STATE = 'BEFORE_SAVE_STATE';\nconst IGNORE_SLICE = ['config', 'configView', 'cli', 'analyze', 'storeSetting'];\nconst IGNORE_ACTION = new Set(['packages/setInChina', 'packages/updatePlinkPackageInfo']);\nconst ignoreSliceSet = new Set(IGNORE_SLICE);\n\nconst stateFile = Path.resolve((JSON.parse(process.env.__plink!) as PlinkEnv).distDir, 'plink-state.json');\n/**\n * Since Redux-toolkit does not read initial state with any lazy slice that has not defined in root reducer,\n * e.g. \n * \"Unexpected keys \"clean\", \"packages\" found in preloadedState argument passed to createStore.\n * Expected to find one of the known reducer keys instead: \"main\". Unexpected keys will be ignored.\"\"\n * \n * I have to export saved state, so that eacy lazy slice can initialize its own slice state by themself\n */\nconst savedStore = fs.existsSync(stateFile) ? fs.readFileSync(stateFile, 'utf8') : null;\nif (savedStore && savedStore.length === 0) {\n  throw new Error('Emptry store file ' + stateFile + ', delete it and initial new workspaces');\n}\n// eslint-disable-next-line no-eval\nexport const lastSavedState = savedStore ? eval('(' + savedStore + ')') : {};\nfor (const ignoreSliceName of IGNORE_SLICE) {\n  delete lastSavedState[ignoreSliceName];\n}\n\n/**\n * Before actuall using stateFactory, I must execute `stateFactory.configureStore();`,\n * and its better after most of the slices havee been defined\n */\nexport const stateFactory = new StateFactory(lastSavedState);\n\nconst defaultLog = log4js.getLogger('plink.store');\n\nexport type StoreSetting = {\n  actionOnExit: 'save' | 'send' | 'none';\n  stateChangeCount: number;\n};\n\nconst initialState: StoreSetting = {\n  actionOnExit: process.send && isMainThread ? 'send' : 'none',\n  stateChangeCount: 0\n};\n\nconst simpleReducers = {\n  changeActionOnExit(s: StoreSetting, mode: StoreSetting['actionOnExit']) {\n    s.actionOnExit = mode;\n  },\n  /**\n   * Dispatch this action before you explicitly run process.exit(0) to quit, because \"beforeExit\"\n   * won't be triggered prior to process.exit(0)\n   */\n  processExit() {},\n  storeSaved() {}\n};\n\nconst storeSettingSlice = stateFactory.newSlice({\n  name: 'storeSetting',\n  initialState,\n  reducers: createReducers<StoreSetting, typeof simpleReducers>(simpleReducers)\n});\n\nfunction getState() {\n  return stateFactory.sliceState(storeSettingSlice);\n}\n\nexport const dispatcher = stateFactory.bindActionCreators(storeSettingSlice);\n\nstateFactory.addEpic<typeof storeSettingSlice>((action$) => rx.merge(\n  stateFactory.sliceStore(storeSettingSlice).pipe(\n    op.map((s) => s.stateChangeCount), op.distinctUntilChanged(),\n    op.filter(count => count === 0),\n    op.tap(() => {\n      dispatcher.changeActionOnExit('none');\n    })\n  ),\n  action$.pipe(ofPayloadAction(storeSettingSlice.actions.processExit),\n    op.take(1),\n    op.switchMap(async () => {\n      const log = log4js.getLogger('plink.store');\n      const {actionOnExit} = getState();\n\n      if (actionOnExit === 'save') {\n        const store = await stateFactory.rootStoreReady;\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        const mergedState = Object.assign(lastSavedState, store.getState());\n\n        const jsonStr = serialize(mergedState, {space: '  '});\n        fse.mkdirpSync(Path.dirname(stateFile));\n        try {\n          const relFile = Path.relative(process.cwd(), stateFile);\n          log.info(chalk.gray(`saving state file ${relFile}`));\n          await fs.promises.writeFile(stateFile, jsonStr);\n          log.info(chalk.gray(\n            `state file ${relFile} saved (${getState().stateChangeCount})`));\n        } catch (err) {\n          log.error(chalk.gray(`Failed to write state file ${Path.relative(process.cwd(), stateFile)}`), err);\n        }\n      } else if (actionOnExit === 'send' && process.send) {\n        const store = await stateFactory.rootStoreReady;\n        log.info('send state sync message');\n\n        process.send({\n          type: PROCESS_MSG_TYPE,\n          data: serialize(store.getState(), {space: ''})\n        } as ProcessStateSyncMsg);\n\n        log.info(chalk.gray('in a forked child process, skip saving state'));\n      } else {\n        log.info(chalk.gray('skip saving state'));\n      }\n      dispatcher.storeSaved();\n    })\n  ),\n  stateFactory.actionsToDispatch.pipe(\n    filter(action => !action.type.endsWith('/_init') &&\n      !IGNORE_ACTION.has(action.type) &&\n      !ignoreSliceSet.has(action.type.slice(0, action.type.indexOf('/')))\n    ),\n    // op.takeUntil(action$.pipe(ofPayloadAction(storeSettingSlice.actions.processExit))),\n    tap(() => {\n      dispatcher._change(s => s.stateChangeCount = s.stateChangeCount + 1);\n    })\n  )\n).pipe(\n  op.ignoreElements()\n));\n\nexport const processExitAction$ = action$Of(stateFactory, storeSettingSlice.actions.processExit).pipe(op.take(1));\nexport const storeSavedAction$ = action$Of(stateFactory, storeSettingSlice.actions.storeSaved);\n\nexport function startLogging() {\n\n  // const logState = log4js.getLogger('plink.store.state');\n  const logAction = log4js.getLogger('plink.store.action');\n\n  stateFactory.log$.pipe(\n    tap(params => {\n      if (params[0] === 'state') {\n        // (logState.debug as any)(...params.slice(1));\n      } else if (params[0] === 'action') {\n        (logAction.debug as any)(...params.slice(1));\n      } else\n        (defaultLog.debug as any)(...params);\n    })\n  ).subscribe();\n}\n\n/**\n * a listener registered on the 'beforeExit' event can make asynchronous calls, \n * and thereby cause the Node.js process to continue.\n * The 'beforeExit' event is not emitted for conditions causing explicit termination,\n * such as calling process.exit() or uncaught exceptions.\n */\n// process.once('beforeExit', () => {\n  // dispatcher.processExit();\n// });\n\n// TEST async action for Thunk middleware\n// stateFactory.store$.subscribe(store => {\n//   if (store) {\n//     debugger;\n//     store.dispatch((async (dispatch: any) => {\n//       await new Promise(resolve => setTimeout(resolve, 500));\n//       dispatch({type: 'ok'});\n//     }) as any);\n//   }\n// });\n"]}