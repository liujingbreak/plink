{"version":3,"file":"app-server.js","sourceRoot":"","sources":["../ts/app-server.ts"],"names":[],"mappings":";;;;;AAAA,0DAAkC;AAClC,4FAAiE;AAEjE,8DAAqC;AAIrC,IAAA,mCAAsB,EAAC,mCAAmC,EAAE,EAAC,eAAe,EAAE,MAAM,EAAE,iBAAiB,EAAE,IAAI,EAAC,EAAE,GAAG,EAAE;IACnH,MAAM,EAAC,OAAO,EAAC,GAAG,OAAO,CAAC,oBAAoB,CAAsB,CAAC;IAErE,qEAAqE;IACrE,OAAO,CAAC,KAAK,GAAG,gBAAgB,CAAC;IAEjC,MAAM,OAAO,GAAG,IAAI,mBAAS,CAAC,OAAO,EAAE;SACpC,SAAS,CAAC,WAAW,CAAC;SACtB,MAAM,CAAC,GAAG,EAAE;QACb,sCAAsC;QACpC,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,OAAO,CAAC,CAAC;QACzC,MAAM,EAAC,UAAU,EAAE,SAAS,EAAC,GAAG,OAAO,CAAC,2BAA2B,CAAyB,CAAC;QAC7F,MAAM,OAAO,GAAG,UAAU,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC;QAC3C,IAAA,oBAAS,EAAC,OAAO,EAAE,CAAC,CAAC;QACrB,MAAM,EAAC,SAAS,EAAC,GAAG,OAAO,CAAC,kBAAkB,CAAmB,CAAC;QAClE,MAAM,QAAQ,GAAG,SAAS,EAAE,CAAC,QAAQ,CAAC;QAEtC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC3B,CAAC,CAAC,CAAC;IAEL,MAAM,EAAC,iBAAiB,EAAC,GAAG,OAAO,CAAC,0BAA0B,CAAuB,CAAC;IACtF,iBAAiB,CAAC,OAAO,CAAC,CAAC;IAE3B,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC;SAC7B,KAAK,CAAC,CAAC,CAAQ,EAAE,EAAE;QAClB,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;QAC1B,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAClB,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["import commander from 'commander';\nimport runWithPreserveSymlink from './fork-for-preserve-symlink';\nimport * as overrideCmd from './cmd/override-commander';\nimport logConfig from './log-config';\nimport * as _runner from './package-runner';\nimport * as bootstrapProc from './utils/bootstrap-process';\n\nrunWithPreserveSymlink('@wfh/plink/wfh/dist/app-server.js', {stateExitAction: 'none', handleShutdownMsg: true}, () => {\n  const {version} = require('../../package.json') as {version: string};\n\n  /** Emitted function will be executed during server shutdown phase */\n  process.title = 'Plink - server';\n\n  const program = new commander.Command()\n    .arguments('[args...]')\n    .action(() => {\n    // eslint-disable-next-line no-console\n      console.log('\\nPlink version:', version);\n      const {initConfig, exitHooks} = require('./utils/bootstrap-process') as typeof bootstrapProc;\n      const setting = initConfig(program.opts());\n      logConfig(setting());\n      const {runServer} = require('./package-runner') as typeof _runner;\n      const shutdown = runServer().shutdown;\n\n      exitHooks.push(shutdown);\n    });\n\n  const {withGlobalOptions} = require('./cmd/override-commander') as typeof overrideCmd;\n  withGlobalOptions(program);\n\n  program.parseAsync(process.argv)\n    .catch((e: Error) => {\n      console.error(e, e.stack);\n      process.exit(1);\n    });\n});\n\n\n"]}