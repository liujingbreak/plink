"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.forkFile = void 0;
const path_1 = __importDefault(require("path"));
const child_process_1 = require("child_process");
const misc_1 = require("./utils/misc");
// import log4js from 'log4js';
// const log = log4js.getLogger('plink.fork-for-preserver-symlink');
function forkFile(file) {
    let argv = process.argv.slice(2);
    const foundCmdOptIdx = argv.findIndex(arg => arg === '--cwd' || arg === '--space');
    const workdir = foundCmdOptIdx >= 0 ? path_1.default.resolve(misc_1.plinkEnv.rootDir, argv[foundCmdOptIdx + 1]) : null;
    if (workdir) {
        argv.splice(foundCmdOptIdx, 2);
        process.env.PLINK_WORK_DIR = workdir;
    }
    process.execArgv.push('--preserve-symlinks-main', '--preserve-symlinks');
    const foundDebugOptIdx = argv.findIndex(arg => arg === '--inspect' || arg === '--inspect-brk');
    const env = Object.assign({}, process.env);
    if (foundDebugOptIdx >= 0) {
        env.NODE_OPTIONS = env.NODE_OPTIONS ? env.NODE_OPTIONS + ' ' + argv[foundDebugOptIdx] : argv[foundDebugOptIdx];
        argv.splice(foundDebugOptIdx, 1);
    }
    const debugOptIdx = argv.findIndex(arg => arg === '--debug');
    if (debugOptIdx >= 0) {
        env.NODE_OPTIONS = env.NODE_OPTIONS ? env.NODE_OPTIONS + ' --inspect-brk' : '--inspect-brk';
        argv.splice(debugOptIdx, 1);
    }
    (0, child_process_1.fork)(path_1.default.resolve(__dirname, 'fork-preserve-symlink-main.js'), argv, {
        env: Object.assign(Object.assign({}, env), { __plink_fork_main: file, __plink_save_state: '1' }),
        stdio: 'inherit'
    });
    process.on('SIGINT', () => {
        // eslint-disable-next-line no-console
        console.log('bye');
        process.exit(0);
    });
    return;
}
exports.forkFile = forkFile;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9yay1mb3ItcHJlc2VydmUtc3ltbGluay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3RzL2ZvcmstZm9yLXByZXNlcnZlLXN5bWxpbmsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsZ0RBQXdCO0FBQ3hCLGlEQUFtQztBQUNuQyx1Q0FBc0M7QUFFdEMsK0JBQStCO0FBQy9CLG9FQUFvRTtBQUVwRSxTQUFnQixRQUFRLENBQUMsSUFBWTtJQUNuQyxJQUFJLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNqQyxNQUFNLGNBQWMsR0FBSSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLE9BQU8sSUFBSSxHQUFHLEtBQUssU0FBUyxDQUFDLENBQUM7SUFDcEYsTUFBTSxPQUFPLEdBQUcsY0FBYyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsY0FBSSxDQUFDLE9BQU8sQ0FBQyxlQUFRLENBQUMsT0FBTyxFQUFHLElBQUksQ0FBQyxjQUFjLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ3ZHLElBQUksT0FBTyxFQUFFO1FBQ1gsSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDL0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLEdBQUcsT0FBTyxDQUFDO0tBQ3RDO0lBRUQsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsMEJBQTBCLEVBQUUscUJBQXFCLENBQUMsQ0FBQztJQUN6RSxNQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssV0FBVyxJQUFJLEdBQUcsS0FBSyxlQUFlLENBQUMsQ0FBQztJQUUvRixNQUFNLEdBQUcscUJBQTRDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNsRSxJQUFJLGdCQUFnQixJQUFJLENBQUMsRUFBRTtRQUN6QixHQUFHLENBQUMsWUFBWSxHQUFHLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUMvRyxJQUFJLENBQUMsTUFBTSxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQ2xDO0lBQ0QsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxTQUFTLENBQUMsQ0FBQztJQUM3RCxJQUFJLFdBQVcsSUFBSSxDQUFDLEVBQUU7UUFDcEIsR0FBRyxDQUFDLFlBQVksR0FBRyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsWUFBWSxHQUFHLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUM7UUFDNUYsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDN0I7SUFFRCxJQUFBLG9CQUFJLEVBQUMsY0FBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsK0JBQStCLENBQUMsRUFBRSxJQUFJLEVBQUU7UUFDbkUsR0FBRyxrQ0FBTSxHQUFHLEtBQUUsaUJBQWlCLEVBQUUsSUFBSSxFQUFFLGtCQUFrQixFQUFFLEdBQUcsR0FBQztRQUMvRCxLQUFLLEVBQUUsU0FBUztLQUNqQixDQUFDLENBQUM7SUFDSCxPQUFPLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUU7UUFDeEIsc0NBQXNDO1FBQ3RDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbkIsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNsQixDQUFDLENBQUMsQ0FBQztJQUVILE9BQU87QUFDVCxDQUFDO0FBbENELDRCQWtDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHtmb3JrfSBmcm9tICdjaGlsZF9wcm9jZXNzJztcbmltcG9ydCB7cGxpbmtFbnZ9IGZyb20gJy4vdXRpbHMvbWlzYyc7XG5cbi8vIGltcG9ydCBsb2c0anMgZnJvbSAnbG9nNGpzJztcbi8vIGNvbnN0IGxvZyA9IGxvZzRqcy5nZXRMb2dnZXIoJ3BsaW5rLmZvcmstZm9yLXByZXNlcnZlci1zeW1saW5rJyk7XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3JrRmlsZShmaWxlOiBzdHJpbmcpIHtcbiAgbGV0IGFyZ3YgPSBwcm9jZXNzLmFyZ3Yuc2xpY2UoMik7XG4gIGNvbnN0IGZvdW5kQ21kT3B0SWR4ID0gIGFyZ3YuZmluZEluZGV4KGFyZyA9PiBhcmcgPT09ICctLWN3ZCcgfHwgYXJnID09PSAnLS1zcGFjZScpO1xuICBjb25zdCB3b3JrZGlyID0gZm91bmRDbWRPcHRJZHggPj0gMCA/IFBhdGgucmVzb2x2ZShwbGlua0Vudi5yb290RGlyLCAgYXJndltmb3VuZENtZE9wdElkeCArIDFdKSA6IG51bGw7XG4gIGlmICh3b3JrZGlyKSB7XG4gICAgYXJndi5zcGxpY2UoZm91bmRDbWRPcHRJZHgsIDIpO1xuICAgIHByb2Nlc3MuZW52LlBMSU5LX1dPUktfRElSID0gd29ya2RpcjtcbiAgfVxuXG4gIHByb2Nlc3MuZXhlY0FyZ3YucHVzaCgnLS1wcmVzZXJ2ZS1zeW1saW5rcy1tYWluJywgJy0tcHJlc2VydmUtc3ltbGlua3MnKTtcbiAgY29uc3QgZm91bmREZWJ1Z09wdElkeCA9IGFyZ3YuZmluZEluZGV4KGFyZyA9PiBhcmcgPT09ICctLWluc3BlY3QnIHx8IGFyZyA9PT0gJy0taW5zcGVjdC1icmsnKTtcblxuICBjb25zdCBlbnY6IHtba2V5OiBzdHJpbmddOiBzdHJpbmcgfCB1bmRlZmluZWR9ID0gey4uLnByb2Nlc3MuZW52fTtcbiAgaWYgKGZvdW5kRGVidWdPcHRJZHggPj0gMCkge1xuICAgIGVudi5OT0RFX09QVElPTlMgPSBlbnYuTk9ERV9PUFRJT05TID8gZW52Lk5PREVfT1BUSU9OUyArICcgJyArIGFyZ3ZbZm91bmREZWJ1Z09wdElkeF0gOiBhcmd2W2ZvdW5kRGVidWdPcHRJZHhdO1xuICAgIGFyZ3Yuc3BsaWNlKGZvdW5kRGVidWdPcHRJZHgsIDEpO1xuICB9XG4gIGNvbnN0IGRlYnVnT3B0SWR4ID0gYXJndi5maW5kSW5kZXgoYXJnID0+IGFyZyA9PT0gJy0tZGVidWcnKTtcbiAgaWYgKGRlYnVnT3B0SWR4ID49IDApIHtcbiAgICBlbnYuTk9ERV9PUFRJT05TID0gZW52Lk5PREVfT1BUSU9OUyA/IGVudi5OT0RFX09QVElPTlMgKyAnIC0taW5zcGVjdC1icmsnIDogJy0taW5zcGVjdC1icmsnO1xuICAgIGFyZ3Yuc3BsaWNlKGRlYnVnT3B0SWR4LCAxKTtcbiAgfVxuXG4gIGZvcmsoUGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJ2ZvcmstcHJlc2VydmUtc3ltbGluay1tYWluLmpzJyksIGFyZ3YsIHtcbiAgICBlbnY6IHsuLi5lbnYsIF9fcGxpbmtfZm9ya19tYWluOiBmaWxlLCBfX3BsaW5rX3NhdmVfc3RhdGU6ICcxJ30sXG4gICAgc3RkaW86ICdpbmhlcml0J1xuICB9KTtcbiAgcHJvY2Vzcy5vbignU0lHSU5UJywgKCkgPT4ge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgY29uc29sZS5sb2coJ2J5ZScpO1xuICAgIHByb2Nlc3MuZXhpdCgwKTtcbiAgfSk7XG5cbiAgcmV0dXJuO1xufVxuIl19