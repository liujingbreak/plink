{"version":3,"file":"ts-compiler.js","sourceRoot":"","sources":["../ts/ts-compiler.ts"],"names":[],"mappings":"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","sourcesContent":["import {readFileSync} from 'fs';\nimport * as Path from 'path';\nimport * as ts from 'typescript';\nimport chalk from 'chalk';\nimport {getLogger} from 'log4js';\nimport {plinkEnv} from './utils/misc';\nconst log = getLogger('plink.ts-compiler');\n\nexport function readTsConfig(tsconfigFile: string): ts.CompilerOptions {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const tsconfig = ts.readConfigFile(tsconfigFile, (file) => readFileSync(file, 'utf-8')).config;\n  return ts.parseJsonConfigFileContent(tsconfig, ts.sys, plinkEnv.workDir.replace(/\\\\/g, '/'),\n    undefined, tsconfigFile).options;\n}\n\n/**\n * call ts.parseJsonConfigFileContent()\n * @param jsonCompilerOpt \n * @param file \n * @param basePath - (tsconfig file directory) \n *  A root directory to resolve relative path entries in the config file to. e.g. outDir\n */\nexport function jsonToCompilerOptions(jsonCompilerOpt: any, file = 'tsconfig.json',\n  basePath = plinkEnv.workDir): ts.CompilerOptions {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  return ts.parseJsonConfigFileContent({compilerOptions: jsonCompilerOpt}, ts.sys, basePath.replace(/\\\\/g, '/'),\n    undefined, file).options;\n}\n\n/**\n * Refer to https://github.com/Microsoft/TypeScript/wiki/Using-the-Compiler-API#transpiling-a-single-file\n * @param tsCode \n */\nexport function transpileSingleTs(tsCode: string, compilerOptions: ts.CompilerOptions): string {\n  const res = ts.transpileModule(tsCode, {compilerOptions});\n  if (res.diagnostics && res.diagnostics.length > 0) {\n    const msg = `Failed to transpile TS expression: ${tsCode}\\n` + res.diagnostics.join('\\n');\n    console.error(msg);\n    throw new Error(msg);\n  }\n  return res.outputText;\n}\n\n// import * as fs from 'fs';\n\n// import {inspect} from 'util';\nconst {red, yellow} = chalk;\nclass TsCompiler {\n  fileNames: string[] = [];\n  files: ts.MapLike<{version: number}> = {};\n  langService: ts.LanguageService;\n  fileContent = new Map<string, string>();\n  // currentFile: string;\n\n  constructor(public compilerOptions: ts.CompilerOptions) {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self = this;\n    const compilerHost = ts.createCompilerHost(compilerOptions);\n\n    const cwd = plinkEnv.workDir;\n    const serviceHost: ts.LanguageServiceHost = {\n      getNewLine() { return '\\n'; },\n      getCompilationSettings() { return self.compilerOptions; },\n      getScriptFileNames() {return self.fileNames; },\n      getScriptVersion: fileName =>\n        this.files[fileName] && this.files[fileName].version.toString(),\n      getScriptSnapshot: fileName => {\n        if (this.fileContent.has(fileName))\n          return ts.ScriptSnapshot.fromString(this.fileContent.get(fileName)!);\n        if (ts.sys.fileExists(fileName))\n          return ts.ScriptSnapshot.fromString(ts.sys.readFile(fileName)!);\n        return undefined;\n      },\n      getCurrentDirectory: () => cwd,\n      getDefaultLibFileName: () => compilerHost.getDefaultLibFileName\t(compilerOptions),\n      fileExists: (f: string) => {\n        // console.log(f);\n        return compilerHost.fileExists(f);\n      },\n      readFile(path: string, encode?: string) {\n        if (self.fileContent.has(path))\n          return self.fileContent.get(path);\n        return compilerHost.readFile(path);\n      },\n      readDirectory: compilerHost.readDirectory,\n      getDirectories: compilerHost.getDirectories,\n      directoryExists: ts.sys.directoryExists, // debuggable('directoryExists', compilerHost.directoryExists),\n      realpath: compilerHost.realpath // debuggable('realpath', compilerHost.realpath),\n    };\n    this.langService = ts.createLanguageService( serviceHost, ts.createDocumentRegistry());\n\n  }\n\n  compile(fileName: string, srcCode: string): string | undefined {\n    fileName = Path.resolve(fileName).replace(/\\\\/g, '/');\n    this.fileContent.set(fileName, srcCode);\n    this.fileNames.push(fileName);\n    // this.currentFile = fileName;\n    return this.emitFile(fileName);\n  }\n\n  protected emitFile(fileName: string): string | undefined {\n    const output = this.langService.getEmitOutput(fileName);\n    this.logErrors(fileName);\n    if (output.emitSkipped) {\n      // eslint-disable-next-line no-console\n      console.log(red(`ts-compiler - compile ${fileName} failed`));\n      this.logErrors(fileName, true);\n      throw new Error('Failed to compile Typescript ' + fileName);\n    }\n    if (output.outputFiles.length > 1) {\n      throw new Error('ts-compiler - what the heck, there are more than one output files? ' +\n        output.outputFiles.map(o => yellow(o.name)).join(', '));\n    }\n    for (const o of output.outputFiles) {\n      return o.text;\n    }\n  }\n\n  protected logErrors(fileName: string, isError = false) {\n    const allDiagnostics = this.langService\n      .getCompilerOptionsDiagnostics()\n      .concat(this.langService.getSyntacticDiagnostics(fileName))\n      .concat(this.langService.getSemanticDiagnostics(fileName));\n\n    allDiagnostics.forEach(diagnostic => {\n      const message = ts.flattenDiagnosticMessageText(diagnostic.messageText, '\\n');\n      if (diagnostic.file) {\n        const {line, character} = diagnostic.file.getLineAndCharacterOfPosition(diagnostic.start!);\n        log.info((isError ? red : yellow)(`[wfh.ts-compiler] ${(isError ? 'Error' : 'Warning')} ` +\n          `${diagnostic.file.fileName} (${line + 1},${character + 1}): ${message}`));\n      } else {\n        log.info((isError ? red : yellow)(`[wfh.ts-compiler] ${(isError ? 'Error' : 'Warning')}: ${message}`));\n      }\n    });\n  }\n}\n\nlet singletonCompiler: TsCompiler;\nexport function transpileAndCheck(tsCode: string, filename: string, co: ts.CompilerOptions | string): string | undefined {\n  if (typeof co === 'string') {\n    co = readTsConfig(co);\n  }\n  co.declaration = false;\n  co.declarationMap = false;\n  // co.inlineSourceMap = true;\n  // co.sourceMap = true;\n  if (singletonCompiler == null)\n    singletonCompiler = new TsCompiler(co);\n  return singletonCompiler.compile(filename, tsCode);\n}\n\n/**\n * Exactly like ts-node, so that we can `require()` a ts file directly without `tsc`\n * @param ext \n * @param compilerOpt \n */\nexport function registerExtension(ext: string, compilerOpt: ts.CompilerOptions) {\n  const old = require.extensions[ext] || require.extensions['.js'];\n  // compilerOpt.inlineSources = true;\n  compilerOpt.inlineSourceMap = false;\n  compilerOpt.inlineSources = false;\n  require.extensions[ext] = function(m: any, filename) {\n\n    const _compile = m._compile;\n    m._compile = function(code: string, fileName: string) {\n      const jscode = transpileAndCheck(code, fileName, compilerOpt);\n      // console.log(jscode);\n      return _compile.call(this, jscode, fileName);\n    };\n    return old(m, filename);\n  };\n}\n\n// export function testCompiler(file: string) {\n//   const fs = require('fs');\n//   console.log(file);\n//   const compilerOpt = {\n//     baseUrl: '.',\n//     outDir: '',\n//     declaration: true,\n//     module: 'commonjs',\n//     target: 'es2015',\n//     noImplicitAny: true,\n//     suppressImplicitAnyIndexErrors: true,\n//     allowSyntheticDefaultImports: true,\n//     esModuleInterop: true,\n//     inlineSourceMap: false,\n//     inlineSources: true,\n//     moduleResolution: 'node',\n//     experimentalDecorators: true,\n//     emitDecoratorMetadata: true,\n//     noUnusedLocals: true,\n//     preserveSymlinks: false,\n//     downlevelIteration: false,\n//     strictNullChecks: true,\n//     resolveJsonModule: true,\n//     diagnostics: true,\n//     lib: [ 'es2016', 'es2015', 'dom' ],\n//     pretty: true,\n//     rootDir: '..',\n//     importHelpers: true,\n//     skipLibCheck: true,\n//     sourceMap: true,\n//     emitDeclarationOnly: false,\n//     paths: {\n//       '*': [\n//         '../node_modules/@types/*',\n//         'node_modules/@types/*',\n//         'node_modules/*',\n//         '../node_modules/*'\n//       ]\n//     },\n//     typeRoots: [\n//       '/Users/liujing/bk/mytool/node_modules/@types'\n//       //'./node_modules/@types', '../node_modules/@types'\n//     ]\n//   };\n\n//   const co = jsonToCompilerOptions(compilerOpt);\n//   transpileAndCheck(fs.readFileSync(file, 'utf8'), file, co);\n// }\n"]}