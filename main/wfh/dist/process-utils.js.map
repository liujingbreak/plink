{"version":3,"file":"process-utils.js","sourceRoot":"","sources":["../ts/process-utils.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable no-console, indent, @typescript-eslint/indent */\nimport {spawn as sysSpawn, ChildProcess, SpawnOptions, fork as sysFork, ForkOptions as SysForkOptions} from 'child_process';\nimport {Writable} from 'stream';\nexport const isWindows = process.platform === 'win32';\n\nexport interface Option extends SpawnOptions {\n  timeout?: number;\n  silent?: boolean;\n}\n\nexport interface ForkOptions extends SysForkOptions {\n  timeout?: number;\n  silent?: boolean;\n}\n\nexport interface Result {\n  childProcess: ChildProcess;\n  promise: Promise<string>;\n  done: Promise<{stdout: string; errout: string}>;\n}\n/**\n * Spawn process\n * @param  {string} command\n * @param  {string[]} args\n * @param  {object} opts optional\n *   - {boolean} opts.silent  child process's `stdout` and `stderr` stream will\n *   not pipe to process.stdout and stderr, returned promise will be resolved to\n *   string of stdout\n *   Other opts properties will be passed to child_process.spawn()\n *\n * @return {Promise} rejected if child process exits with non-zero code\n */\nexport function promisifySpawn(command: string, ...args: Array<string | Option>):\n  Promise<string> {\n  return spawn(command, ...args).promise;\n}\n\nexport function spawn(command: string, ...args: Array<string | Option>): Result {\n  let opts: Option = args[args.length - 1] as Option;\n  if (typeof opts === 'string') {\n    opts = {};\n  } else {\n    args = args.slice(0, -1);\n  }\n\n  if (opts == null) {\n    opts = {};\n  }\n\n  if (!(opts && opts.silent)) {\n    opts.stdio = 'inherit';\n  }\n  console.log(opts.cwd || process.cwd(), '> spawn process:', command, ...args);\n  const res = sysSpawn(command, args as string[], opts);\n  const done = checkTimeout(promisifyChildProcess(res, opts, `${command} ${args.join(' ')}`), opts.timeout)\n  .catch(e => {\n    if (e.message === 'Timeout' && res) {\n      console.log('Kill the child process');\n      res.kill('SIGHUP');\n    }\n    throw e;\n  });\n  return {\n    childProcess: res,\n    promise: done.then(strs => strs.stdout + '\\n' + strs.errout),\n    done\n  };\n}\n\nexport function fork(jsFile: string, ...args: Array<string | ForkOptions>): Result {\n  let opts: ForkOptions = args[args.length - 1] as ForkOptions;\n  if (typeof opts === 'string') {\n    opts = {};\n  } else {\n    args = args.slice(0, -1);\n  }\n\n  if (opts == null) {\n    opts = {};\n  }\n\n  const res = sysFork(jsFile, args as string[], opts);\n  const done = checkTimeout(promisifyChildProcess(res, opts, `Fork of ${jsFile}`), opts.timeout)\n  .catch(e => {\n    if (e.message === 'Timeout' && res) {\n      console.log('Kill the child process');\n      res.kill('SIGHUP');\n    }\n    throw e;\n  });\n  return {\n    childProcess: res,\n    done,\n    promise: done.then(out => out.stdout + '\\n' + out.errout)\n  };\n}\n\nasync function promisifyChildProcess(res: ChildProcess, opts: Option | ForkOptions, desc: string) {\n  let output: ReturnType<typeof createStringWriter> | undefined;\n  let errOutput: typeof output | undefined;\n  const cpExit = new Promise<{code: number | null; signal: string | null}>((resolve, reject) => {\n    if (opts && opts.silent) {\n      output = createStringWriter();\n      errOutput = createStringWriter();\n      res.stdout!.setEncoding('utf-8');\n      res.stdout!.pipe(output.writer);\n      res.stderr!.setEncoding('utf-8');\n      res.stderr!.pipe(errOutput.writer);\n    }\n    res.on('error', (err) => {\n      reject(err);\n    });\n    res.on('exit', function(code, signal) {\n      resolve({code, signal});\n    });\n  });\n  const {code, signal} = await cpExit;\n  let joinText = '';\n  let outs = {} as {stdout: string; errout: string};\n  if (opts && opts.silent) {\n    const outTexts = await Promise.all([output!.done, errOutput!.done]);\n    joinText = outTexts.join('\\n');\n    outs.stdout = outTexts[0];\n    outs.errout = outTexts[1];\n  }\n  if (code !== 0 && signal !== 'SIGINT') {\n    const errMsg = `Child process \"${desc}\" exit with code ${'' + code}, signal ` + signal;\n    throw new Error(errMsg + '\\n' + (joinText ? joinText : ''));\n  }\n  return outs;\n}\n\nfunction checkTimeout<T>(origPromise: Promise<T>, timeBox = 600000): Promise<T> {\n  let timeout: NodeJS.Timer | null;\n  return new Promise<T>((resolve, reject) => {\n    origPromise.then(res => {\n      if (timeout) {\n        clearTimeout(timeout);\n      }\n      resolve(res);\n    }).catch(e => {\n      if (timeout) {\n        clearTimeout(timeout);\n      }\n      reject(e);\n    });\n    timeout = setTimeout(() => {\n      timeout = null;\n      reject(new Error('Timeout'));\n    }, timeBox);\n  });\n}\n\n/**\n * Fix some executable command for windows\n * @param  {string} command     [description]\n * @param  {...string | array} commandArgs ... arguments\n * @param  {object} opts optional\n *   - {boolean} opts.silent  child process's `stdout` and `stderr` stream will\n *   not pipe to process.stdout and stderr, returned promise will be resolved to\n *   string of stdout\n *\n * @return {Promise}        rejected if child process exits with non-zero code\n */\nexport function promisifyExe(command: string, ...argsAndOption: Array<string | Option>): Promise<string> {\n  return exe(command, ...argsAndOption).promise;\n}\n\n/**\n * @param {*} command\n * @param {*} argsAndOption\n * @return {object} {promise: Promise, childProcess: child_process}\n */\nexport function exe(command: string, ...argsAndOption: Array<string | Option>): Result {\n  // var args = [].slice.call(arguments);\n  if (isWindows) {\n    switch (command) {\n      // case 'node':\n      case 'npm':\n      case 'npx':\n      case 'yarn':\n      case 'gulp':\n        command += '.cmd';\n        break;\n      default:\n    }\n    command = command.replace(/\\//g, '\\\\');\n  }\n  return spawn(command, ...argsAndOption);\n}\n\nexport function createStringWriter(): {writer: Writable; done: Promise<string>} {\n  let strs: string[] = [];\n  let resolve: (str: string) => void;\n  const done = new Promise<string>(res => {\n    resolve = res;\n  });\n  const writer = new Writable({\n    write(chunk, encoding, cb) {\n      // for (const data of cks) {\n      //   strs.push(data.chunk as string);\n      // }\n      strs.push(chunk);\n      cb();\n    },\n    final(cb) {\n      cb();\n      setImmediate(() => {\n        resolve(strs.join(''));\n      });\n    }\n  });\n\n  return {\n    writer,\n    done\n  };\n}\n\n"]}