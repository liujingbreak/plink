{"version":3,"file":"config-handler.js","sourceRoot":"","sources":["../ts/config-handler.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable  no-console */\nimport * as Path from 'path';\nimport chalk from 'chalk';\nimport _ from 'lodash';\nimport {getLogger} from 'log4js';\nimport {BehaviorSubject, Observable} from 'rxjs';\nimport {Draft} from '@reduxjs/toolkit';\nimport {GlobalOptions as CliOptions} from './cmd/types';\nimport {getRootDir, getWorkDir} from './utils/misc';\nimport {PlinkSettings} from './config/config-slice';\n\n// import {registerExtension, jsonToCompilerOptions} from './ts-compiler';\n// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\nconst {cyan} = chalk;\nconst log = getLogger('plink.config-handler');\n\nexport {PlinkSettings};\nexport interface DrcpConfig {\n  /**\n   * Used to run command line option \"-c\" specified TS/JS files one by one \n   */\n  configHandlerMgr: BehaviorSubject<ConfigHandlerMgr | undefined>;\n  /** lodash like get function, return specific setting property value\n   * @return \n   */\n  get<K extends keyof PlinkSettings>(path: K, defaultValue?: PlinkSettings[K]): PlinkSettings[K];\n  get(path: string | string[], defaultValue?: any): any;\n  set<K extends keyof PlinkSettings>(path: K, value: PlinkSettings[K] | any): void;\n  set(path: string | string[], value: any): void;\n  change(reducer: (setting: Draft<PlinkSettings>) => void): void;\n  /**\n   * Resolve a path based on `rootPath`\n   * @name resolve\n   * @memberof config\n   * @param {string} dir name or property path, like \"name\", \"name.childProp[1]\"\n   * @return {string} absolute path\n   */\n  resolve(dir: 'rootPath' | 'destDir' | 'staticDir' | 'serverDir', ...path: string[]): string;\n  resolve(...path: string[]): string;\n  /** @return all settings in a big JSON object */\n  (): PlinkSettings;\n  reload(): PlinkSettings;\n  // init(argv: CliOptions): Promise<PlinkSettings>;\n  initSync(argv: CliOptions): PlinkSettings;\n  getStore(): Observable<PlinkSettings>;\n  /**\n   * ConfigHandlerMgr changes everytime Plink settings are initialized or reloaded.\n   * ConfigHandlerMgr is used to run command line option \"-c\" specified TS/JS files one by one.\n   * \n   */\n  configHandlerMgrChanged(cb: (handler: ConfigHandlerMgr) => void): void;\n  // configHandlerMgrCreated(cb: (handler: ConfigHandlerMgr) => Promise<any> | void): Promise<void>;\n}\n\nexport interface ConfigHandler {\n  /**\n   * @param configSetting Override properties from dist/config.yaml, which is also you get from `api.config()`\n   * @param cliOpt (deprecated) Override command line argumemnt for DRCP\n   */\n  onConfig(configSetting: PlinkSettings, cliOpt: CliOptions): void;\n}\n\nexport class ConfigHandlerMgr {\n  private static _tsNodeRegistered = false;\n\n  private static initConfigHandlers(fileAndExports: Iterable<[file: string, exportName: string]>, rootPath: string):\n  Array<{file: string; handler: ConfigHandler}> {\n    const exporteds: Array<{file: string; handler: ConfigHandler}> = [];\n\n    if (!ConfigHandlerMgr._tsNodeRegistered) {\n      ConfigHandlerMgr._tsNodeRegistered = true;\n      require('./utils/ts-node-setup');\n    }\n    for (const [file, exportName] of fileAndExports) {\n      const absFile = Path.isAbsolute(file) ? file : Path.resolve(file);\n      const exp = require(absFile) as {[exportName: string]: any};\n      exporteds.push({file, handler: exp[exportName] ? exp[exportName] : exp});\n    }\n    return exporteds;\n  }\n  protected configHandlers: Array<{file: string; handler: ConfigHandler}>;\n\n  /**\n   * \n   * @param files Array of string which is in form of \"<file>[#<export name>]\"\n   */\n  constructor(fileAndExports0: Iterable<string> | Iterable<[file: string, exportName: string]>) {\n    const first = fileAndExports0[Symbol.iterator]().next();\n    let fileAndExports: Iterable<[file: string, exportName: string]>;\n    if (!first.done && typeof first.value === 'string') {\n      fileAndExports = Array.from(fileAndExports0 as Iterable<string>).map(file => [file, 'default']);\n    } else {\n      fileAndExports = fileAndExports0 as Iterable<[file: string, exportName: string]>;\n    }\n    this.configHandlers = ConfigHandlerMgr.initConfigHandlers(fileAndExports, getRootDir());\n  }\n\n  /**\n\t * \n\t * @param func parameters: (filePath, last returned result, handler function),\n\t * returns the changed result, keep the last result, if resturns undefined\n\t * @returns last result\n\t */\n  async runEach<H>(func: (file: string, lastResult: any, handler: H) => Promise<any> | any, desc?: string) {\n    let lastRes: any;\n    for (const {file, handler} of this.configHandlers) {\n      log.debug(`Read ${desc || 'settings'}:\\n  ` + cyan(file));\n      const currRes = await func(file, lastRes, handler as any as H);\n      if (currRes !== undefined)\n        lastRes = currRes;\n    }\n    return lastRes;\n  }\n\n  runEachSync<H>(func: (file: string, lastResult: any, handler: H) => Promise<any> | any, desc?: string) {\n    let lastRes: any;\n    const cwd = getWorkDir();\n    for (const {file, handler} of this.configHandlers) {\n      log.debug(`Read ${desc || 'settings'}:\\n  ` + cyan(Path.relative(cwd, file)));\n      const currRes = func(file, lastRes, handler as any as H);\n      if (currRes !== undefined)\n        lastRes = currRes;\n    }\n    return lastRes;\n  }\n}\n\n\n"]}