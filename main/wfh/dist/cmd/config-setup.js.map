{"version":3,"file":"config-setup.js","sourceRoot":"","sources":["../../ts/cmd/config-setup.ts"],"names":[],"mappings":"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","sourcesContent":["import fs from 'fs';\nimport Path from 'path';\nimport chalk from 'chalk';\nimport log4js from 'log4js';\nimport _ from 'lodash';\nimport * as packageUtils from '../package-utils';\nimport config from '../config';\nconst jsYaml = require('js-yaml');\nconst log = log4js.getLogger('plink.cliAdvanced');\n\nexport function addupConfigs(onEachYaml: (file: string, configContent: string) => void) {\n  const componentConfigs: {\n    outputPathMap: {[k: string]: string};\n    browserSideConfigProp: string[];\n  } = {outputPathMap: {}, browserSideConfigProp: []};\n  const browserSideConfigProp = componentConfigs.browserSideConfigProp;\n\n  const componentConfigs4Env = {} as Record<string, any>; // key is env:string, value is componentConfigs\n  const trackOutputPath = {}  as Record<string, any>; // For checking conflict\n  for (const pkg of packageUtils.allPackages()) {\n    const {name, json, shortName} = pkg;\n\n    const dr = pkg.json.dr;\n    if (!dr)\n      continue;\n\n    // component customized configuration properties\n    _addupCompConfigProp(componentConfigs, name, browserSideConfigProp, dr.config);\n    _.each(dr, (value, key) => {\n      const m = /^config\\.(.*)$/.exec(key);\n      if (!m)\n        return;\n      const env = m[1];\n      if (!_.has(componentConfigs4Env, env))\n        componentConfigs4Env[env] = {browserSideConfigProp: []};\n      _addupCompConfigProp(componentConfigs4Env[env], name, componentConfigs4Env[env].browserSideConfigProp, value);\n    });\n\n    // outputPath\n    let outputPath = dr.outputPath;\n    if (outputPath == null)\n      outputPath = dr.ngRouterPath;\n    if (outputPath == null)\n      outputPath = _.get(json, 'dr.output.path', shortName);\n\n    if (_.has(trackOutputPath, outputPath) && trackOutputPath[outputPath] !== name) {\n      log.warn(chalk.yellow('[Warning] Conflict package level outputPath setting (aka \"ngRouterPath\" in package.json) \"%s\" for both %s and %s, resolve conflict by adding a config file,'), outputPath, trackOutputPath[outputPath], name);\n      log.warn(chalk.yellow('%s\\'s \"outputPath\" will be changed to %s'), name, shortName);\n      outputPath = shortName;\n    }\n    trackOutputPath[outputPath] = name;\n    componentConfigs.outputPathMap[name] = outputPath;\n  }\n\n  const superConfig = require('../../config.yaml');\n  deeplyMergeJson(superConfig, componentConfigs);\n  if (onEachYaml) {\n    onEachYaml('config.yaml', jsYaml.safeDump(superConfig));\n  }\n  // var res = {'config.yaml': jsYaml.safeDump(superConfig)};\n  _.each(componentConfigs4Env, (configs, env) => {\n    const tmplFile = Path.join(__dirname, '../../templates', 'config.' + env + '-template.yaml');\n    if (fs.existsSync(tmplFile)) {\n      configs = Object.assign(jsYaml.safeLoad(fs.readFileSync(tmplFile, 'utf8'), {filename: tmplFile}), configs);\n    }\n    // res['config.' + env + '.yaml'] = jsYaml.safeDump(configs);\n    if (onEachYaml) {\n      onEachYaml('config.' + env + '.yaml', jsYaml.safeDump(configs));\n    }\n  });\n  // cleanPackagesWalkerCache();\n  config.reload();\n  return Promise.resolve(null);\n}\n\nfunction _addupCompConfigProp(componentConfigs: {[k: string]: any}, compName: string, browserSideConfigProp: string[],\n  configJson: {public: any; server: any}) {\n  if (!configJson)\n    return;\n  // component customized configuration properties\n\n  // JSON.parse(JSON.stringify()) is to clone original object which is\n  // stored in a redux store as immutable state (by immerJS),\n  // I tried lodash clone, but it still keeps \"read only\" protection on object,\n  // so I have to use JSON.parse(JSON.stringify()) instead\n  const componentConfig = JSON.parse(JSON.stringify(configJson.public || {}));\n  deeplyMergeJson(componentConfig, JSON.parse(JSON.stringify(configJson.server)));\n\n  if (_.size(componentConfig) > 0 )\n    componentConfigs[compName] = componentConfig;\n\n  // browserSideConfigProp\n  browserSideConfigProp.push(..._.map(_.keys(configJson.public), key => compName + '.' + key));\n}\n\nfunction deeplyMergeJson(target: {[key: string]: any}, src: any,\n  customizer?: (tValue: any, sValue: any, key: string) => any) {\n  for (const [key, sValue] of Object.entries(src)) {\n    const tValue = target[key];\n    const c = customizer ? customizer(tValue, sValue, key) : undefined;\n    if (c !== undefined)\n      target[key] = c;\n    else if (Array.isArray(tValue) && Array.isArray(sValue))\n      target[key] = _.union(tValue, sValue);\n    else if (_.isObject(tValue) && _.isObject(sValue)) {\n      deeplyMergeJson(tValue, sValue);\n    } else {\n      target[key] = sValue;\n    }\n  }\n}\n"]}