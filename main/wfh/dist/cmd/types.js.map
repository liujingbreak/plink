{"version":3,"file":"types.js","sourceRoot":"","sources":["../../ts/cmd/types.ts"],"names":[],"mappings":"","sourcesContent":["export interface GlobalOptions {\n  /** configure files */\n  config?: string[];\n  prop?: string[];\n  /** set log level to \"debug\" */\n  verbose?: boolean;\n  cwd?: string;\n  /** \n   * By turning on this option, Plink setting property \"devMode\" will automatcially set to `true`,\n   * and process.env.NODE_ENV will also\n   * being updated to 'developement' or 'production correspondingly.\n   * */\n  dev?: boolean;\n  /** Customized environment value, package setting can return different setting values based on this value */\n  env?: string;\n}\n\nexport interface InitCmdOptions extends GlobalOptions {\n  force: boolean;\n  // lintHook: boolean;\n}\nexport interface NpmCliOption {\n  useYarn: boolean;\n  cache?: string;\n  production: boolean;\n  useCi: boolean;\n  offline: boolean;\n}\n\nexport interface LintOptions extends GlobalOptions {\n  pj: string[];\n  fix: boolean;\n}\n\nexport interface BumpOptions extends GlobalOptions {\n  project: string[];\n  increVersion: string;\n}\n\nexport interface PackOptions extends GlobalOptions {\n  dir?: string[];\n  project?: string[];\n  packages?: string[];\n  workspace?: string[];\n  tarDir?: string;\n  /** target package.json file, default package.json files of all available workspace */\n  jsonFile?: string;\n}\n\nexport interface PublishOptions extends PackOptions {\n  public: boolean;\n}\n\nexport interface AnalyzeOptions extends GlobalOptions {\n  dir?: string[];\n  file?: string[];\n  j: boolean;\n  /** Ignore modules that matches regular expression pattern */\n  x?: string;\n  tsconfig?: string;\n  alias: string[];\n}\n\nexport interface OurCommandMetadata {\n  pkgName: string;\n  name: string;\n  alias?: string;\n  desc: string;\n  usage: string;\n  options: OurCommandOption[];\n  argDesc?: {[arg: string]: string};\n}\n\nexport interface OurCommandOption<T = string> {\n  flags: string;\n  desc: string;\n  defaultValue: string | boolean | T[] | T;\n  // isArray: boolean;\n  isRequired: boolean;\n}\n\nexport interface WatchOption {\n  copy?: string;\n  include?: string;\n  a: string[];\n}\n"]}