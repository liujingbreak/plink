{"version":3,"file":"cli.js","sourceRoot":"","sources":["../../ts/cmd/cli.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-argument */\n/// <reference path=\"./cfont.d.ts\" />\n/* eslint-disable max-len */\nimport fs from 'node:fs';\nimport Path from 'node:path';\nimport os from 'node:os';\nimport {spawn} from 'node:child_process';\nimport commander from 'commander';\nimport chalk from 'chalk';\nimport * as op from 'rxjs/operators';\n// import * as tp from './types';\nimport * as _ from 'lodash';\nimport semver from 'semver';\nimport {getLogger} from 'log4js';\nimport * as pkgMgr from '../package-mgr';\n// import '../tsc-packages-slice';\nimport {packages4Workspace} from '../package-mgr/package-list-helper';\nimport {isDrcpSymlink, sexyFont, getRootDir, boxString, plinkEnv} from '../utils/misc';\nimport * as _symlinks from '../utils/symlinks';\nimport {initInjectorForNodePackages} from '../package-runner';\nimport {exitHooks} from '../utils/bootstrap-process';\nimport {CommandOverrider, withCwdOption} from './override-commander';\nimport {hlDesc, arrayOptionFn} from './utils';\n// import {CliOptions as TsconfigCliOptions} from './cli-tsconfig-hook';\nimport * as _cliWatch from './cli-watch';\nconst pk = require('../../../package.json') as {version: string};\n// const WIDTH = 130;\nconst log = getLogger('plink.cli');\n\nexport const cliPackageArgDesc = 'Single or multiple package names, the \"scope\" name part can be omitted,' +\n'if the scope name (the part between \"@\" \"/\") are listed configuration property \"packageScopes\"';\n\nexport async function createCommands(startTime: number) {\n  process.title = 'Plink';\n  // const {stateFactory}: typeof store = require('../store');\n  await import('./cli-slice');\n\n  let cliExtensions: string[] | undefined;\n  const program = new commander.Command('plink')\n    .description(chalk.cyan('A pluggable monorepo and multi-repo management tool'))\n    .action((args: string[]) => {\n    // eslint-disable-next-line no-console\n      console.log(sexyFont('PLink').string);\n      // eslint-disable-next-line no-console\n      console.log(program.helpInformation());\n\n      if (wsState == null) {\n        const wsDirs = [...pkgMgr.getState().workspaces.keys()];\n        if (wsDirs.length > 0) {\n        // eslint-disable-next-line no-console\n          console.log(`More commands are available in worktree space directories: [${wsDirs.map(item => chalk.cyan(item)).join(', ')}]\\n` +\n          `Try commands:\\n${wsDirs.map(dir => '  plink --space ' + dir).join('\\n')}`);\n        }\n      }\n      // eslint-disable-next-line no-console\n      console.log(`\\nversion: ${pk.version} ${isDrcpSymlink ? chalk.yellow('(symlinked)') : ''} `);\n      if (cliExtensions && cliExtensions.length > 0) {\n      // eslint-disable-next-line no-console\n        console.log(`Found ${cliExtensions.length} command line extension` +\n      `${cliExtensions.length > 1 ? 's' : ''}: ${cliExtensions.map(pkg => chalk.blue(pkg)).join(', ')}`);\n      }\n      // eslint-disable-next-line no-console\n      console.log('\\n', chalk.bgRed('Please determine a sub command listed above'));\n      checkPlinkVersion();\n      process.nextTick(() => process.exit(1));\n    });\n  program.addHelpText('before', sexyFont('PLink').string);\n  withCwdOption(program);\n\n  program.version(pk.version, '-v, --vers', 'output the current version');\n  program.addHelpCommand('help [command]', 'show help information, same as \"-h\". ');\n\n  const overrider = new CommandOverrider(program);\n  let wsState: pkgMgr.WorkspaceState | undefined;\n\n  if (process.env.PLINK_SAFE !== 'true') {\n    const {getState: getPkgState, workspaceKey} = require('../package-mgr') as typeof pkgMgr;\n    wsState = getPkgState().workspaces.get(workspaceKey(plinkEnv.workDir));\n    if (wsState != null) {\n      overrider.forPackage(null, program => {\n        overrider.nameStyler = str => chalk.green(str);\n        spaceOnlySubCommands(program);\n        overrider.nameStyler = undefined;\n        subComands(program);\n      });\n    } else {\n      overrider.forPackage(null, subComands);\n    }\n  } else {\n    overrider.forPackage(null, subComands);\n  }\n\n  if (process.env.PLINK_SAFE !== 'true') {\n    overrider.nameStyler = str => chalk.cyan(str);\n    cliExtensions = loadExtensionCommand(program, wsState, overrider);\n    overrider.nameStyler = undefined;\n  } else {\n    // eslint-disable-next-line no-console\n    console.log('Value of environment varaible \"PLINK_SAFE\" is true, skip loading extension');\n  }\n\n  overrider.appendGlobalOptions(false);\n  try {\n    await program.parseAsync(process.argv, {from: 'node'});\n  } catch (e) {\n    log.error('Failed to execute command due to: ' + chalk.redBright((e as Error).message), e);\n    if ((e as Error).stack) {\n      log.error((e as Error).stack);\n    }\n    process.exit(1);\n  }\n}\n\nlet skipVersionCheck = false;\n\nfunction subComands(program: commander.Command) {\n  process.on('beforeExit', () => {\n    if (skipVersionCheck)\n      return;\n    skipVersionCheck = true;\n    if (process.send == null) {\n      // process is not a forked child process\n      checkPlinkVersion();\n    }\n  });\n  /** command init\n   */\n  const initCmd = program.command('init').alias('sync')\n    .description('Initialize and update work directory, generate basic configuration files for project and component packages,' +\n      ' calculate hoisted transitive dependencies, and run \"npm install\" in current directory.' +\n      ' (All NPM config environment variables will affect dependency installation, see https://docs.npmjs.com/cli/v7/using-npm/config#environment-variables)')\n    .argument('[work-directory]', 'A relative or abosolute directory path, use \".\" to determine current directory,\\n  ommitting this argument meaning:\\n' +\n    '  - If current directory is already a \"work directory\", update it.\\n' +\n    '  - If current directory is not a work directory (maybe at repo\\'s root directory), update the latest updated work' +\n    ' directory.')\n    .option('-f, --force', 'Force run \"npm install\" in specific workspace directory, this is not same as npm install option \"-f\" ', false)\n    // .option('--lint-hook, --lh', 'Create a git push hook for code lint', false)\n    .action(async (workspace?: string) => {\n      // eslint-disable-next-line no-console\n      console.log(sexyFont('PLink').string);\n      (await import('./cli-init')).default(initCmd.opts(), workspace);\n    });\n  addNpmInstallOption(initCmd);\n\n  /**\n   * command project\n   */\n  program.command('project [add|remove] [dir...]')\n    .description('Associate, disassociate or list associated project folders, Plink will' +\n      ' scan source code directories from associated projects', {\n      'add|remove': 'Specify whether Associate to a project or Disassociate from a project',\n      dir: 'Specify target project repo directory (absolute path or relative path to current directory)' +\n          ', specify multiple project by seperating them with space character'\n    })\n    .action(async (action: 'add' | 'remove' | undefined, projectDir: string[]) => {\n      // eslint-disable-next-line no-console\n      console.log(sexyFont('PLink').string);\n      await (await import('./cli-project')).default({isSrcDir: false}, action, projectDir);\n    });\n\n  program.command('src [add|remove] [dir...]')\n    .description('Associate, disassociate or list source directories, Plink will' +\n      ' scan source code directories for packages', {\n      'add|remove': 'Specify whether associate to a directory or disassociate from a directory',\n      dir: 'specify multiple directories by seperating them with space character'\n    })\n    .action(async (action: 'add' | 'remove' | undefined, dirs: string[]) => {\n      // eslint-disable-next-line no-console\n      console.log(sexyFont('PLink').string);\n      (await import('./cli-project')).default({isSrcDir: true}, action, dirs);\n    });\n\n  /**\n   * command lint\n   */\n  // const lintCmd = program.command('lint [package...]')\n  //   .description('source code style check', {\n  //     package: cliPackageArgDesc\n  //   })\n  //   .option('--pj <project1,project2...>', 'lint only TS code from specific project', arrayOptionFn, [])\n  //   .option('--fix', 'Run eslint/tslint fix, this could cause your source code being changed unexpectedly', false)\n  //   .action(async packages => {\n  //     await (await import('./cli-lint')).default(packages, lintCmd.opts() as any);\n  //   });\n\n  // lintCmd.usage(lintCmd.usage() +\n  //   hl('\\ndrcp lint --pj <project-dir..> [--fix]') + ' Lint TS files from specific project directory\\n' +\n  //   hl('\\ndrcp lint <component-package..> [--fix]') + ' Lint TS files from specific component packages');\n\n  /**\n   * command clean\n   */\n  program.command('cs').alias('clear-symlinks')\n    .description('Clear symlinks from node_modules')\n    // .option('--only-symlink', 'Clean only symlinks, not dist directory', false)\n    .action(async () => {\n      const scanNodeModules = (require('../utils/symlinks') as typeof _symlinks).default;\n      const editor = await import('../editor-helper');\n      editor.dispatcher.clearSymlinks();\n      await editor.getAction$('clearSymlinksDone').pipe(op.take(1)).toPromise();\n      await scanNodeModules(undefined, 'all');\n    });\n\n  /**\n   * command upgrade\n   */\n  const upgradeCmd = program.command('upgrade')\n    .alias('install')\n    .description('Reinstall local Plink along with other dependencies.' +\n      ' Unlike \"npm install\" which does not work with node_modules that might contain symlinks.' +\n      ' (All NPM config environment variables will affect dependency installation, see https://docs.npmjs.com/cli/v7/using-npm/config#environment-variables)')\n    .action(async () => {\n      skipVersionCheck = true;\n      await (await import('./cli-link-plink')).reinstallWithLinkedPlink(upgradeCmd.opts() );\n    });\n  addNpmInstallOption(upgradeCmd);\n  // program.command('dockerize <workspace-dir>')\n  // .description(chalk.gray('[TBI] Generate Dockerfile for specific workspace directory, and generate docker image'));\n\n  // program.command('pkg <workspace-dir>')\n  // .description(chalk.gray('[TBI] Use Pkg (https://github.com/vercel/pkg) to package Node.js project into an executable '));\n\n  /**\n   * command ls\n   */\n  const listCmd = program.command('ls').alias('list')\n    .option('-j, --json', 'list linked dependencies in form of JSON', false)\n    .option('--hoist', 'list hoisted transitive Dependency information', false)\n    .description('If you want to know how many packages will actually run, this command prints out a list and the priorities, including installed packages')\n    .action(async () => {\n      await (await import('./cli-ls')).default(listCmd.opts() );\n    });\n\n  const addCmd = program.command('add <dependency...>')\n    .description('Add dependency to package.json file, with option \"--dev\" to add as \"devDependencies\", ' +\n      'without option \"--to\" this command adds dependency to current worktree space\\'s package.json file',\n    {\n      dependency: 'dependency package name in form of \"<a linked package name without scope part>\", \"<package name>@<version>\", '\n    })\n    .option('--to <pkg name | worktree dir | pkg dir>', 'add dependency to the package.json of specific linked source package by name or directory, or a worktree space directory')\n    .action(async (packages: string[]) => {\n      await (await import('./cli-add-package')).addDependencyTo(packages, addCmd.opts().to, addCmd.opts().dev);\n    });\n\n  const tsconfigCmd = program.command('tsconfig')\n    .description('List tsconfig.json, jsconfig.json files which will be updated automatically by Plink, (a monorepo means there are node packages which are symlinked from real source code directory' +\n      ', if you have customized tsconfig.json file, this command helps to update \"compilerOptions.paths\" properties)')\n    .option('--hook <file>', 'add tsconfig/jsconfig file to Plink\\'s automatic updating file list', arrayOptionFn, [])\n    .option('--unhook <file>', 'remove tsconfig/jsconfig file from Plink\\'s automatic updating file list', arrayOptionFn, [])\n    .option('--clear,--unhook-all', 'remove all tsconfig files from from Plink\\'s automatic updating file list', false)\n    .action(async () => {\n      (await import('./cli-tsconfig-hook')).doTsconfig(tsconfigCmd.opts() );\n    });\n\n  const exeCmd = program.command('exe')\n    .description(\n      'Execute specific shell/batch under node_module/.bin, ' +\n      'Plink will set environment variable NODE_PRESERVE_SYMLINKS ' +\n      'to \"1\" before start executable (and temporarily remove problematic symlinks from package source directory), ' +\n      'add \"<worktree space or current-dir>node_modules/.bin\" to environment variable PATH'\n    )\n    .argument('<executable>', 'executable shell or batch, e.g. jest')\n    .argument('[arguments...]', 'arguments')\n    .action((executable: string, args: string[]) => {\n      if (process.cwd() !== plinkEnv.workDir) {\n        process.env.PATH = Path.resolve('node_modules/.bin') + Path.delimiter + process.env.PATH;\n      }\n      process.env.PATH = Path.join(plinkEnv.workDir, 'node_modules/.bin') + Path.delimiter + process.env.PATH;\n\n      const cp = spawn(executable, args, {\n        stdio: 'inherit',\n        env: {...process.env, NODE_PRESERVE_SYMLINKS: '1'},\n        shell: os.platform() === 'win32'\n      });\n\n      exitHooks.push(() => new Promise<number | null>(resolve => {\n        cp.once('exit', code => resolve(code));\n      }));\n    });\n\n  exeCmd.usage('[--space <working-dir>] <executable> -- [arguments...]');\n\n  /**\n   * Bump command\n   */\n  const bumpCmd = program.command('bump [package...]')\n    .description('bump package.json version number for specific package, same as \"npm version\" does',\n      {package: cliPackageArgDesc})\n    .option<string[]>('--pj, --project <project-dir,...>', 'only bump component packages from specific project directory',\n    (value, prev) => {\n      prev.push(...value.split(','));\n      return prev;\n    }, [])\n    .option('-i, --incre-version <value>',\n      'version increment, valid values are: major, minor, patch, prerelease', 'patch')\n    .action(async (packages: string[]) => {\n      await (await import('./cli-bump')).default({...bumpCmd.opts(), packages});\n    });\n  // withGlobalOptions(bumpCmd);\n  // bumpCmd.usage(bumpCmd.usage() + '\\n' + hl('plink bump <package> ...') + ' to recursively bump package.json from multiple directories\\n' +\n  //   hl('plink bump <dir> -i minor') + ' to bump minor version number, default is patch number');\n\n  /**\n   * Pack command\n   */\n  const packCmd = program.command('pack [package...]')\n    .description('npm pack pakage into tarball files and change version value from related package.json', {package: cliPackageArgDesc})\n    .option('--dir <package directory>', 'pack packages by specifying directories', arrayOptionFn, [])\n    .option('-w,--workspace <workspace-dir>', 'pack packages which are linked as dependency of specific workspaces',\n      arrayOptionFn, [])\n    .option('--pj, --project <project-dir>',\n      'project directories to be looked up for all packages which need to be packed to tarball files',\n      arrayOptionFn, [])\n    .option('--tar-dir <dir>', 'directory to save tar files', Path.join(getRootDir(), 'tarballs'))\n    .option('--jf, --json-file <pkg-json-file>', 'the package.json file in which \"devDependencies\", \"dependencies\" should to be changed according to packed file, ' +\n      'by default package.json files in all work spaces will be checked and changed')\n    .action(async (packages: string[]) => {\n      await (await import('./cli-pack')).pack({...packCmd.opts(), packages});\n    });\n  // withGlobalOptions(packCmd);\n  packCmd.usage(packCmd.usage() + '\\nBy default, run \"npm pack\" for each linked package which are dependencies of current workspace');\n\n  /**\n   * Pack command\n   */\n  const publishCmd = program.command('publish')\n    .description('run npm publish')\n    .argument('[package...]', cliPackageArgDesc)\n    .option('--dir <package directory>', 'publish packages by specifying directories', arrayOptionFn, [])\n    .option<string[]>('--pj, --project <project-dir,...>',\n    'project directories to be looked up for all packages which need to be packed to tarball files',\n    (value, prev) => {\n      prev.push(...value.split(',')); return prev;\n    }, [] as string[])\n    .option('-w,--workspace <workspace-dir>', 'publish packages which are linked as dependency of specific workspaces',\n      arrayOptionFn, [])\n    .option('--public', 'same as \"npm publish\" command option \"--access public\"', true)\n    .action(async (packages: string[]) => {\n      await (await import('./cli-pack')).publish({...publishCmd.opts(), packages});\n    });\n\n\n  const analysisCmd = program.command('analyze')\n    .alias('analyse')\n    .argument('[package...]', 'the name of target source package, the package must be Plink compliant package, this command will only ' +\n      'scan special \"plink.tsc\" source code directory like \"ts/\" and \"isom/\" of target package')\n    .description('Use Typescript compiler to parse source code, list dependences by DFS algarithm, result information includes' +\n      ': cyclic dependecies, unresolvable dependencies, external dependencies, dependencies are not under target directory.')\n    .option('-x <regexp>', 'Ingore \"module name\" that matches specific Regular Experssion', '\\\\.(less|scss|css)$')\n    .option('-d, --dir <directory>',\n      '(multiple) determine target directory, scan JS/JSX/TS/TSX files under target directory', arrayOptionFn, [])\n    .option('-f, --file <file>',\n      '(multiple) determine target TS/JS(X) files (multiple file with more options \"-f <file> -f <glob>\")', arrayOptionFn, [])\n    .option('-j', 'Show result in JSON', false)\n    .option('--tsconfig <file>', 'Use \"compilerOptions.paths\" property to resolve ts/js file module')\n    .option('--alias <alias-express>', 'multiple JSON express, e.g. --alias \\'\"^@/(.+)$\",\"src/$1\"\\'', arrayOptionFn, [])\n    .action(async (packages: string[]) => {\n      return (await import('./cli-analyze')).default(packages, analysisCmd.opts());\n    });\n\n  analysisCmd.usage(analysisCmd.usage() + '\\n' +\n    'e.g.\\n  ' + chalk.blue('plink analyze -f \"packages/foobar1/**/*\" -f packages/foobar2/ts/main.ts\\n  ' +\n    'plink analyze -d packages/foobar1/src -d packages/foobar2/ts'));\n\n  const watchCmd = program.command('watch')\n    .description('Watch package source file or specific file changes (files referenced in .npmignore will be ignored) and update Plink state, ' +\n  'automatically install transitive dependency')\n    .argument('[package...]', cliPackageArgDesc, [])\n    .option('-a <directory>', 'Use chokidar watch additional directories or files (multiple) for copy, option \"--cp\" must also be presented',\n      (value, prev) => {prev.push(value); return prev; }, [] as string[])\n    .option('--include', 'glob pattern append to \"-a\" option')\n    .option('--cp, --copy <directory>', 'copy package files to specific directory, mimic behavior of \"npm install <pkg>\", but this won\\'t install dependencies')\n    .action((pkgs: string[]) => {\n      const {cliWatch} = require('./cli-watch') as typeof _cliWatch;\n      cliWatch(pkgs, watchCmd.opts());\n    });\n\n  const updateDirCmd = program.command('update-dir')\n    .description('Run this command to sync internal state when whole workspace directory is renamed or moved.\\n' +\n    'Because we store absolute path info of each package in internal state, and it will become invalid after you rename or move directory')\n    .action(async (workspace: string) => {\n      (await import('./cli-ls')).checkDir(updateDirCmd.opts() );\n    });\n}\n\nfunction spaceOnlySubCommands(program: commander.Command) {\n  /**\n   * tsc command\n   */\n  const tscCmd = program.command('tsc [package...]')\n    .description('Run Typescript compiler to compile source code for target packages, ' +\n    'which have been linked to current work directory', {package: cliPackageArgDesc})\n    .option('-w, --watch', 'Typescript compiler watch mode', false)\n    .option('--pj, --project <project-dir,...>', 'Compile only specific project directory', (v, prev) => {\n      prev.push(...v.split(',')); return prev;\n    }, [] as string[])\n    // .option('--ws,--workspace <workspace-dir>', 'only include those linked packages which are dependency of specific workspaces',\n    //   arrayOptionFn, [])\n    .option('--tsx,--jsx', 'includes TSX file', false)\n    .option('--ed, --emitDeclarationOnly', 'Typescript compiler option: --emitDeclarationOnly.\\nOnly emit ‘.d.ts’ declaration files.', false)\n    .option('--source-map <inline|file>', 'Source map style: \"inline\" or \"file\"', 'inline')\n    .option('--merge,--merge-tsconfig <file>', 'Merge compilerOptions \"baseUrl\" and \"paths\" from specified tsconfig file')\n    .option('--copath, --compiler-options-paths <pathMapJson>',\n      'Add more \"paths\" property to compiler options. ' +\n      '(e.g. --copath \\'{\"@/*\":[\"/Users/worker/ocean-ui/src/*\"]}\\')', (v, prev) => {\n        prev.push(...v.split(',')); return prev;\n      }, [] as string[])\n    .option('--co <JSON-string>',\n      `Partial compiler options to be merged (except \"baseUrl\"), \"paths\" must be relative to ${Path.relative(process.cwd(), plinkEnv.workDir) || 'current directory'}`)\n    .action(async (packages: string[]) => {\n      const opt = tscCmd.opts();\n      const tsc = await import('../ts-cmd');\n\n      await tsc.tsc({\n        package: packages,\n        project: opt.project,\n        watch: opt.watch,\n        sourceMap: opt.sourceMap,\n        jsx: opt.jsx,\n        ed: opt.emitDeclarationOnly,\n        pathsJsons: opt.compilerOptionsPaths,\n        mergeTsconfig: opt.mergeTsconfig,\n        compilerOptions: opt.co ? JSON.parse(opt.co) : undefined\n      });\n    });\n\n  tscCmd.usage(tscCmd.usage() +\n    '\\nIt compiles \\n  \"<package-directory>/ts/**/*.ts\" to \"<package-directory>/dist\",\\n' +\n    '  or\\n  \"<package-directory>/isom/**/*.ts\" to \"<package-directory>/isom\"\\n for all @wfh packages.\\n' +\n    'I suggest to put Node.js side TS code in directory `ts`, and isomorphic TS code (meaning it runs in ' +\n    'both Node.js and Browser) in directory `isom`.\\n\\n' +\n    hlDesc('plink tsc\\n') + ' Compile linked packages that are dependencies of current workspace (you shall run this command only in a workspace directory)\\n' +\n    hlDesc('plink tsc <package..>\\n') + ' Only compile specific packages by providing package name or short name\\n' +\n    hlDesc('plink tsc [package...] -w\\n') + ' Watch packages change and compile when new typescript file is changed or created\\n\\n');\n\n  program.command('setting [package]')\n    .description('List packages setting and values', {package: 'package name, only list setting for specific package'})\n    .action(async (pkgName: string) => {\n      (await import('./cli-setting')).default(pkgName);\n    });\n  /** command run*/\n  const runCmd = program.command('run <target> [arguments...]')\n    .description('Run specific module\\'s exported function\\n')\n    .action(async (target: string, args: string[]) => {\n      await (await import('../package-runner')).runSinglePackage({target, args});\n    });\n\n  runCmd.usage(runCmd.usage() + '\\n' + chalk.green('plink run <target> [arguments...]\\n') +\n    `e.g.\\n  ${chalk.green('plink run ../packages/forbar-package/dist/file.js#function argument1 argument2...')}\\n` +\n    'execute exported function of TS/JS file from specific package or path\\n\\n' +\n    '<target> - JS or TS file module path which can be resolved by Node.js (ts-node) followed by \"#\" and exported function name,\\n');\n  // 'e.g. \\n' +\n  // chalk.green('package-name/dist/foobar.js#myFunction') +\n  // ', function can be async which returns Promise\\n' +\n  // chalk.green('node_modules/package-dir/dist/foobar.ts#myFunction') +\n  // ', relative or absolute path\\n');\n}\n\nfunction loadExtensionCommand(program: commander.Command, ws: pkgMgr.WorkspaceState | undefined, overrider: CommandOverrider): string[] {\n  if (ws == null)\n    return [];\n  initInjectorForNodePackages();\n  const availables: string[] = [];\n  for (const pk of packages4Workspace()) {\n    const dr = pk.json.dr || pk.json.plink;\n    if (dr == null || dr.cli == null)\n      continue;\n    const [pkgFilePath, funcName] = (dr.cli as string).split('#');\n\n    availables.push(pk.name);\n\n    try {\n      overrider.forPackage(pk, pkgFilePath, funcName);\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      log.warn(`Failed to load command line extension in package ${pk.name}: \"${(e as Error).message}\"`, e);\n    }\n  }\n  return availables;\n}\n\nfunction addNpmInstallOption(cmd: commander.Command) {\n  cmd.option('--yarn, --use-yarn', 'Use Yarn instead of NPM to install dependencies', false)\n    .option('--cache <npm-cache>', 'same as npm install option \"--cache\"')\n    .option('--ci, --use-ci', 'Use \"npm ci\" instead of \"npm install\" to install dependencies; when \"--useYarn\" is on, add argument \"--immutable\"', false)\n    .option('--prune', 'Run \"npm prune\" after installation')\n    .option('--ddp, --dedupe', 'Run \"npm dedupe\" after installation')\n  // .option('--offline', 'same as npm option \"--offline\" during executing npm install/ci ', false)\n  // .option('--yarn', 'Use Yarn to install component peer dependencies instead of using NPM', false)\n    .option('--production', 'Add \"--production\" or \"--only=prod\" command line argument to \"yarn/npm install\"', false);\n}\n\nfunction checkPlinkVersion() {\n  const pkjson = Path.resolve(getRootDir(), 'package.json');\n  if (fs.existsSync(pkjson)) {\n    const json = JSON.parse(fs.readFileSync(pkjson, 'utf8')) as {dependencies?: {[p: string]: string | undefined}; devDependencies?: {[p: string]: string | undefined}};\n    let depVer = json.dependencies && json.dependencies['@wfh/plink'] ||\n      json.devDependencies && json.devDependencies['@wfh/plink'];\n    if (depVer == null) {\n      // eslint-disable-next-line no-console\n      console.log(boxString('Don\\'t forget to add @wfh/plink in package.json as dependencies'));\n      return;\n    }\n    if (depVer.endsWith('.tgz')) {\n      const matched = /-(\\d+\\.\\d+\\.[^]+?)\\.tgz$/.exec(depVer);\n      if (matched == null)\n        return;\n      depVer = matched[1];\n    }\n    if (depVer && !semver.satisfies(pk.version, depVer)) {\n      // eslint-disable-next-line no-console\n      console.log(boxString(`Local installed Plink version ${chalk.cyan(pk.version)} does not match dependency version ${chalk.green(depVer)} in package.json, ` +\n        `run command \"${chalk.green('plink upgrade')}\" to upgrade or downgrade to expected version`));\n    }\n  }\n}\n\n"]}