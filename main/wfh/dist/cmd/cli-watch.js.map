{"version":3,"file":"cli-watch.js","sourceRoot":"","sources":["../../ts/cmd/cli-watch.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Path from 'path';\nimport fs from 'fs';\nimport {getLogger} from 'log4js';\nimport * as op from 'rxjs/operators';\nimport * as rx from 'rxjs';\nimport chokidar from 'chokidar';\nimport {mkdirpSync} from 'fs-extra';\nimport anymatch from 'anymatch';\nimport {actionDispatcher} from '../package-mgr';\nimport {findPackagesByNames} from './utils';\nimport {WatchOption} from './types';\n\nconst log = getLogger('plink.cli');\n\nexport function cliWatch(packages: string[], opt: WatchOption) {\n  let hasUnlinkEvent = false;\n  let changedPkgJson = [] as string[];\n  const pkgs = [...findPackagesByNames(packages)];\n\n  const deletePkgMsg = new rx.Subject<string>();\n\n  rx.from(pkgs).pipe(\n    op.filter((pkg, idx) => {\n      if (pkg == null) {\n        log.info(`Can not find source package of: ${packages[idx]}`);\n        return false;\n      }\n      return true;\n    }),\n    op.mergeMap((pkg, _idx) => {\n      return new rx.Observable<'change' | 'unlink'>(sub => {\n        // log.info(pkg.realPath);\n        const pkgJsonFile = Path.resolve(pkg!.realPath, 'package.json');\n        const watcher = chokidar.watch(pkgJsonFile);\n        log.info('watching', pkgJsonFile);\n\n        watcher.on('change', path => {\n          log.info(path, 'changed');\n          // if (path === pkgJsonFile) {\n            changedPkgJson.push(path);\n            sub.next('change');\n          // }\n        });\n\n        watcher.on('unlink', path => {\n          // if (path === pkgJsonFile) {\n            hasUnlinkEvent = true;\n            changedPkgJson.splice(0);\n            deletePkgMsg.next(pkg!.name);\n            sub.next('unlink');\n          // }\n        });\n        return () => watcher.close();\n      });\n    }),\n    op.debounceTime(300),\n    op.map(() => {\n      if (hasUnlinkEvent) {\n        hasUnlinkEvent = false;\n        actionDispatcher.scanAndSyncPackages({});\n      } else {\n        const files = changedPkgJson;\n        changedPkgJson = [];\n        log.info(files);\n        actionDispatcher.scanAndSyncPackages({packageJsonFiles: files});\n      }\n    })\n  ).subscribe();\n\n  if (opt.copy) {\n    mkdirpSync(opt.copy);\n    // const copyTo = Path.resolve(opt.copy);\n    rx.from(pkgs).pipe(\n      op.filter(pkg => pkg != null),\n      op.mergeMap((pkg) => {\n        const npmIgnore = Path.resolve(pkg!.realPath, '.npmignore');\n        return (fs.existsSync(npmIgnore) ?\n          rx.from(fs.promises.readFile(npmIgnore, 'utf-8')) :\n          rx.of('')\n        ).pipe(\n          op.switchMap(content => new rx.Observable<[string, string]>((sub) => {\n            function matchNpmIgnore(relativePath: string) {\n              let matched = false;\n              for (const line of content.split(/\\n\\r?/)) {\n                if (line.trim().length === 0)\n                  continue;\n                if (!line.startsWith('!')) {\n                  if (anymatch([line], relativePath))\n                    matched = true;\n                } else if (matched && anymatch([line.slice(1)], relativePath)) {\n                  // If pattern begins with ! and matched previous pattern, and now it matches the remainder part of pattern\n                  matched = false;\n                }\n              }\n              return matched;\n            }\n\n            const watcher = chokidar.watch(pkg!.realPath);\n\n            watcher.on('add', path => {\n              const relPath = Path.relative(pkg!.realPath, path).replace(/\\\\/g, '/');\n              if ( !matchNpmIgnore('/' + relPath) && !matchNpmIgnore(relPath)) {\n                sub.next([path, Path.join(pkg!.name, relPath)]);\n              }\n            });\n            watcher.on('change', path => {\n              const relPath = Path.relative(pkg!.realPath, path).replace(/\\\\/g, '/');\n              if ( !matchNpmIgnore('/' + relPath) && !matchNpmIgnore(relPath)) {\n                sub.next([path, Path.join(pkg!.name, relPath)]);\n              }\n            });\n            return () => watcher.close();\n          })),\n          op.takeUntil(deletePkgMsg.pipe(op.filter(pkgName => pkgName === pkg!.name)))\n        );\n      }),\n      op.mergeMap(([srcFile, relPath]) => {\n        const target = Path.resolve(opt.copy!, relPath);\n        log.info('copy', srcFile, 'to\\n ', target);\n        mkdirpSync(Path.dirname(target));\n        return fs.promises.copyFile(srcFile, target);\n      })\n    ).subscribe();\n\n    if (opt.a && opt.a.length > 0) {\n      log.info('additional watches:', opt.a);\n      rx.from(opt.a).pipe(\n        op.mergeMap(source => new rx.Observable<[from: string, to: string]>(sub => {\n          const watcher = chokidar.watch(opt.include ? Path.posix.join(source.replace(/\\\\/g, '/'), opt.include) : source);\n\n          watcher.on('add', path => {\n            const relative = Path.relative(source, path);\n            log.info('chokidar add', relative);\n            sub.next([path, Path.join(opt.copy!, relative)]);\n          });\n          watcher.on('change', path => {\n            const relative = Path.relative(source, path);\n            log.info('chokidar change', relative);\n            sub.next([path, Path.join(opt.copy!, relative)]);\n          });\n          return () => watcher.close();\n        })),\n        op.mergeMap(([srcFile, target]) => {\n          log.info('copy', srcFile, 'to\\n ', target);\n          mkdirpSync(Path.dirname(target));\n          return fs.promises.copyFile(srcFile, target);\n        })\n      ).subscribe();\n    }\n  }\n}\n"]}