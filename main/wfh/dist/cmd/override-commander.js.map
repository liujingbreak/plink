{"version":3,"file":"override-commander.js","sourceRoot":"","sources":["../../src/cmd/override-commander.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-assignment,  @typescript-eslint/no-unsafe-return */\nimport Path from 'path';\nimport commander from 'commander';\nimport chalk from 'chalk';\nimport log4js from 'log4js';\nimport stripAnsi from 'strip-ansi';\nimport {WorkspaceState, PackageInfo, getState} from '../package-mgr';\nimport * as _bootstrap from '../utils/bootstrap-process';\nimport {plinkEnv} from '../utils/misc';\nimport {arrayOptionFn} from './utils';\nimport { OurCommandMetadata } from './types';\nimport {cliActionDispatcher} from './cli-slice';\nexport {commander};\n\nconst log = log4js.getLogger('plink.override-commander');\n\ninterface CommandContext {\n  currClieCreatorFile: string;\n  currCliCreatorPkg: PackageInfo | null;\n  metaMap: WeakMap<PlinkCommand, Partial<OurCommandMetadata>>;\n  currCliPkgMataInfos: OurCommandMetadata[];\n  nameStyler?: (cmdName: string) => string;\n}\n\nexport class PlinkCommandHelp extends commander.Help {\n  subcommandTerm(cmd: commander.Command): string {\n    const str = super.subcommandTerm(cmd);\n    if (cmd instanceof PlinkCommand && cmd.nameStyler) {\n      return cmd.nameStyler(str);\n    }\n    return str;\n  }\n\n  optionTerm(option: PlinkCmdOption) {\n    return option.optionStyler ? option.optionStyler(option.flags) : option.flags;\n  }\n\n  private longestSubcommandTermLengthForReal(cmd: commander.Command, helper: PlinkCommandHelp) {\n    return helper.visibleCommands(cmd).reduce((max, command) => {\n      return Math.max(max, stripAnsi(helper.subcommandTerm(command)).length);\n    }, 0);\n  }\n\n  private longestOptionTermLengthForReal(cmd: commander.Command, helper: PlinkCommandHelp) {\n    return helper.visibleOptions(cmd).reduce((max, option) => {\n      return Math.max(max, stripAnsi(helper.optionTerm(option)).length);\n    }, 0);\n  }\n\n  // subcommandDescription(cmd: commander.Command) {\n  //   return stripAnsi(super.subcommandDescription(cmd));\n  // }\n\n  private realPadWidth(cmd: commander.Command, helper: PlinkCommandHelp) {\n    return Math.max(\n      helper.longestOptionTermLengthForReal(cmd, helper),\n      helper.longestSubcommandTermLengthForReal(cmd, helper),\n      helper.longestArgumentTermLength(cmd, helper)\n    );\n  }\n\n  formatHelp(cmd: commander.Command, helper: PlinkCommandHelp) {\n    // const termWidth = helper.padWidth(cmd, helper); // It is bigger than actual width due to colorful character\n    const realTermWidth = helper.realPadWidth(cmd, helper);\n    // console.log('termWidth=', termWidth);\n    const helpWidth = helper.helpWidth || 80;\n    const itemIndentWidth = 2;\n    const itemSeparatorWidth = 2; // between term and description\n    function formatItem(term: string, description: string, styler?: PlinkCommand['nameStyler']) {\n      if (description) {\n        if (description) {\n          const fullText = `${term}${' '.repeat(realTermWidth + itemIndentWidth - stripAnsi(term).length)}${description}`;\n          return helper.wrap(fullText, helpWidth - itemIndentWidth, realTermWidth + itemSeparatorWidth);\n        }\n        return term;\n        // Support colorful characters\n        // const fullText = `${term}${' '.repeat(realTermWidth + itemIndentWidth - stripAnsi(term).length)}${description}`;\n        // return helper.wrap(fullText, helpWidth - itemIndentWidth, realTermWidth + itemSeparatorWidth);\n      }\n      return term;\n    }\n    function formatList(textArray: string[]) {\n      return textArray.join('\\n').replace(/^/gm, ' '.repeat(itemIndentWidth));\n    }\n\n    // Usage\n    let output = [`Usage: ${helper.commandUsage(cmd)}`, ''];\n\n    // Description\n    const commandDescription = helper.commandDescription(cmd);\n    if (commandDescription.length > 0) {\n      output = output.concat([commandDescription, '']);\n    }\n\n    // Arguments\n    const argumentList = helper.visibleArguments(cmd).map((argument) => {\n      return formatItem(helper.argumentTerm(argument), helper.argumentDescription(argument));\n    });\n    if (argumentList.length > 0) {\n      output = output.concat(['Arguments:', formatList(argumentList), '']);\n    }\n\n    // Options\n    const optionList = helper.visibleOptions(cmd).map((option) => {\n      return formatItem(helper.optionTerm(option), helper.optionDescription(option), (option as PlinkCmdOption).optionStyler);\n    });\n    if (optionList.length > 0) {\n      output = output.concat(['Options:', formatList(optionList), '']);\n    }\n\n    // Commands\n    let pkgName = '';\n    const commandList = helper.visibleCommands(cmd).map((cmd) => {\n      let header = '';\n      if (pkgName !== (cmd as PlinkCommand).pkgName) {\n        pkgName = (cmd as PlinkCommand).pkgName;\n        header = pkgName ? `\\n${chalk.inverse(chalk.gray('Provided by package ' + pkgName + ': '))}\\n` :\n          '\\n';\n      }\n      pkgName = (cmd as PlinkCommand).pkgName;\n      return header + formatItem(helper.subcommandTerm(cmd), helper.subcommandDescription(cmd), (cmd as PlinkCommand).nameStyler);\n    });\n    if (commandList.length > 0) {\n      output = output.concat(['Commands:', formatList(commandList), '']);\n    }\n\n    return output.join('\\n');\n  }\n}\n/**\n * Extend commander, check commander API at https://www.npmjs.com/package/commander\n */\nexport class PlinkCommand extends commander.Command {\n  nameStyler?: (cmdName: string) => string;\n  optionStyler?: (cmdName: string) => string;\n  subCmds: PlinkCommand[] = [];\n  /** value is file path for pkg name */\n  loadedCmdMap = new Map<string, string>();\n  pkgName = '';\n\n  constructor(public ctx: CommandContext, name?: string) {\n    super(name);\n  }\n\n  addGlobalOptionsToSubCmds() {\n    if (this.subCmds == null)\n      return;\n    for (const subCmd of this.subCmds) {\n      withGlobalOptions(subCmd);\n    }\n  }\n\n  createCommand(cmdName?: string): commander.Command {\n    const pk = this.ctx.currCliCreatorPkg;\n    const filePath = this.ctx.currClieCreatorFile;\n    if (cmdName && cmdName !== 'help') {\n      if (this.loadedCmdMap.has(cmdName)) {\n        if (filePath)\n          throw new Error(`Conflict command name \"${cmdName}\" from extensions \"${filePath}\" and \"${this.loadedCmdMap.get(cmdName)!}\"`);\n        else\n          throw new Error(`Conflict with existing Plink command name ${cmdName}`);\n      }\n      this.loadedCmdMap.set(cmdName, filePath ? filePath : '@wfh/plink');\n    }\n\n    const subCmd = new PlinkCommand(this.ctx, cmdName);\n    subCmd.nameStyler = this.ctx.nameStyler;\n    subCmd.pkgName = pk != null ? pk.name : '';\n    this.subCmds.push(subCmd);\n\n    // subCmd.setContextData(this.currClieCreatorFile, this.currCliCreatorPkg, this.metaMap, this);\n\n    const meta: Partial<OurCommandMetadata> = {\n      pkgName: pk ? pk.name : '@wfh/plink',\n      name: cmdName,\n      options: [],\n      desc: ''\n    };\n    this.ctx.metaMap.set(subCmd, meta);\n    this.ctx.currCliPkgMataInfos.push(meta as OurCommandMetadata);\n    // subCmd.description(meta.desc!);\n    return subCmd;\n  }\n\n  description(str?: string,\n    argsDescription?: { [argName: string]: string }) {\n    if (str !== undefined) {\n      const plinkMeta = this.ctx.metaMap.get(this)!;\n      plinkMeta.desc = str;\n      if (argsDescription) {\n        plinkMeta.argDesc = argsDescription;\n      }\n      return argsDescription ? super.description(str, argsDescription) : super.description(str);\n    }\n    return super.description() as any;\n  }\n\n  alias(alias?: string) {\n    if (alias) {\n      const plinkMeta = this.ctx.metaMap.get(this)!;\n      plinkMeta.alias = alias;\n    }\n    return super.alias(alias as any) as any;\n  }\n\n  createOption(flags: string, description?: string, ...remaining: any[]) {\n    let defaultValue: any;\n    if (remaining.length > 1) {\n      defaultValue = remaining[remaining.length - 1];\n    }\n    const plinkMeta = this.ctx.metaMap.get(this)!;\n    plinkMeta.options!.push({\n      flags, desc: description || '', defaultValue, isRequired: false\n    });\n    const opt = new PlinkCmdOption(flags, description);\n    opt.optionStyler = this.optionStyler;\n    return opt;\n  }\n  option(...args: any[]) {\n    (this._saveOptions as any)(false, ...args);\n    return (super.option as any)(...args);\n  }\n  requiredOption(...args: any[]) {\n    (this._saveOptions as any)(true, ...args);\n    return (super.requiredOption as any)(...args);\n  }\n  action(fn: (...args: any[]) => void | Promise<void>) {\n    function actionCallback(this: commander.Command, ...args: any[]) {\n      try {\n        const {initConfig} = require('../utils/bootstrap-process') as typeof _bootstrap;\n        initConfig(this.opts() );\n        return fn.apply(this, args);\n      } catch (e) {\n        log.error(e);\n      }\n    }\n    return super.action(actionCallback);\n  }\n  createHelp() {\n    return Object.assign(new PlinkCommandHelp(), this.configureHelp());\n  }\n  _saveOptions(isRequired: boolean, flags: string, desc: string, ...remaining: any[]) {\n    let defaultValue: any;\n    if (remaining.length > 1) {\n      defaultValue = remaining[remaining.length - 1];\n    }\n    const plinkMeta = this.ctx.metaMap.get(this)!;\n    plinkMeta.options!.push({\n      flags, desc, defaultValue, isRequired\n    });\n  }\n}\n\nexport type CliExtension = (program: PlinkCommand) => void;\n\nclass PlinkCmdOption extends commander.Option {\n  optionStyler?: (cmdName: string) => string;\n}\nexport class CommandOverrider {\n  private pkgMetasMap = new Map<string, OurCommandMetadata[]>();\n  private ctx: Partial<CommandContext> = {\n    metaMap: new WeakMap<commander.Command, Partial<OurCommandMetadata>>()\n  };\n\n  set nameStyler(v: PlinkCommand['nameStyler']) {\n    this.ctx.nameStyler = v;\n  }\n\n  constructor(private program: commander.Command, ws?: WorkspaceState) {\n    this.program.createCommand = PlinkCommand.prototype.createCommand;\n\n    (this.program as PlinkCommand).ctx = this.ctx as CommandContext;\n    (this.program as PlinkCommand).subCmds = [];\n    (this.program as PlinkCommand).loadedCmdMap = new Map();\n    (this.program as PlinkCommand).addGlobalOptionsToSubCmds = PlinkCommand.prototype.addGlobalOptionsToSubCmds;\n    this.program.createHelp = PlinkCommand.prototype.createHelp;\n  }\n\n  forPackage(pk: PackageInfo, pkgFilePath: string, funcName: string): void;\n  forPackage(pk: null, commandCreation: (program: commander.Command) => void): void;\n  forPackage(pk: PackageInfo | null,\n    pkgFilePath: string | ((program: commander.Command) => void),\n    funcName?: string) {\n    const commandMetaInfos: OurCommandMetadata[] = this.ctx.currCliPkgMataInfos = [];\n    this.ctx.currCliCreatorPkg = pk;\n\n    let filePath: string | null = null;\n\n    if (typeof pkgFilePath === 'function') {\n      pkgFilePath(this.program);\n      this.pkgMetasMap.set('@wfh/plink', commandMetaInfos);\n    } else if (pk) {\n      try {\n        filePath = Path.resolve(plinkEnv.workDir, 'node_modules', pk.name + '/' + pkgFilePath);\n        this.ctx.currClieCreatorFile = filePath;\n        const subCmdFactory: CliExtension = funcName ? require(filePath)[funcName] :\n          require(filePath);\n        subCmdFactory(this.program as PlinkCommand);\n        this.pkgMetasMap.set(pk.name, commandMetaInfos);\n      } catch (e) {\n        // eslint-disable-next-line no-console\n        log.warn(`Failed to load command line extension in package ${pk.name}: \"${(e as Error).message }\"`, e);\n      } finally {\n        filePath = null;\n      }\n    }\n    this.ctx.currCliCreatorPkg = null;\n  }\n\n  appendGlobalOptions(saveToStore: boolean) {\n    (this.program as PlinkCommand).addGlobalOptionsToSubCmds();\n    // for (const cmd of this.allSubCmds) {\n    //   withGlobalOptions(cmd);\n    // }\n    if (!saveToStore)\n      return;\n    process.nextTick(() => {\n      for (const [pkg, metas] of this.pkgMetasMap.entries()) {\n        cliActionDispatcher.addCommandMeta({pkg, metas});\n      }\n    });\n  }\n}\n\nexport function withCwdOption(cmd: commander.Command): commander.Command {\n  if (cmd instanceof PlinkCommand)\n    cmd.optionStyler = str => chalk.gray(str);\n\n  const cmdObj = cmd.option('--space,--cwd <working dir>', 'Run command in a different worktree directory: [' +\n    [...getState().workspaces.keys()].join(', ') + ']');\n\n  if (cmd instanceof PlinkCommand)\n    cmd.optionStyler = undefined;\n  return cmdObj;\n}\n\nexport function withGlobalOptions(cmd: commander.Command | PlinkCommand): commander.Command {\n  if (getState().workspaces == null)\n    // eslint-disable-next-line no-console\n    console.log(getState());\n  withCwdOption(cmd);\n\n  if (cmd instanceof PlinkCommand)\n    cmd.optionStyler = str => chalk.gray(str);\n  (cmd.option as commander.Command['option'])('-c, --config <config-file>',\n    'Read config files, if there are multiple files, the latter one overrides previous one',\n    (value, prev) => {\n      prev.push(...value.split(','));\n      return prev;\n      // return prev.concat(value.split(','));\n    }, [] as string[]);\n\n  (cmd.option as commander.Command['option'])('--prop <expression>',\n    '<property path>=<value as JSON | literal> ... directly set configuration properties, property name is lodash.set() path-like string. e.g. ' +\n    '--prop port=8080 --prop devMode=false --prop @wfh/foobar.api=http://localhost:8080 ' +\n    '--prop arraylike.prop[0]=foobar ' +\n    '--prop [\"@wfh/foo.bar\",\"prop\",0]=true',\n    arrayOptionFn, [] as string[])\n  .option('--verbose', 'Specify log level as \"debug\"', false)\n  .option('--dev', 'By turning on this option,' +\n    ' Plink setting property \"devMode\" will automatcially set to `true`,' +\n    ' and process.env.NODE_ENV will also being updated to \\'developement\\' or \\'production correspondingly. ',\n    false)\n  .option('--env <setting environment>', 'A string denotes runtime environment name, package setting file may return different values based on its value (cliOptions.env)');\n  if (cmd instanceof PlinkCommand)\n    cmd.optionStyler = undefined;\n  return cmd;\n}\n"]}