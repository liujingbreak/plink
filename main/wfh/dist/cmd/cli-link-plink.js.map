{"version":3,"file":"cli-link-plink.js","sourceRoot":"","sources":["../../ts/cmd/cli-link-plink.ts"],"names":[],"mappings":";;;;AAAA,+DAA+D;AAC/D,wDAAwB;AACxB,oDAAoB;AACpB,wCAAyC;AACzC,gDAAsD;AAEtD;;;GAGG;AACI,KAAK,UAAU,wBAAwB,CAAC,GAAiB;IAC9D,MAAM,OAAO,GAAG,IAAA,iBAAU,GAAE,CAAC;IAE7B,MAAM,UAAU,GAAG,cAAI,CAAC,OAAO,CAAC,OAAO,EAAE,cAAc,CAAC,CAAC;IACzD,MAAM,aAAa,GAAG,YAAE,CAAC,YAAY,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;IAC1D,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,CAA8C,CAAC;IACtF,MAAM,aAAa,GAAG,IAAA,sBAAQ,GAAE,CAAC,UAAU,IAAI,IAAI,CAAC;IAEpD,MAAM,UAAU,GAAG,IAAA,sBAAQ,GAAE,CAAC,WAAW,CAAC;IAE1C,IAAI,MAAM,CAAC,YAAY,EAAE;QACvB,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE;YAClD,IAAI,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;gBACvB,OAAO,MAAM,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;aACjC;SACF;QACD,IAAI,aAAa;YACf,OAAO,MAAM,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;KAC5C;IACD,IAAI,MAAM,CAAC,eAAe,EAAE;QAC1B,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,EAAE;YACrD,IAAI,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;gBACvB,OAAO,MAAM,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;aACpC;SACF;QACD,IAAI,aAAa;YACf,OAAO,MAAM,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC;KAC/C;IACD,MAAM,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;IAC/C,sCAAsC;IACtC,OAAO,CAAC,GAAG,CAAC,4BAA4B,EAAE,GAAG,CAAC,CAAC;IAC/C,MAAM,IAAA,0BAAY,EAAC,OAAO,EAAE,EAAC,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,CAAC,KAAK;QAC3D,OAAO,EAAE,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,GAAG,CAAC,KAAK,EAAE,OAAO,EAAE,GAAG,CAAC,OAAO,EAAC,EAAE,aAAa,EAAE,GAAG,CAAC,CAAC;AAC1F,CAAC;AAjCD,4DAiCC","sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-member-access */\nimport Path from 'path';\nimport fs from 'fs';\nimport {getRootDir} from '../utils/misc';\nimport {getState, installInDir} from '../package-mgr';\nimport {NpmCliOption} from './types';\n/**\n * \n * @return a function to write the original package.json file back\n */\nexport async function reinstallWithLinkedPlink(opt: NpmCliOption) {\n  const rootDir = getRootDir();\n\n  const pkjsonFile = Path.resolve(rootDir, 'package.json');\n  const origPkJsonStr = fs.readFileSync(pkjsonFile, 'utf8');\n  const pkJson = JSON.parse(origPkJsonStr) as {dependencies: any; devDependencies: any};\n  const isPlinkLinked = getState().linkedDrcp != null;\n\n  const linkedPkgs = getState().srcPackages;\n\n  if (pkJson.dependencies) {\n    for (const dep of Object.keys(pkJson.dependencies)) {\n      if (linkedPkgs.has(dep)) {\n        delete pkJson.dependencies[dep];\n      }\n    }\n    if (isPlinkLinked)\n      delete pkJson.dependencies['@wfh/plink'];\n  }\n  if (pkJson.devDependencies) {\n    for (const dep of Object.keys(pkJson.devDependencies)) {\n      if (linkedPkgs.has(dep)) {\n        delete pkJson.devDependencies[dep];\n      }\n    }\n    if (isPlinkLinked)\n      delete pkJson.devDependencies['@wfh/plink'];\n  }\n  const str = JSON.stringify(pkJson, null, '  ');\n  // eslint-disable-next-line no-console\n  console.log('Install with package.json:', str);\n  await installInDir(rootDir, {isForce: false, cache: opt.cache,\n    useYarn: opt.useYarn, useNpmCi: opt.useCi, offline: opt.offline}, origPkJsonStr, str);\n}\n"]}