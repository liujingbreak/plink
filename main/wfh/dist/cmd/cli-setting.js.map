{"version":3,"file":"cli-setting.js","sourceRoot":"","sources":["../../ts/cmd/cli-setting.ts"],"names":[],"mappings":"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","sourcesContent":["// eslint-disable  max-len, no-console\nimport * as util from 'util';\nimport Path from 'path';\nimport * as op from 'rxjs/operators';\nimport chalk from 'chalk';\nimport {getLogger} from 'log4js';\nimport config from '../config/index';\nimport {dispatcher, getStore, getState} from '../config/config-view-slice';\nimport {workspaceKey, PackageInfo} from '../package-mgr';\nimport {createCliTable, plinkEnv} from '../utils/misc';\nimport {findPackagesByNames, completePackageName} from './utils';\n\nconst log = getLogger('plink.cli-setting');\n\nexport default function(pkgName?: string) {\n  const wskey = workspaceKey(plinkEnv.workDir);\n  if (pkgName) {\n    const foundPkgName = Array.from(completePackageName([pkgName]))[0];\n    if (foundPkgName == null) {\n      throw new Error(`Package of name \"${pkgName}\" does not exist`);\n    }\n    pkgName = foundPkgName;\n  }\n  getStore().pipe(\n    op.map(s => s.updateChecksum), op.distinctUntilChanged(),\n    op.skip(1), op.take(1),\n    // op.concatMap(() => getPkgStore().pipe(\n    //   op.map(s => s.srcPackages),\n    //   op.distinctUntilChanged(),\n    //   op.filter(pkgs => pkgs != null && pkgs.size > 0),\n    //   op.take(1)\n    // )),\n    op.tap(() => {\n      const state = getState();\n      const setting = config();\n\n      if (pkgName) {\n        const [pkg] = Array.from(findPackagesByNames([pkgName]));\n        printPackage(pkg!);\n      } else {\n        const pkgs = Array.from(findPackagesByNames(state.packageNames!));\n\n        for (let i = 0, l = pkgs.length ; i < l; i++) {\n          const pkg = pkgs[i];\n          const name = state.packageNames![i];\n          if (pkg == null) {\n            log.error(`Can not found package installed or linked for name: ${name}`);\n            continue;\n          }\n          printPackage(pkg);\n        }\n      }\n      const tbl = createCliTable();\n      tbl.push(['Complete setting values:']);\n      // eslint-disable-next-line no-console\n      console.log(tbl.toString());\n      // eslint-disable-next-line no-console\n      console.log(util.inspect(setting, false, 5));\n    })\n  ).subscribe();\n  dispatcher.loadPackageSettingMeta({workspaceKey: wskey, packageName: pkgName});\n}\n\n// function printPackageInFormOfTable(pkgName: string) {\n//   const state = getState();\n//   const meta = state.packageMetaByName.get(pkgName);\n//   if (meta == null) {\n// eslint-disable-next-line , no-console\n//     console.log('No setting found for package ' + pkgName);\n//     return;\n//   }\n//   const table = createCliTable({horizontalLines: false, colWidths: [null, null], colAligns: ['right', 'left']});\n//   table.push(\n// eslint-disable-next-line max-len\n//     [{colSpan: 2, content: `Package ${chalk.green(pkgName)} setting ${chalk.gray('| ' + meta.typeFile)}`, hAlign: 'center'}],\n//     ['PROPERTY', 'TYPE AND DESCIPTION'].map(item => chalk.gray(item)),\n//     ['------', '-------'].map(item => chalk.gray(item))\n//   );\n//   // const valuesForPkg = pkgName === '@wfh/plink' ? setting : setting[pkgName];\n//   for (const prop of meta.properties) {\n//     const propMeta = state.propertyByName.get(pkgName + ',' + prop)!;\n//     table.push([\n//       chalk.cyan(propMeta.property),\n//       (propMeta.optional ? chalk.gray('(optional) ') : '') + chalk.magenta(propMeta.type) +\n//         (propMeta.desc ? ' - ' + propMeta.desc : '')\n//       // JSON.stringify(valuesForPkg[propMeta.property], null, '  ')\n//     ]);\n//   }\n/* eslint-disable no-console */\n//   console.log(table.toString());\n// }\n\nfunction printPackage({name: pkgName, realPath}: PackageInfo) {\n  const state = getState();\n  const meta = state.packageMetaByName.get(pkgName);\n  if (meta == null) {\n    // eslint-disable-next-line no-console\n    console.log('No setting found for package ' + pkgName);\n    return;\n  }\n\n  const tbl = createCliTable({horizontalLines: false});\n\n  tbl.push([`Package ${chalk.green(pkgName)} setting ${'| ' + chalk.gray(Path.relative(plinkEnv.workDir, realPath))}`],\n    [`  ${chalk.gray(meta.typeFile)}`]);\n  // console.log(`Package ${chalk.green(pkgName)} setting ${chalk.gray('| ' + meta.typeFile)}`);\n  console.log(tbl.toString());\n\n  for (const prop of meta.properties) {\n    const propMeta = state.propertyByName.get(pkgName + ',' + prop)!;\n    console.log('   ' + chalk.cyan(propMeta.property) + ': ' +\n      (propMeta.optional ? chalk.gray('(optional) ') : '') + chalk.magenta(propMeta.type.replace(/\\n/g, '\\n  ')));\n    // console.log('    ' + (propMeta.optional ? chalk.gray('  (optional) ') : '  ') + chalk.magenta(propMeta.type));\n    if (propMeta.desc)\n      console.log('      - ' + propMeta.desc.trim().replace(/\\n/g, '\\n      '));\n  }\n}\n"]}