{"version":3,"file":"cli-analyse-worker.js","sourceRoot":"","sources":["../../ts/cmd/cli-analyse-worker.ts"],"names":[],"mappings":"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","sourcesContent":["import 'source-map-support/register';\n\nimport Path from 'path';\nimport fs from 'fs';\nimport Module from 'module';\nimport ts from 'typescript';\nimport Query from '../utils/ts-ast-query';\n// import {EOL as eol} from 'os';\nimport {DFS} from '../utils/graph';\nimport {jsonToCompilerOptions} from '../ts-compiler';\n// import {setTsCompilerOptForNodePath} from '../package-mgr/package-list-helper';\nimport {initAsChildProcess, initConfig} from '../utils/bootstrap-process';\nimport {initInjectorForNodePackages} from '../package-runner';\nimport {webInjector} from '../injector-factory';\nimport {closestCommonParentDir, plinkEnv} from '../utils/misc';\nimport {mergeBaseUrlAndPaths, RequiredCompilerOptions, parseConfigFileToJson} from '../ts-cmd-util';\nimport {log4File} from '../logger';\n\nconst NODE_MODULE_SET = new Set(Module.builtinModules);\n\nlet coJson: RequiredCompilerOptions;\n// setTsCompilerOptForNodePath(plinkEnv.workDir, './', coJson, {workspaceDir: plinkEnv.workDir});\nlet co: ts.CompilerOptions | undefined;\nlet resCache: ts.ModuleResolutionCache;\nlet host: ts.CompilerHost;\ninitAsChildProcess();\ninitConfig(JSON.parse(process.env.PLINK_CLI_OPTS!));\ninitInjectorForNodePackages();\nconst log = log4File(__filename);\nexport class Context {\n  commonDir: string;\n  /** traversed files */\n  topSortedFiles: string[] = [];\n  ignorePkgName: string | undefined;\n\n  constructor(\n    commonDir: string,\n    public alias: [reg: RegExp, replaceTo: string][],\n    public ignorePattern?: RegExp,\n    public relativeDepsOutSideDir: Set<string> = new Set(),\n    public cyclic: string[] = [],\n    public canNotResolve: {\n      target: string;\n      file: string;\n      pos: string;\n      reasone: string;\n    }[] = [],\n    public externalDeps: Set<string> = new Set(),\n    public nodeModuleDeps: Set<string> = new Set(),\n    public matchAlias: Set<string> = new Set()\n  ) {\n    this.commonDir = commonDir.endsWith(Path.sep) ? commonDir : commonDir + Path.sep;\n  }\n\n  toPlainObject() {\n    return {\n      commonDir: this.commonDir.slice(0, -1), // trim last Path.sep\n      relativeDepsOutSideDir: Array.from(this.relativeDepsOutSideDir.values()),\n      cyclic: this.cyclic,\n      canNotResolve: this.canNotResolve,\n      externalDeps: Array.from(this.externalDeps.values()),\n      nodeModuleDeps: Array.from(this.nodeModuleDeps.values()),\n      matchAlias: Array.from(this.matchAlias.values()),\n      files: this.topSortedFiles\n    };\n  }\n}\n\nexport function dfsTraverseFiles(files: string[], tsconfigFile: string | null | undefined,\n  alias: [reg: string, replaceTo: string][], ignore?: string): ReturnType<Context['toPlainObject']> {\n  init(tsconfigFile);\n  const commonParentDir = (files.length === 1) ? Path.dirname(files[0]) : closestCommonParentDir(files);\n  const context = new Context(commonParentDir, alias.map(item => [new RegExp(item[0]), item[1]]),\n    ignore ? new RegExp(ignore) : undefined);\n\n  // in case the file is in under directory node_modules, all relative path will be resolved to packageId,\n  const resolved = ts.resolveModuleName('./' + Path.parse(files[0]).name, files[0], co!, host, resCache).resolvedModule;\n  context.ignorePkgName = resolved?.packageId?.name;\n\n  const dfs: DFS<string> = new DFS<string>(file => {\n    const content = webInjector.injectToFile(file, fs.readFileSync(file, 'utf8'));\n    const q = new Query(content, file);\n    log.debug('Lookup file', Path.relative(plinkEnv.workDir, file));\n    return parseFile(q, file, context);\n  }, vertex => {\n    log.debug('Finished file', Path.relative(plinkEnv.workDir, vertex.data));\n    context.topSortedFiles.push(vertex.data);\n  });\n  log.info('scan files\\n', files);\n  dfs.visit(files);\n  const cwd = plinkEnv.workDir;\n  if (dfs.backEdges.length > 0) {\n    for (const edges of dfs.backEdges) {\n      // log.info(`Found cyclic file dependency ${dfs.printCyclicBackEdge(edges[0], edges[1])}`);\n      context.cyclic.push(dfs.printCyclicBackEdge(edges[0], edges[1])\n        .map(path => Path.relative(cwd, path)).join('\\n -> ')\n      );\n    }\n  }\n  return context.toPlainObject();\n}\n\n/**\n * \n * @param tsconfigFile all compilerOptions.paths setting will be adopted in resolving files\n */\nfunction init(tsconfigFile?: string | null) {\n  if (coJson != null)\n    return;\n\n  const baseTsconfigFile = Path.resolve(__dirname, '../../tsconfig-tsx.json');\n\n  const baseTscfg = parseConfigFileToJson(ts, baseTsconfigFile);\n\n  coJson = baseTscfg.compilerOptions;\n  if (tsconfigFile) {\n    mergeBaseUrlAndPaths(ts, tsconfigFile, plinkEnv.workDir, coJson);\n  }\n  coJson.allowJs = true;\n  coJson.resolveJsonModule = true;\n  log.debug('tsconfig', baseTscfg);\n  co = jsonToCompilerOptions(coJson, baseTsconfigFile, plinkEnv.workDir);\n  resCache = ts.createModuleResolutionCache(plinkEnv.workDir, fileName => fileName, co);\n  host = ts.createCompilerHost(co);\n}\n\nfunction parseFile(q: Query, file: string, ctx: Context) {\n  const deps: string[] = [];\n\n  q.walkAst(q.src, [\n    {\n      query: '.moduleSpecifier:StringLiteral', // Both :ExportDeclaration or :ImportDeclaration\n      callback(ast) {\n        const dep = resolve((ast as ts.StringLiteral).getText(), file, ctx, ast.getStart(), q.src);\n        if (dep)\n          deps.push(dep);\n      }\n    },\n    {\n      query: ':PropertyAssignment>.name',\n      callback(ast, _path, _parents) {\n        if (ast.getText() === 'loadChildren') {\n          const value = (ast.parent as ts.PropertyAssignment).initializer;\n          if (value.kind === ts.SyntaxKind.StringLiteral) {\n            const lazyModule = (value as ts.StringLiteral).text;\n            const hashTag = lazyModule.indexOf('#');\n            if (hashTag > 0) {\n              // We found lazy route module\n              // eslint-disable-next-line no-console\n              log.debug('lazy route module:', lazyModule);\n              const dep = resolve(lazyModule.slice(0, hashTag), file, ctx, ast.getStart(), q.src);\n              if (dep)\n                deps.push(dep);\n            }\n          }\n        }\n      }\n    },\n    {\n      query: ':CallExpression>.expression:ImportKeyword',\n      callback(ast, _path) {\n        const dep = resolve(((ast.parent as ts.CallExpression).arguments[0] as ts.StringLiteral).text, file,\n          ctx, ast.getStart(), q.src);\n        if (dep)\n          deps.push(dep);\n      }\n    },\n    {\n      query: ':CallExpression',\n      callback(ast, _path) {\n        const node = ast as ts.CallExpression ;\n        if (node.expression.kind === ts.SyntaxKind.Identifier &&\n          (node.expression as ts.Identifier).text === 'require' &&\n          node.arguments[0].kind === ts.SyntaxKind.StringLiteral) {\n          const dep = resolve((node.arguments[0] as ts.StringLiteral).text, file, ctx, ast.getStart(), q.src);\n          if (dep)\n            deps.push(dep);\n        }\n      }\n    }\n  ]);\n  return deps;\n}\n\nconst PKG_NAME_PAT = /^(?:@[^/]+\\/)?[^/]+/;\n\nfunction resolve(path: string, file: string, ctx: Context, pos: number, src: ts.SourceFile): string | null {\n  if (path.startsWith('`')) {\n    const lineInfo = ts.getLineAndCharacterOfPosition(src, pos);\n    ctx.canNotResolve.push({\n      target: path,\n      file,\n      pos: `line:${lineInfo.line + 1}, col:${lineInfo.character + 1}`,\n      reasone: 'dynamic value'\n    });\n    // eslint-disable-next-line max-len\n    // log.info(`[cli-analysie-worker] can not resolve dynamic value ${path} in ${file} @${lineInfo.line + 1}:${lineInfo.character + 1}`);\n    return null;\n  }\n  if (path.startsWith('\"') || path.startsWith('\\''))\n    path = path.slice(1, -1);\n\n  if (ctx.ignorePattern?.test(path)) {\n    return null;\n  }\n\n  for (const [reg, replaceTo] of ctx.alias) {\n    const replaced = path.replace(reg, replaceTo);\n    if (path !== replaced) {\n      ctx.matchAlias.add(path);\n      path = replaced;\n      break;\n    }\n  }\n\n  if (NODE_MODULE_SET.has(path)) {\n    ctx.nodeModuleDeps.add(path);\n    return null;\n  }\n\n  let resolved = ts.resolveModuleName(path, file, co!, host, resCache).resolvedModule;\n  if (resolved == null) {\n    [path + '/index', path + '.js', path + '.jsx', path + '/index.js', path + '/index.jsx']\n      .some(tryPath => {\n        log.debug(`For path \"${path}\", try path:`, tryPath);\n        resolved = ts.resolveModuleName(tryPath, file, co!, host, resCache).resolvedModule;\n        return resolved != null;\n      });\n  }\n\n  // if (path.startsWith('.') || Path.isAbsolute(path)) {\n  if (resolved == null) {\n    if (!path.startsWith('.') && !Path.isAbsolute(path)) {\n      const m = PKG_NAME_PAT.exec(path);\n      const pkgName = m ? m[0] : path;\n      if (NODE_MODULE_SET.has(pkgName))\n        ctx.nodeModuleDeps.add(pkgName);\n      else\n        ctx.externalDeps.add(pkgName);\n      return null;\n    }\n    const lineInfo = ts.getLineAndCharacterOfPosition(src, pos);\n    ctx.canNotResolve.push({\n      target: path,\n      file,\n      pos: `line:${lineInfo.line + 1}, col:${lineInfo.character + 1}`,\n      reasone: 'Typescript failed to resolve'\n    });\n    return null;\n  } else {\n    if (resolved.isExternalLibraryImport && resolved.packageId && resolved.packageId.name !== ctx.ignorePkgName) {\n      const pkgName = resolved.packageId.name;\n      if (NODE_MODULE_SET.has(pkgName))\n        ctx.nodeModuleDeps.add(pkgName);\n      else\n        ctx.externalDeps.add(pkgName);\n      return null;\n    }\n    const absPath = Path.resolve(resolved.resolvedFileName);\n    if (!absPath.startsWith(ctx.commonDir)) {\n      ctx.relativeDepsOutSideDir.add(Path.relative(plinkEnv.workDir, absPath));\n    }\n    log.debug('resolved to', absPath);\n    return absPath;\n  }\n}\n\n\n"]}