{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/cmd/utils.ts"],"names":[],"mappings":";;;;;;AAAA,kDAA0B;AAC1B,wDAA0B;AAC1B,gDAAwB;AAExB,gDAAyF;AACzF,wCAAuC;AAMvC,QAAe,CAAC,CAAC,mBAAmB,CAAC,KAAuC,EAAE,aAAgC;IAC5G,KAAK,MAAM,GAAG,IAAI,mBAAmB,CAAC,KAAsB,EAAE,aAAiC,CAAC,EAAE;QAChG,IAAI,GAAG,EAAE;YACP,MAAM,GAAG,CAAC,IAAI,CAAC;SAChB;aAAM;YACL,MAAM,IAAI,CAAC;SACZ;KACF;AACH,CAAC;AARD,kDAQC;AAOD,QAAe,CAAC,CAAC,mBAAmB,CAAC,KAAuC,EAAE,aAAgC;IAE5G,IAAI,aAAa,KAAK,SAAS,EAAE;QAC/B,aAAa,GAAG,KAAiB,CAAC;QAClC,KAAK,GAAG,IAAA,sBAAQ,GAAE,CAAC;KACpB;IACD,MAAM,MAAM,GAAmB,OAAO,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC;IAE5D,MAAM,QAAQ,GAAG,CAAC,EAAE,EAAE,GAAG,MAAM,EAAE,CAAC,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,KAAK,GAAG,CAAC,CAAC,CAAC;IAC5E,MAAM,SAAS,GAAI,KAAuB,CAAC,WAAW,CAAC;IACvD,KAAK,MAAM,EAAE,IAAI,aAAa,EAAE;QAC9B,IAAI,KAAK,GAAG,KAAK,CAAC;QAClB,KAAK,MAAM,MAAM,IAAI,QAAQ,EAAE;YAC7B,MAAM,IAAI,GAAG,MAAM,GAAG,EAAE,CAAC;YACzB,IAAI,IAAI,KAAK,YAAY,IAAK,KAAuB,CAAC,UAAU,EAAE;gBAChE,MAAO,KAAuB,CAAC,UAAU,CAAC;gBAC1C,KAAK,GAAG,IAAI,CAAC;gBACb,MAAM;aACP;YACD,MAAM,GAAG,GAAG,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YAChC,IAAI,GAAG,EAAE;gBACP,MAAM,GAAG,CAAC;gBACV,KAAK,GAAG,IAAI,CAAC;gBACb,MAAM;aACP;iBAAM;gBACL,MAAM,UAAU,GAAG,iBAAiB,CAAC,EAAE,CAAC,CAAC;gBACzC,IAAI,UAAU,EAAE;oBACd,MAAM,IAAA,+BAAiB,EAAC,UAAU,EAAE,IAAI,CAAC,CAAC;oBAC1C,KAAK,GAAG,IAAI,CAAC;oBACb,MAAM;iBACP;aACF;SACF;QAED,IAAI,CAAC,KAAK,EAAE;YACV,MAAM,IAAI,CAAC;SACZ;KACF;AACH,CAAC;AAtCD,kDAsCC;AAED;;;GAGG;AACH,SAAgB,iBAAiB,CAAC,UAAkB;IAClD,KAAK,MAAM,CAAC,IAAI,CAAC,eAAQ,CAAC,OAAO,EAAE,eAAQ,CAAC,OAAO,CAAC,EAAE;QACpD,MAAM,IAAI,GAAG,cAAI,CAAC,OAAO,CAAC,CAAC,EAAE,eAAQ,CAAC,cAAc,EAAE,UAAU,EAAE,cAAc,CAAC,CAAC;QAClF,IAAI,kBAAE,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;YACvB,OAAO,IAAI,CAAC;SACb;KACF;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AARD,8CAQC;AAED,SAAgB,EAAE,CAAC,IAAY;IAC7B,OAAO,eAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AAC3B,CAAC;AAFD,gBAEC;AAED,SAAgB,MAAM,CAAC,IAAY;IACjC,OAAO,eAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC1B,CAAC;AAFD,wBAEC;AAED,SAAgB,aAAa,CAAC,IAAY,EAAE,IAA0B;IACpE,IAAI,IAAI;QACN,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAClB,OAAO,IAAI,CAAC;AACd,CAAC;AAJD,sCAIC","sourcesContent":["import chalk from 'chalk';\nimport fs from 'fs-extra';\nimport Path from 'path';\nimport _config from '../config';\nimport { createPackageInfo, PackageInfo, PackagesState, getState } from '../package-mgr';\nimport {plinkEnv} from '../utils/misc';\n\nexport function completePackageName(guessingNames: Iterable<string>):\n  Generator<string | null, void, unknown>;\nexport function completePackageName(state: PackagesState, guessingNames: Iterable<string>):\n  Generator<string | null, void, unknown>;\nexport function* completePackageName(state: PackagesState | Iterable<string>, guessingNames?: Iterable<string>) {\n  for (const pkg of findPackagesByNames(state as PackagesState, guessingNames as Iterable<string>)) {\n    if (pkg) {\n      yield pkg.name;\n    } else {\n      yield null;\n    }\n  }\n}\n\n/** Use package-utils.ts#lookForPackages() */\nexport function findPackagesByNames(guessingNames: Iterable<string>):\n  Generator<PackageInfo | null | undefined>;\nexport function findPackagesByNames(state: PackagesState, guessingNames: Iterable<string>):\n  Generator<PackageInfo | null | undefined>;\nexport function* findPackagesByNames(state: PackagesState | Iterable<string>, guessingNames?: Iterable<string>):\n  Generator<PackageInfo | null | undefined> {\n  if (guessingNames === undefined) {\n    guessingNames = state as string[];\n    state = getState();\n  }\n  const config: typeof _config = require('../config').default;\n\n  const prefixes = ['', ...config().packageScopes.map(scope => `@${scope}/`)];\n  const available = (state as PackagesState).srcPackages;\n  for (const gn of guessingNames) {\n    let found = false;\n    for (const prefix of prefixes) {\n      const name = prefix + gn;\n      if (name === '@wfh/plink' && (state as PackagesState).linkedDrcp) {\n        yield (state as PackagesState).linkedDrcp;\n        found = true;\n        break;\n      }\n      const pkg = available.get(name);\n      if (pkg) {\n        yield pkg;\n        found = true;\n        break;\n      } else {\n        const pkjsonFile = lookupPackageJson(gn);\n        if (pkjsonFile) {\n          yield createPackageInfo(pkjsonFile, true);\n          found = true;\n          break;\n        }\n      }\n    }\n\n    if (!found) {\n      yield null;\n    }\n  }\n}\n\n/**\n * Look up package.json file in environment variable NODE_PATH \n * @param moduleName \n */\nexport function lookupPackageJson(moduleName: string) {\n  for (const p of [plinkEnv.workDir, plinkEnv.rootDir]) {\n    const test = Path.resolve(p, plinkEnv.symlinkDirName, moduleName, 'package.json');\n    if (fs.existsSync(test)) {\n      return test;\n    }\n  }\n  return null;\n}\n\nexport function hl(text: string) {\n  return chalk.green(text);\n}\n\nexport function hlDesc(text: string) {\n  return chalk.gray(text);\n}\n\nexport function arrayOptionFn(curr: string, prev: string[] | undefined) {\n  if (prev)\n    prev.push(curr);\n  return prev;\n}\n"]}