{"version":3,"file":"cli-tsconfig-hook.js","sourceRoot":"","sources":["../../src/cmd/cli-tsconfig-hook.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,gDAAwB;AACxB,mDAAqC;AACrC,oDAAsD;AACtD,oCAAoC;AACpC,wCAAyC;AACzC,oCAA8D;AAQ9D,SAAgB,UAAU,CAAC,IAAgB;IACzC,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;QACrC,kBAAsB,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;QAClD,0BAAU,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACpC;IACD,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;QACzC,kBAAsB,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;QAClD,0BAAU,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KACxC;IACD,IAAI,IAAI,CAAC,SAAS,EAAE;QAClB,kBAAsB,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;QAClD,0BAAU,CAAC,SAAS,EAAE,CAAC;KACxB;IACD,IAAA,wBAAQ,GAAE,CAAC,IAAI,CACb,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,iBAAiB,CAAC,EAChC,EAAE,CAAC,oBAAoB,EAAE,EACzB,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;QAChB,IAAI,KAAK,CAAC,IAAI,GAAG,CAAC,EAAE;YAClB,OAAO,IAAI,CAAC;SACb;QACD,sCAAsC;QACtC,OAAO,CAAC,GAAG,CAAC,qEAAqE,CAAC,CAAC;QACnF,OAAO,KAAK,CAAC;IACf,CAAC,CAAC,EACF,EAAE,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,mFAAmF;IACvG,EAAE,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;QACf,sCAAsC;QACtC,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;QACtC,KAAK,MAAM,IAAI,IAAI,KAAK,CAAC,MAAM,EAAE,EAAE;YACjC,sCAAsC;YACtC,OAAO,CAAC,GAAG,CAAC,IAAI,GAAG,cAAI,CAAC,OAAO,CAAC,IAAA,iBAAU,GAAE,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;SAC9D;IACH,CAAC,CAAC,CACH,CAAC,SAAS,EAAE,CAAC;AAChB,CAAC;AAlCD,gCAkCC","sourcesContent":["import Path from 'path';\nimport * as op from 'rxjs/operators';\nimport {getStore, dispatcher} from '../editor-helper';\n// import {getLogger} from 'log4js';\nimport {getRootDir} from '../utils/misc';\nimport {dispatcher as storeSettingDispatcher} from '../store';\n\nexport interface CliOptions {\n  hook: string[];\n  unhook: string[];\n  unhookAll: boolean;\n}\n\nexport function doTsconfig(opts: CliOptions) {\n  if (opts.hook && opts.hook.length > 0) {\n    storeSettingDispatcher.changeActionOnExit('save');\n    dispatcher.hookTsconfig(opts.hook);\n  }\n  if (opts.unhook && opts.unhook.length > 0) {\n    storeSettingDispatcher.changeActionOnExit('save');\n    dispatcher.unHookTsconfig(opts.unhook);\n  }\n  if (opts.unhookAll) {\n    storeSettingDispatcher.changeActionOnExit('save');\n    dispatcher.unHookAll();\n  }\n  getStore().pipe(\n    op.map(s => s.tsconfigByRelPath),\n    op.distinctUntilChanged(),\n    op.filter(datas => {\n      if (datas.size > 0) {\n        return true;\n      }\n      // eslint-disable-next-line no-console\n      console.log('No hooked files found, hook file by command options \"--hook <file>\"');\n      return false;\n    }),\n    op.debounceTime(0), // There will be two change events happening, let's get the last change result only\n    op.tap((datas) => {\n      // eslint-disable-next-line no-console\n      console.log('Hooked tsconfig files:');\n      for (const data of datas.values()) {\n        // eslint-disable-next-line no-console\n        console.log('  ' + Path.resolve(getRootDir(), data.relPath));\n      }\n    })\n  ).subscribe();\n}\n"]}