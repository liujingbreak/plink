{"version":3,"file":"recipe-manager.js","sourceRoot":"","sources":["../ts/recipe-manager.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable max-len */\n/**\n * To avoid cyclic referecing, This file should not depends on package-mgr/index !!!\n */\nimport * as _ from 'lodash';\nimport * as Path from 'path';\nimport {from, Observable} from 'rxjs';\nimport * as fs from 'fs-extra';\nimport findPackageJson from './package-mgr/find-package';\n// import * as rwPackageJson from './rwPackageJson';\nimport {map, mergeMap} from 'rxjs/operators';\n\nlet projectList: string[] = [];\nlet linkPatterns: string[] = [];\n\nexport function setProjectList(list: string[]) {\n  projectList = list;\n}\n\nexport function setLinkPatterns(list: Iterable<string>) {\n  linkPatterns = Array.from(list);\n}\n\nexport type EachRecipeSrcCallback = (srcDir: string, projectDir: string) => void;\n/**\n * @deprecated\n * Use allSrcDirs() instead.\n * Iterate src folder for component items\n * @param {string | string[]} projectDir optional, if not present or null, includes all project src folders\n * @param  {Function} callback (srcDir, recipeDir, recipeName): void\n */\nexport function eachRecipeSrc(callback: EachRecipeSrcCallback): void;\nexport function eachRecipeSrc(projectDir: string, callback: EachRecipeSrcCallback): void;\nexport function eachRecipeSrc(projectDir: string | EachRecipeSrcCallback,\n  callback?: EachRecipeSrcCallback): void {\n  if (arguments.length === 1) {\n    callback = arguments[0];\n    forProject(projectList);\n  } else if (arguments.length === 2) {\n    if (typeof projectDir === 'string' || Array.isArray(projectDir)) {\n      forProject(projectDir);\n    } else {\n      forProject(projectList);\n    }\n  }\n\n  function forProject(prjDirs: string[] | string) {\n    ([] as string[]).concat(prjDirs).forEach(prjDir => {\n      for (const srcDir of srcDirsOfProject(prjDir)) {\n        callback!(srcDir, prjDir);\n      }\n      // const e2eDir = Path.join(prjDir, 'e2etest');\n      // if (fs.existsSync(e2eDir))\n      //   callback!(e2eDir, prjDir);\n    });\n  }\n}\n\nexport function* allSrcDirs() {\n  for (const projDir of projectList) {\n    for (const srcDir of srcDirsOfProject(projDir)) {\n      yield {srcDir, projDir};\n    }\n  }\n  for (let pat of linkPatterns) {\n    if (pat.endsWith('/**'))\n      pat = pat.slice(0, -3);\n    else if (pat.endsWith('/*'))\n      pat = pat.slice(0, -2);\n    pat = _.trimStart(pat, '.');\n    yield {srcDir: pat};\n  }\n}\n\nfunction* srcDirsOfProject(projectDir: string) {\n  const srcRecipeMapFile = Path.resolve(projectDir, 'dr.recipes.json');\n  const pkJsonFile = Path.resolve(projectDir, 'package.json');\n  // const recipeSrcMapping: {[recipe: string]: string} = {};\n  let nameSrcSetting: {[key: string]: string} = {};\n\n  let normalizedPrjName = Path.resolve(projectDir).replace(/[\\/\\\\]/g, '.');\n  normalizedPrjName = _.trim(normalizedPrjName, '.');\n  if (fs.existsSync(pkJsonFile)) {\n    const pkjson = JSON.parse(fs.readFileSync(pkJsonFile, 'utf8'));\n    if (pkjson.packages) {\n      for (let pat of ([] as string[]).concat(pkjson.packages)) {\n        if (pat.endsWith('/**'))\n          pat = pat.slice(0, -3);\n        else if (pat.endsWith('/*'))\n          pat = pat.slice(0, -2);\n        pat = _.trimStart(pat, '.');\n        yield Path.resolve(projectDir, pat);\n        // nameSrcSetting[config.resolve(\n        //   'destDir', `recipes/${pkjson.name}${pat.length > 0 ? '.' : ''}${pat.replace(/[\\/\\\\]/g, '.')}.recipe`)] =\n        //     Path.resolve(projectDir, pat);\n      }\n      return;\n    }\n  }\n  if (fs.existsSync(srcRecipeMapFile)) {\n    // legacy: read dr.recipes.json\n    nameSrcSetting = JSON.parse(fs.readFileSync(srcRecipeMapFile, 'utf8'));\n  } else {\n    const projectName = fs.existsSync(pkJsonFile) ? require(pkJsonFile).name : Path.basename(projectDir);\n    if (fs.existsSync(Path.join(projectDir, 'src'))) {\n      nameSrcSetting['recipes/' + projectName] = 'src';\n    } else {\n      const testSrcDir = Path.join(projectDir, 'app');\n      if (fs.existsSync(testSrcDir) && fs.statSync(testSrcDir).isDirectory())\n        nameSrcSetting['recipes/' + projectName] = 'app';\n      else\n        nameSrcSetting['recipes/' + projectName] = '.';\n    }\n  }\n  for (const srcDir of Object.values(nameSrcSetting)) {\n    yield srcDir;\n  }\n  return;\n}\n\nexport type EachRecipeCallback = (recipeDir: string,\n  isFromInstallation: boolean,\n  jsonFileName: string,\n  jsonFileContent: string) => void;\n\n/**\n * @returns Observable of tuple [project, package.json file]\n */\nexport function scanPackages(): Observable<[string | undefined, string, string]> {\n  return from(allSrcDirs()).pipe(\n    mergeMap(({srcDir, projDir}) => findPackageJson(srcDir, false).pipe(\n      map(jsonFile => [projDir, jsonFile, srcDir] as [string | undefined, string, string])\n    ))\n  );\n}\n"]}