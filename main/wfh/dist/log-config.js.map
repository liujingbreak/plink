{"version":3,"file":"log-config.js","sourceRoot":"","sources":["../ts/log-config.ts"],"names":[],"mappings":";;;AAAA,6BAA6B;AAC7B,wDAAwB;AACxB,wEAAmC;AACnC,gEAA0B;AAC1B,4DAA4B;AAC5B,+DAAiF;AAEjF,iCAAiC;AACjC,MAAM,GAAG,GAAG,gBAAM,CAAC,SAAS,CAAC,kBAAkB,CAAC,CAAC;AAEjD,mBAAwB,SAAwB;IAC9C,MAAM,EAAC,QAAQ,EAAC,GAAG,SAAS,CAAC;IAC7B,GAAG,CAAC,IAAI,CAAC,wBAAwB,EAAE,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC9D,MAAM,YAAY,GAAG,cAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;IACtD,IAAI,CAAC,kBAAE,CAAC,UAAU,CAAC,YAAY,CAAC,EAAE;QAChC,GAAG,CAAC,IAAI,CAAC,uCAAuC,EAAE,YAAY,CAAC,CAAC;QAChE,OAAO;KACR;IACD,kBAAE,CAAC,UAAU,CAAC,cAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC;IAE9C,IAAI;QACF,IAAI,YAAY,GAAG,OAAO,CAAC,YAAY,CAA6E,CAAC;QACrH,IAAI,YAAY,CAAC,KAAK,YAAY,QAAQ,EAAE;YAC1C,YAAY,GAAG,YAAY,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;SAC9C;QACD,qDAAqD;QACrD,IAAI,sBAAO,CAAC,QAAQ,EAAE;YACpB,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,EAAE;gBACrD,IAAI,YAAY,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,IAAI,KAAK,gBAAgB;oBACvD,SAAS;gBACX,YAAY,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,EAAC,IAAI,EAAE,oCAAiB,EAAE,IAAI,EAAE,gBAAgB,EAAC,CAAC;aACjF;SACF;aAAM,IAAI,OAAO,CAAC,GAAG,CAAC,iBAAiB,KAAK,OAAO,CAAC,GAAG,GAAG,EAAE,IAAI,OAAO,CAAC,IAAI,EAAE;YAE7E,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,EAAE;gBACrD,IAAI,YAAY,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,IAAI,KAAK,gBAAgB;oBACvD,SAAS;gBACX,YAAY,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,EAAC,IAAI,EAAE,uCAAoB,EAAE,IAAI,EAAE,gBAAgB,EAAC,CAAC;aACpF;SACF;QACD,gBAAM,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;QAC/B,GAAG,CAAC,IAAI,CAAC,WAAW,OAAO,CAAC,GAAG,mBAAmB,IAAI,IAAI,EAAE,CAAC,cAAc,EAAE,qBAAqB,CAAC,CAAC;KACrG;IAAC,OAAO,CAAC,EAAE;QACV,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;KACd;AACH,CAAC;AAnCD,4BAmCC","sourcesContent":["// eslint-disable  no-console\nimport Path from 'path';\nimport cluster from 'node:cluster';\nimport fs from 'fs-extra';\nimport log4js from 'log4js';\nimport {childProcessAppender, doNothingAppender} from './utils/log4js-appenders';\nimport {PlinkSettings} from './config-handler';\n// import config from './config';\nconst log = log4js.getLogger('plink.log-config');\n\nexport default function(configObj: PlinkSettings) {\n  const {rootPath} = configObj;\n  log.info('[log-config] log4js at', require.resolve('log4js'));\n  const log4jsConfig = Path.join(rootPath, 'log4js.js');\n  if (!fs.existsSync(log4jsConfig)) {\n    log.info('Logging configuration is not found %s', log4jsConfig);\n    return;\n  }\n  fs.mkdirpSync(Path.resolve(rootPath, 'logs'));\n\n  try {\n    let localSetting = require(log4jsConfig) as (log4js.Configuration & {setup?: (config: any) => log4js.Configuration});\n    if (localSetting.setup instanceof Function) {\n      localSetting = localSetting.setup(configObj);\n    }\n    // Same logic as bootstrap-process#configDefaultLog()\n    if (cluster.isWorker) {\n      for (const key of Object.keys(localSetting.appenders)) {\n        if (localSetting.appenders[key].type === 'logLevelFilter')\n          continue;\n        localSetting.appenders[key] = {type: doNothingAppender, name: 'ignore cluster'};\n      }\n    } else if (process.env.__plinkLogMainPid !== process.pid + '' && process.send) {\n\n      for (const key of Object.keys(localSetting.appenders)) {\n        if (localSetting.appenders[key].type === 'logLevelFilter')\n          continue;\n        localSetting.appenders[key] = {type: childProcessAppender, name: 'send to parent'};\n      }\n    }\n    log4js.configure(localSetting);\n    log.info(`\\n\\nPID:${process.pid} -------------- ${new Date().toLocaleString()} ----------------\\n`);\n  } catch (e) {\n    log.error(e);\n  }\n}\n"]}