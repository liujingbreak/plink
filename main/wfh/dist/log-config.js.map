{"version":3,"file":"log-config.js","sourceRoot":"","sources":["../ts/log-config.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,6BAA6B;AAC7B,wDAA0B;AAC1B,gDAAwB;AAExB,iCAAiC;AACjC,oDAA4B;AAC5B,MAAM,GAAG,GAAG,gBAAM,CAAC,SAAS,CAAC,kBAAkB,CAAC,CAAC;AAEjD,mBAAwB,SAAwB;IAC9C,MAAM,EAAC,QAAQ,EAAC,GAAG,SAAS,CAAC;IAC7B,GAAG,CAAC,IAAI,CAAC,wBAAwB,EAAE,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC9D,MAAM,YAAY,GAAG,cAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;IACtD,IAAI,CAAC,kBAAE,CAAC,UAAU,CAAC,YAAY,CAAC,EAAE;QAChC,GAAG,CAAC,IAAI,CAAC,uCAAuC,EAAE,YAAY,CAAC,CAAC;QAChE,OAAO;KACR;IACD,kBAAE,CAAC,UAAU,CAAC,cAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC;IAE9C,gBAAgB;IAChB,mBAAmB;IACnB,qBAAqB;IACrB,KAAK;IAEL,+BAA+B;IAC/B,gCAAgC;IAChC,IAAI;QACF,IAAI,YAAY,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;QACzC,IAAI,YAAY,CAAC,KAAK,YAAY,QAAQ,EAAE;YAC1C,YAAY,GAAG,YAAY,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;SAC9C;QAED,gBAAM,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;QAC/B,gBAAM,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,0BAA0B,IAAI,IAAI,EAAE,CAAC,cAAc,EAAE,qBAAqB,CAAC,CAAC;QAC/G,KAAK,kDAAO,SAAS,IAAE,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,YAAY,EAAE,CAAC,CAAC;KAC5D;IAAC,OAAO,CAAC,EAAE;QACV,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACb,sGAAsG;QACtG,mDAAmD;QACnD,wBAAwB;QACxB,0CAA0C;QAC1C,iEAAiE;QACjE,SAAS;KACV;AACH,CAAC;AAnCD,4BAmCC","sourcesContent":["// eslint-disable  no-console\nimport fs from 'fs-extra';\nimport Path from 'path';\nimport {PlinkSettings} from './config-handler';\n// import config from './config';\nimport log4js from 'log4js';\nconst log = log4js.getLogger('plink.log-config');\n\nexport default function(configObj: PlinkSettings) {\n  const {rootPath} = configObj;\n  log.info('[log-config] log4js at', require.resolve('log4js'));\n  const log4jsConfig = Path.join(rootPath, 'log4js.js');\n  if (!fs.existsSync(log4jsConfig)) {\n    log.info('Logging configuration is not found %s', log4jsConfig);\n    return;\n  }\n  fs.mkdirpSync(Path.resolve(rootPath, 'logs'));\n\n  // const opt = {\n  //   cwd: rootPath,\n  //   reloadSecs: 9999\n  // };\n\n  // if (reloadSec !== undefined)\n  //   opt.reloadSecs = reloadSec;\n  try {\n    let localSetting = require(log4jsConfig);\n    if (localSetting.setup instanceof Function) {\n      localSetting = localSetting.setup(configObj);\n    }\n\n    log4js.configure(localSetting);\n    log4js.getLogger('logConfig').info(`\\n\\n-------------- Log ${new Date().toLocaleString()} ----------------\\n`);\n    void import('./store').then(store => store.startLogging());\n  } catch (e) {\n    log.error(e);\n    // log.info('\\nIt seems current log4js configure file is outdated, please delete\\n\\t' + log4jsConfig +\n    // \t'\\n  and run \"drcp init\" to get a new one.\\n');\n    // // log4js.configure({\n    // // \tappenders: {out: {type: 'stdout'}},\n    // // \tcategories: {default: {appenders: ['out'], level: 'info'}}\n    // // });\n  }\n}\n"]}