{"version":3,"file":"network-util.js","sourceRoot":"","sources":["../../src/utils/network-util.ts"],"names":[],"mappings":"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","sourcesContent":["import os from 'os';\nimport http from 'http';\nimport net from 'net';\n\nexport function getLanIPv4(): string {\n  const inters = os.networkInterfaces();\n  if (inters.en0) {\n    const found = inters.en0.find(ip => ip.family === 'IPv4' && !ip.internal);\n    if (found) {\n      return found.address;\n    }\n  }\n  for (const interf of Object.values(inters)) {\n    if (interf == null)\n      continue;\n    const found = interf.find(ip => ip.family === 'IPv4' && !ip.internal);\n    if (found) {\n      return found.address;\n    }\n  }\n  return '127.0.0.1';\n}\n\n\nexport function createTunnelProxy(serverPort = 1337) {\n  return new Promise<void>((resolve, reject) => {\n    // Create an HTTP tunneling proxy\n    const proxy = http.createServer((req, res) => {\n      res.writeHead(200, { 'Content-Type': 'text/plain' });\n      res.end('okay');\n    });\n    proxy.on('connect', (req, clientSocket, head) => {\n      // Connect to an origin server\n      const { port, hostname } = new URL(`http://${req.url!}`);\n      console.log('connect to ', req.url);\n      const serverSocket = net.connect(Number(port) || 80, hostname, () => {\n        clientSocket.write('HTTP/1.1 200 Connection Established\\r\\n' +\n                        'Proxy-agent: Plink-Node.js\\r\\n' +\n                        '\\r\\n');\n        serverSocket.write(head);\n        serverSocket.pipe(clientSocket);\n        clientSocket.pipe(serverSocket);\n      });\n    });\n    // eslint-disable-next-line no-console\n    proxy.on('error', err => {\n      console.error(err);\n      reject(err);\n    });\n\n    // Now that proxy is running\n    proxy.listen(serverPort, '0.0.0.0', () => {\n      console.log('Proxy server starts at port:', serverPort);\n      resolve();\n        // Make a request to a tunneling proxy\n        // const options = {\n        //   port: 1337,\n        //   host: '127.0.0.1',\n        //   method: 'CONNECT',\n        //   path: 'www.google.com:80'\n        // };\n\n        // const req = http.request(options);\n        // req.end();\n\n        // req.on('connect', (res, socket, head) => {\n        //   // eslint-disable-next-line no-console\n        //   console.log('got connected!');\n        //   // Make a request over an HTTP tunnel\n        //   socket.write('GET / HTTP/1.1\\r\\n' +\n        //               'Host: www.google.com:80\\r\\n' +\n        //               'Connection: close\\r\\n' +\n        //               '\\r\\n');\n        //   socket.on('data', (chunk) => {\n        //     console.log(chunk.toString());\n        //   });\n        //   socket.on('end', () => {\n        //     proxy.close();\n        //   });\n        // });\n    });\n  });\n}\n"]}