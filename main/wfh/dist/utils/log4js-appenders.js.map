{"version":3,"file":"log4js-appenders.js","sourceRoot":"","sources":["../../ts/utils/log4js-appenders.ts"],"names":[],"mappings":";;;AAIA,MAAM,EAAC,IAAI,EAAE,gBAAgB,EAAC,GAAG,OAAO,CAAC,uBAAuB,CAAoC,CAAC;AACrG,MAAM,EAAC,WAAW,EAAC,GAAG,OAAO,CAAC,yBAAyB,CAAiD,CAAC;AAEzG;;GAEG;AACU,QAAA,iBAAiB,GAAmB;IAC/C,SAAS,CAAC,OAAO,EAAE,QAAQ;QACzB,OAAO,cAAY,CAAC,CAAC;IACvB,CAAC;CACF,CAAC;AAEW,QAAA,oBAAoB,GAAmB;IAClD,SAAS,CAAC,OAAO,EAAE,QAAQ,EAAE,aAAa;QACxC,4GAA4G;QAC5G,IAAI,OAAO,CAAC,IAAI,IAAI,IAAI;YACtB,MAAM,IAAI,KAAK,CAAC,0EAA0E,CAAC,CAAC;QAE9F,OAAO,UAAS,QAAsB;YACpC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;QACjC,CAAC,CAAC;IACJ,CAAC;CACF,CAAC;AAEF,SAAS,oBAAoB,CAAC,QAA+B;IAC3D,OAAO,CAAC,IAAK,CAAC;QACZ,KAAK,EAAE,gBAAgB;QACvB,IAAI,EAAE,OAAO,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,SAAS,EAAE;KACrE,CAAC,CAAC;AACL,CAAC;AAED,SAAgB,sBAAsB,CAAC,GAAmC;IACxE,IAAI,GAAG,IAAI,GAAG,CAAC,KAAK,KAAK,gBAAgB,EAAE;QACzC,MAAM,QAAQ,GAAG,GAAG,CAAC,IAAI,CAAC;QAC1B,IAAI,OAAO,CAAC,IAAI,EAAE;YAChB,oBAAoB,CAAC,QAAQ,CAAC,CAAC;SAChC;aAAM;YACL,gBAAgB,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC;YACxC,0EAA0E;YAC1E,sCAAsC;YACtC,sCAAsC;SACvC;KACF;AACH,CAAC;AAZD,wDAYC","sourcesContent":["/**\n * https://log4js-node.github.io/log4js-node/writing-appenders.html\n */\nimport {AppenderModule, LoggingEvent} from 'log4js';\nconst {send: sendLoggingEvent} = require('log4js/lib/clustering') as {send(msg: LoggingEvent): void};\nconst {deserialise} = require('log4js/lib/LoggingEvent') as {deserialise: (msg: string) => LoggingEvent};\n\n/**\n * Log4js can handle cluster worker configuration, it will most likely ignore appenders, so it could be empty appender\n */\nexport const doNothingAppender: AppenderModule = {\n  configure(_config, _layouts) {\n    return function() {};\n  }\n};\n\nexport const childProcessAppender: AppenderModule = {\n  configure(_config, _layouts, _findAppender) {\n    // const layout = config.layout ? layouts.layout(config.layout.type, config.layout) : layouts.coloredLayout;\n    if (process.send == null)\n      throw new Error('Appender can not be used with process.send undefined (in master process)');\n\n    return function(logEvent: LoggingEvent) {\n      emitLogEventToParent(logEvent);\n    };\n  }\n};\n\nfunction emitLogEventToParent(logEvent: LoggingEvent | string) {\n  process.send!({\n    topic: 'log4js:message',\n    data: typeof logEvent === 'string' ? logEvent : logEvent.serialise()\n  });\n}\n\nexport function childProcessMsgHandler(msg: {topic?: string, data: string}) {\n  if (msg && msg.topic === 'log4js:message') {\n    const logEvent = msg.data;\n    if (process.send) {\n      emitLogEventToParent(logEvent);\n    } else {\n      sendLoggingEvent(deserialise(logEvent));\n      // getLogger(logEvent.categoryName).log(logEvent.level, ...logEvent.data);\n      // eslint-disable-next-line no-console\n      // console.log(process.pid, logEvent);\n    }\n  }\n}\n\n"]}