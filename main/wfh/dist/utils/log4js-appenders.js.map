{"version":3,"file":"log4js-appenders.js","sourceRoot":"","sources":["../../ts/utils/log4js-appenders.ts"],"names":[],"mappings":";;;AAAA;;GAEG;AACH,mCAAwG;AAexG;;GAEG;AACU,QAAA,iBAAiB,GAAmB;IAC/C,SAAS,CAAC,MAAc,EAAE,OAAgB;IAC1C,CAAC;CACF,CAAC;AAEW,QAAA,oBAAoB,GAAmB;IAClD,SAAS,CAAC,MAAc,EAAE,OAAgB,EAAE,YAA8C;QACxF,4GAA4G;QAC5G,IAAI,OAAO,CAAC,IAAI,IAAI,IAAI;YACtB,MAAM,IAAI,KAAK,CAAC,0EAA0E,CAAC,CAAC;QAE9F,OAAO,UAAS,QAAsB;YACpC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;QACjC,CAAC,CAAC;IACJ,CAAC;CACF,CAAC;AAEF,SAAS,oBAAoB,CAAC,QAAsB;IAClD,OAAO,CAAC,IAAK,CAAC;QACZ,IAAI,EAAE,kBAAkB;QACxB,OAAO,EAAE,QAAQ;KAClB,CAAC,CAAC;AACL,CAAC;AAED,SAAgB,sBAAsB,CAAC,GAAoB;IACzD,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,KAAK,kBAAkB,EAAE;QAC5C,MAAM,QAAQ,GAAI,GAA+B,CAAC,OAAO,CAAC;QAC1D,IAAI,OAAO,CAAC,IAAI,EAAE;YAChB,oBAAoB,CAAC,QAAQ,CAAC,CAAC;SAChC;aAAM;YACL,IAAA,kBAAS,EAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC;YACvE,sCAAsC;YACtC,sCAAsC;SACvC;KACF;AACH,CAAC;AAXD,wDAWC","sourcesContent":["/**\n * https://log4js-node.github.io/log4js-node/writing-appenders.html\n */\nimport {getLogger, AppenderModule, CustomLayout, ColoredLayout, BaseLayout, LoggingEvent} from 'log4js';\n\ntype Config = {\n  type: string;\n  layout?: {\n    type: string;\n  };\n};\n\ntype Layouts = {\n  layout(type: NonNullable<Config['layout']>['type'], layoutOpt: NonNullable<Config['layout']>): CustomLayout;\n  coloredLayout: ColoredLayout;\n  basicLayout: BaseLayout\n};\n\n/**\n * Log4js can handle cluster worker configuration, it will most likely ignore appenders, so it could be empty appender\n */\nexport const doNothingAppender: AppenderModule = {\n  configure(config: Config, layouts: Layouts) {\n  }\n};\n\nexport const childProcessAppender: AppenderModule = {\n  configure(config: Config, layouts: Layouts, findAppender: (name: string) => AppenderModule) {\n    // const layout = config.layout ? layouts.layout(config.layout.type, config.layout) : layouts.coloredLayout;\n    if (process.send == null)\n      throw new Error('Appender can not be used with process.send undefined (in master process)');\n\n    return function(logEvent: LoggingEvent) {\n      emitLogEventToParent(logEvent);\n    };\n  }\n};\n\nfunction emitLogEventToParent(logEvent: LoggingEvent) {\n  process.send!({\n    type: 'plinkLog4jsEvent',\n    payload: logEvent\n  });\n}\n\nexport function childProcessMsgHandler(msg: {type?: string}) {\n  if (msg && (msg).type === 'plinkLog4jsEvent') {\n    const logEvent = (msg as {payload: LoggingEvent}).payload;\n    if (process.send) {\n      emitLogEventToParent(logEvent);\n    } else {\n      getLogger(logEvent.categoryName).log(logEvent.level, ...logEvent.data);\n      // eslint-disable-next-line no-console\n      // console.log(process.pid, logEvent);\n    }\n  }\n}\n\n"]}