{"version":3,"file":"tsc-util.js","sourceRoot":"","sources":["../../ts/utils/tsc-util.ts"],"names":[],"mappings":"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","sourcesContent":["import fs from 'fs';\nimport Path from 'path';\nimport _ts from 'typescript';\n// import inspector from 'inspector';\nimport * as rx from 'rxjs';\nimport * as op from 'rxjs/operators';\nimport chokidar from 'chokidar';\nimport {createActionStreamByType} from '../../../packages/redux-toolkit-observable/dist/rx-utils';\n// import {createActionStream} from '../../../packages/redux-toolkit-observable/rx-utils';\nimport {parseConfigFileToJson} from '../ts-cmd-util';\n// inspector.open(9222, 'localhost', true);\n\ntype TscOptions = {\n  jsx?: boolean;\n  inlineSourceMap?: boolean;\n  emitDeclarationOnly?: boolean;\n  changeCompilerOptions?: (co: Record<string, any>) => void;\n  traceResolution?: boolean;\n};\n\nfunction plinkNodeJsCompilerOptionJson(\n  ts: typeof _ts,\n  opts: TscOptions = {}\n) {\n  const {jsx = false, inlineSourceMap = false, emitDeclarationOnly = false} = opts;\n  let baseCompilerOptions: any;\n  if (jsx) {\n    const baseTsconfigFile2 = require.resolve('../tsconfig-tsx.json');\n    // log.info('Use tsconfig file:', baseTsconfigFile2);\n    const tsxTsconfig = parseConfigFileToJson(ts, baseTsconfigFile2);\n    baseCompilerOptions = tsxTsconfig.compilerOptions;\n    // baseCompilerOptions = {...baseCompilerOptions, ...tsxTsconfig.config.compilerOptions};\n  } else {\n    const baseTsconfigFile = require.resolve('../../tsconfig-base.json');\n    const baseTsconfig = parseConfigFileToJson(ts, baseTsconfigFile);\n    // log.info('Use tsconfig file:', baseTsconfigFile);\n    baseCompilerOptions = baseTsconfig.compilerOptions;\n  }\n\n  const coRootDir = Path.parse(process.cwd()).root;\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const compilerOptions = {\n    ...baseCompilerOptions,\n    target: 'ES2017',\n    importHelpers: true,\n    declaration: true,\n    // diagnostics: true,\n    // module: 'ESNext',\n    /**\n     * for gulp-sourcemaps usage:\n     *  If you set the outDir option to the same value as the directory in gulp.dest, you should set the sourceRoot to ./.\n     */\n    outDir: coRootDir, // must be same as rootDir\n    rootDir: coRootDir,\n    skipLibCheck: true,\n    inlineSourceMap,\n    sourceMap: !inlineSourceMap,\n    inlineSources: true,\n    emitDeclarationOnly,\n    traceResolution: opts.traceResolution,\n    preserveSymlinks: false\n  } as Record<keyof _ts.CompilerOptions, any>;\n  if (opts.changeCompilerOptions)\n    opts.changeCompilerOptions(compilerOptions);\n\n  return compilerOptions;\n}\n\nfunction plinkNodeJsCompilerOption(\n  ts: typeof _ts,\n  opts: TscOptions & {basePath?: string} = {}\n) {\n  const json = plinkNodeJsCompilerOptionJson(ts, opts);\n  const basePath = (opts.basePath || process.cwd()).replace(/\\\\/g, '/');\n  const {options} = ts.parseJsonConfigFileContent(\n    {compilerOptions: json},\n    ts.sys,\n    basePath,\n    undefined,\n    Path.resolve(basePath, 'tsconfig-in-memory.json')\n  );\n  return options;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\nexport function transpileSingleFile(content: string, ts: any = _ts) {\n  const {outputText, diagnostics, sourceMapText} = (ts as typeof _ts)\n    .transpileModule(content, {\n      compilerOptions: {...plinkNodeJsCompilerOption(ts), isolatedModules: true, inlineSourceMap: false}\n    });\n\n  return {\n    outputText,\n    sourceMapText,\n    diagnostics,\n    diagnosticsText: diagnostics\n  };\n}\n\nexport enum LogLevel {\n  trace, log, error\n}\n\ntype LangServiceActionCreator = {\n  watch(dirs: string[]): void;\n  addSourceFile(file: string, sync: boolean) : void;\n  changeSourceFile(file: string) : void;\n  onCompilerOptions(co: _ts.CompilerOptions): void;\n  onEmitFailure(file: string, diagnostics: string, type: 'compilerOptions' | 'syntactic' | 'semantic') : void;\n  onSuggest(file: string, msg: string): void;\n  _emitFile(file: string, content: string) : void;\n  log(level: LogLevel, msg: string): void;\n  /** stop watch */\n  stop(): void;\n};\n\ntype LangServiceState = {\n  versions: Map<string, number>;\n  /** root files */\n  files: Set<string>;\n  unemitted: Set<string>;\n  isStopped: boolean;\n};\n\nexport function languageServices(ts: any = _ts, opts: {\n  formatDiagnosticFileName?(path: string): string;\n  transformSourceFile?(path: string, content: string): string;\n  watcher?: chokidar.WatchOptions;\n  tscOpts?: NonNullable<Parameters<typeof plinkNodeJsCompilerOption>[1]>;\n} = {}) {\n  const ts0 = ts as typeof _ts;\n  const {dispatchFactory, action$, ofType} = createActionStreamByType<LangServiceActionCreator>();\n  const store = new rx.BehaviorSubject<LangServiceState>({\n    versions: new Map(),\n    files: new Set(),\n    unemitted: new Set(),\n    isStopped: false\n  });\n\n  function setState(cb: (curr: LangServiceState) => LangServiceState) {\n    store.next(cb(store.getValue()));\n  }\n\n  const formatHost: _ts.FormatDiagnosticsHost = {\n    getCanonicalFileName: opts.formatDiagnosticFileName || (path => path),\n    getCurrentDirectory: _ts.sys.getCurrentDirectory,\n    getNewLine: () => _ts.sys.newLine\n  };\n\n  const co = plinkNodeJsCompilerOption(ts0, opts.tscOpts);\n\n  const serviceHost: _ts.LanguageServiceHost = {\n    ...ts0.sys, // Important, default language service host does not implement methods like fileExists\n    getScriptFileNames() {\n      return Array.from(store.getValue().files.values());\n    },\n    getScriptVersion(fileName: string) {\n      return store.getValue().versions.get(fileName) + '' || '-1';\n    },\n    getCompilationSettings() {\n      dispatchFactory('onCompilerOptions')(co);\n      return co;\n    },\n    getScriptSnapshot(fileName: string) {\n      if (!fs.existsSync(fileName)) {\n        return undefined;\n      }\n\n      const originContent = fs.readFileSync(fileName).toString();\n      return ts0.ScriptSnapshot.fromString(opts.transformSourceFile ? opts.transformSourceFile(fileName, originContent) : originContent);\n    },\n    getCancellationToken() {\n      return {\n        isCancellationRequested() {\n          return store.getValue().isStopped;\n        }\n      };\n    },\n    useCaseSensitiveFileNames() { return ts0.sys.useCaseSensitiveFileNames; },\n    getDefaultLibFileName: options => ts0.getDefaultLibFilePath(options),\n\n    trace(s) {\n      dispatchFactory('log')(LogLevel.log, s);\n      console.log('[lang-service trace]', s);\n    },\n    error(s) {\n      dispatchFactory('log')(LogLevel.error, s);\n      console.log('[lang-service error]', s);\n    },\n    log(s) {\n      dispatchFactory('log')(LogLevel.log, s);\n      console.log('[lang-service log]', s);\n    }\n  };\n  const documentRegistry = ts0.createDocumentRegistry();\n  let services: _ts.LanguageService | undefined;\n  const addSourceFile$ = action$.pipe(ofType('addSourceFile'));\n  const changeSourceFile$ = action$.pipe(ofType('changeSourceFile'));\n  const stop$ = action$.pipe(ofType('stop'));\n\n  let watcher: ReturnType<typeof chokidar.watch>;\n\n  rx.merge(\n    action$.pipe(\n      ofType('watch'),\n      op.exhaustMap(({payload: dirs}) =>  new rx.Observable<never>(() => {\n        if (watcher == null)\n          watcher = chokidar.watch(dirs.map(dir => dir.replace(/\\\\/g, '/')), opts.watcher);\n\n        watcher.on('add', path => dispatchFactory('addSourceFile')(path, false));\n        watcher.on('change', path => dispatchFactory('changeSourceFile')(path));\n        return () => {\n          void watcher.close().then(() => {\n            // eslint-disable-next-line no-console\n            console.log('[tsc-util] chokidar watcher stops');\n          });\n        };\n      })\n      )\n    ),\n    addSourceFile$.pipe(\n      op.filter(({payload: [file]}) => /\\.(?:tsx?|json)$/.test(file)),\n      op.map(({payload: [fileName, sync]}) => {\n        setState(s => {\n          s.files.add(fileName);\n          s.versions.set(fileName, 0);\n          return s;\n        });\n        if (sync)\n          getEmitFile(fileName);\n        else {\n          setState(s => {\n            s.unemitted.add(fileName);\n            return s;\n          });\n          return fileName;\n        }\n      }),\n      op.filter((file) : file is string => file != null),\n      op.debounceTime(333),\n      op.map(() => {\n        for (const file of store.getValue().unemitted.values()) {\n          getEmitFile(file);\n        }\n        setState(s => {\n          s.unemitted.clear();\n          return s;\n        });\n      })\n    ),\n    changeSourceFile$.pipe(\n      op.filter(({payload: file}) => /\\.(?:tsx?|json)$/.test(file)),\n      // TODO: debounce on same file changes\n      op.map(({payload: fileName}) => {\n        setState(s => {\n          const version = s.versions.get(fileName);\n          s.versions.set(fileName, (version != null ? version : 0) + 1);\n          return s;\n        });\n        getEmitFile(fileName);\n      })\n    )\n  ).pipe(\n    op.takeUntil(stop$),\n    op.catchError((err, src) => {\n      console.error('Language service error', err);\n      return src;\n    }),\n    op.finalize(() => {\n      setState(s => {\n        s.isStopped = true;\n        return s;\n      });\n    })\n  ).subscribe();\n\n  function getEmitFile(fileName: string) {\n    if (services == null) {\n      services = ts0.createLanguageService(serviceHost, documentRegistry);\n      const coDiag = services.getCompilerOptionsDiagnostics();\n      if (coDiag.length > 0)\n        dispatchFactory('onEmitFailure')(\n          fileName,\n          ts0.formatDiagnosticsWithColorAndContext(coDiag, formatHost),\n          'compilerOptions');\n    }\n    const output = services.getEmitOutput(fileName);\n    if (output.emitSkipped) {\n      // console.log(`Emitting ${fileName} failed`);\n    }\n\n    const syntDiag = services.getSyntacticDiagnostics(fileName);\n    if (syntDiag.length > 0) {\n      dispatchFactory('onEmitFailure')(\n        fileName,\n        ts0.formatDiagnosticsWithColorAndContext(syntDiag, formatHost),\n        'syntactic');\n    }\n    const semanticDiag = services.getSemanticDiagnostics(fileName);\n\n    if (semanticDiag.length > 0) {\n      dispatchFactory('onEmitFailure')(\n        fileName,\n        ts0.formatDiagnosticsWithColorAndContext(semanticDiag, formatHost),\n        'semantic');\n    }\n\n    const suggests = services.getSuggestionDiagnostics(fileName);\n\n    for (const sug of suggests) {\n      const {line, character} = sug.file.getLineAndCharacterOfPosition(sug.start);\n      dispatchFactory('onSuggest')(fileName, `${fileName}:${line + 1}:${character + 1} ` +\n                                   ts0.flattenDiagnosticMessageText(sug.messageText, '\\n', 2));\n    }\n\n    output.outputFiles.forEach(o => {\n      dispatchFactory('_emitFile')(o.name, o.text);\n    });\n  }\n\n  return {\n    dispatchFactory, action$, ofType,\n    store: store.pipe(\n      op.map(s => s.files)\n    )\n  };\n}\n\nexport function test(dir: string) {\n  const {action$, ofType} = languageServices([dir]);\n  action$.pipe(\n    ofType('_emitFile'),\n    // eslint-disable-next-line no-console\n    op.map(({payload: [file]}) => console.log('emit', file))\n  ).subscribe();\n}\n"]}