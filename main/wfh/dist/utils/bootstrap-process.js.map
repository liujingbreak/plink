{"version":3,"file":"bootstrap-process.js","sourceRoot":"","sources":["../../ts/utils/bootstrap-process.ts"],"names":[],"mappings":"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","sourcesContent":["import '../node-path';\nimport cluster from 'node:cluster';\nimport chrp from 'node:child_process';\nimport log4js from 'log4js';\nimport * as rx from 'rxjs';\nimport * as op from 'rxjs/operators';\nimport config from '../config';\n// import logConfig from '../log-config';\nimport {GlobalOptions} from '../cmd/types';\nimport * as store from '../store';\nimport {childProcessAppender, doNothingAppender,\n  emitChildProcessLogMsg} from './log4js-appenders';\n\nconst log = log4js.getLogger('plink.bootstrap-process');\nlet processInitialized = false;\n\n/** When process is on 'SIGINT' and \"beforeExit\", all functions will be executed */\nexport const exitHooks = [] as Array<() => (rx.ObservableInput<unknown> | void | number)>;\n\nprocess.on('uncaughtException', function(err) {\n  console.error(`PID: ${process.pid} Uncaught exception: `, err);\n  throw err; // let PM2 handle exception\n});\n\nprocess.on(`PID: ${process.pid} unhandledRejection`, err => {\n  console.error('unhandledRejection', err);\n});\n/**\n * Must invoke initProcess() or initAsChildProcess() before this function.\n * If this function is called from a child process or thread worker of Plink,\n * you may pass `JSON.parse(process.env.PLINK_CLI_OPTS!)` as parameter since\n * Plink's main process save `GlobalOptions` in environment variable \"PLINK_CLI_OPTS\",\n * so that child process gets same GlobalOptions as the main process does.\n * @param options \n */\nexport function initConfig(options: GlobalOptions = {}) {\n  config.initSync(options);\n  // logConfig(config());\n  return config;\n}\n\n/**\n * - Register process event handler for SIGINT and shutdown command\n * - Initialize redux-store for Plink\n * \n * DO NOT fork a child process on this function\n * @param _onShutdownSignal \n */\nexport function initProcess(saveState: store.StoreSetting['actionOnExit'] = 'none') {\n  if (processInitialized) {\n    console.warn(new Error('Do not initialize process twice'));\n    return;\n  }\n\n  processInitialized = true;\n  if (process.env.__plinkLogMainPid == null) {\n    process.env.__plinkLogMainPid = process.pid + '';\n  }\n  interceptFork();\n  // TODO: Not working when press ctrl + c, and no async operation can be finished on \"SIGINT\" event\n  process.once('beforeExit', function(code) {\n    log.info('pid ' + process.pid + ': bye');\n    onShut(code, false);\n  });\n  process.once('SIGINT', () => {\n    log.info('pid' + process.pid + ' recieves SIGINT');\n    onShut(0, true);\n  });\n\n  configDefaultLog();\n\n  const {dispatcher, storeSavedAction$, stateFactory, startLogging} = require('../store') as typeof store;\n\n  startLogging();\n  stateFactory.configureStore();\n\n  dispatcher.changeActionOnExit(saveState);\n\n  function onShut(_code: number, explicitlyExit: boolean) {\n    let exitCode = 0;\n    rx.concat(\n      rx.from(exitHooks).pipe(\n        op.mergeMap(hookFn => {\n          try {\n            const ret = hookFn();\n            if (ret == null || typeof ret === 'number') {\n              return rx.of(ret);\n            } else {\n              return rx.from(ret);\n            }\n          } catch (err) {\n            log.error('Failed to execute shutdown hooks', err);\n            exitCode = 1;\n            return rx.EMPTY;\n          }\n        }),\n        op.catchError(err => {\n          log.error('Failed to execute shutdown hooks', err);\n          exitCode = 1;\n          return rx.EMPTY;\n        }),\n        op.map((ret) => {\n          if (typeof ret === 'number' && ret !== 0) {\n            exitCode = ret;\n            log.info('Exit hook returns:', exitCode);\n          }\n        })\n      ),\n      rx.merge(\n        // once \"dispatcher.processExit() is executed, storeSavedAction$ will be emtted recusively.\n        // Therefore storeSavedAction$ must be subscribed before dispatcher.processExit()\n        storeSavedAction$.pipe(op.take(1)),\n        // A defer() can make sure dispatcher.processExit() is called later than storeSavedAction$\n        // being subscribed\n        rx.defer(() => {\n          dispatcher.processExit();\n          return rx.EMPTY;\n        })\n      )\n    ).pipe(\n      op.finalize(() => {\n        if (explicitlyExit) {\n          // eslint-disable-next-line no-console\n          console.log(`[bootstrap-process] Process ${process.pid} Exit with`, exitCode);\n          process.exit(exitCode);\n        } else if (exitCode !== 0) {\n          // eslint-disable-next-line no-console\n          console.log(`[bootstrap-process] Process ${process.pid} Exit with`, exitCode);\n          process.exit(exitCode);\n        }\n      })\n    ).subscribe();\n  }\n}\n\n/**\n * Initialize redux-store for Plink.\n * \n * Use this function instead of initProcess() in case it is in a forked child process or worker thread of Plink.\n * So that plink won't listener to PM2's shutdown message in this case.\n * Be aware that Plink main process could be a child process of PM2 or any other Node.js process manager,\n * that's what initProcess() does to listener to PM2's message.\n\n * Unlink initProcess() which registers process event handler for SIGINT and shutdown command,\n * in case this is running as a forked child process, it will stand by until parent process explicitly\n *  sends a signal to exit\n * @param syncState send changed state back to main process\n */\nexport function initAsChildProcess(saveState: store.StoreSetting['actionOnExit'] = 'none') {\n  return initProcess(saveState);\n}\n\nfunction interceptFork() {\n  const origFork = chrp.fork;\n  const handler = (process.env.__plinkLogMainPid === process.pid + '' ||\n    process.send == null) ?\n    (msg: any) => emitChildProcessLogMsg(msg, false)\n    : (msg: any) => emitChildProcessLogMsg(msg, true);\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  chrp.fork = function(...args: Parameters<typeof origFork>) {\n    const cp = origFork.apply(chrp, args);\n    cp.on('message', handler);\n    return cp;\n  } as any;\n\n  cluster.on('message', handler);\n}\n\nfunction configDefaultLog() {\n  if (cluster.isWorker) {\n    // https://github.dev/log4js-node/log4js-node/blob/master/lib/clustering.js\n    // if `disableClustering` is not `true`, log4js will ignore configuration and\n    // always use `process.send()`\n    log4js.configure({\n      appenders: {\n        out: {type: doNothingAppender}\n      },\n      categories: {\n        default: {appenders: ['out'], level: 'info'}\n      }\n      // disableClustering: true\n    });\n  } else if (process.env.__plinkLogMainPid === process.pid + '') {\n    // eslint-disable-next-line no-console\n    log4js.configure({\n      appenders: {\n        out: {\n          type: 'stdout',\n          layout: {type: 'pattern', pattern: '[P%z] %[%c%] - %m'}\n        }\n      },\n      categories: {\n        default: {appenders: ['out'], level: 'info'}\n      }\n    });\n  } else if (process.send) {\n    log4js.configure({\n      appenders: {\n        out: {type: childProcessAppender}\n      },\n      categories: {\n        default: {appenders: ['out'], level: 'info'}\n      }\n    });\n  }\n  /**\n   - %r time in toLocaleTimeString format\n   - %p log level\n   - %c log category\n   - %h hostname\n   - %m log data\n   - %d date, formatted - default is ISO8601, format options are: ISO8601, ISO8601_WITH_TZ_OFFSET, ABSOLUTE, DATE, or any string compatible with the date-format library. e.g. %d{DATE}, %d{yyyy/MM/dd-hh.mm.ss}\n   - %% % - for when you want a literal % in your output\n   - %n newline\n   - %z process id (from process.pid)\n   - %f full path of filename (requires enableCallStack: true on the category, see configuration object)\n   - %f{depth} path’s depth let you chose to have only filename (%f{1}) or a chosen number of directories\n   - %l line number (requires enableCallStack: true on the category, see configuration object)\n   - %o column postion (requires enableCallStack: true on the category, see configuration object)\n   - %s call stack (requires enableCallStack: true on the category, see configuration object)\n   - %x{<tokenname>} add dynamic tokens to your log. Tokens are specified in the tokens parameter.\n   - %X{<tokenname>} add values from the Logger context. Tokens are keys into the context values.\n   - %[ start a coloured block (colour will be taken from the log level, similar to colouredLayout)\n   - %] end a coloured block\n   */\n}\n"]}