{"version":3,"file":"misc.js","sourceRoot":"","sources":["../../ts/utils/misc.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Path from 'path';\nimport _ from 'lodash';\nimport get from 'lodash/get';\nimport trim from 'lodash/trim';\n// import * as fs from 'fs';\nimport '../node-path';\nimport * as cfonts from 'cfonts';\nimport Table from 'cli-table3';\nimport { BaseLexer, Token } from '../base-LLn-parser';\nimport type {PlinkEnv} from '../node-path';\n\nconst {isDrcpSymlink, workDir, rootDir, symlinkDirName, distDir, nodePath, plinkDir} =\n  JSON.parse(process.env.__plink!) as PlinkEnv;\n\nexport const plinkEnv: PlinkEnv = {isDrcpSymlink, workDir, rootDir, symlinkDirName, distDir, nodePath, plinkDir};\nexport {isDrcpSymlink};\n\nexport enum WordTokenType {\n  eol = 0,\n  word,\n  tab,\n  eos, // end of sentence\n  other\n}\n\nexport class WordLexer extends BaseLexer<WordTokenType> {\n  *[Symbol.iterator](): Iterator<Token<WordTokenType>> {\n    while (this.la() != null) {\n      const start = this.position;\n      switch (this.la()) {\n        case '\\n':\n          this.advance();\n          if (this.la() === '\\r')\n            this.advance();\n          yield new Token(WordTokenType.eol, this, start);\n          break;\n        case '\\t':\n          this.advance();\n          yield new Token(WordTokenType.tab, this, start);\n          break;\n        default:\n          const first = this.la()!;\n          if (/[a-zA-Z$_]/.test(first)) {\n            this.advance();\n            while (this.la() != null && /[a-zA-Z$_0-9]/.test(this.la()!)) {\n              this.advance();\n            }\n            if (/-/.test(this.la()!))\n              this.advance();\n            yield new Token(WordTokenType.word, this, start);\n            break;\n          }\n          if (/[0-9]/.test(this.la()!)) {\n            this.consumeNumbers();\n            yield new Token(WordTokenType.word, this, start);\n            break;\n          }\n          if (first === '-' && this.la(2) && /[0-9]/.test(this.la(2)!)) {\n            this.advance();\n            this.consumeNumbers();\n            yield new Token(WordTokenType.word, this, start);\n            break;\n          }\n          if (/[,.]/.test(first)) {\n            this.advance();\n            yield new Token(WordTokenType.eos, this, start);\n            break;\n          }\n          this.advance();\n          yield new Token(WordTokenType.other, this, start);\n      }\n    }\n  }\n\n  consumeNumbers() {\n    // if (/[0-9]/.test(this.la())) {\n    this.advance();\n    while (this.la() != null && /[0-9.]/.test(this.la()!)) {\n      this.advance();\n    }\n    // }\n  }\n}\n\nexport function boxString(text: string, lineWidth = 70, whitespaceWrap = true): string {\n  const tb = createCliTable({\n    colWidths: [lineWidth],\n    wordWrap: whitespaceWrap,\n    horizontalLines: false\n  });\n  tb.push(...text.split(/\\n\\r?/).map(item => [item]));\n  return tb.toString();\n  // const lexer = new WordLexer(text);\n\n  // lineWidth = lineWidth - 4;\n  // let updated = `+${'-'.repeat(lineWidth + 2)}+\\n`;\n  // let column = 0;\n  // for (const word of lexer) {\n  //   if (word.type === WordTokenType.word || word.type === WordTokenType.eos || word.type === WordTokenType.other ||\n  //     word.type === WordTokenType.tab) {\n  //     if (column === 0) {\n  //       updated += '| ';\n  //     }\n  //     if (column + word.text.length > lineWidth) {\n  //       updated += ' '.repeat(lineWidth - column);\n  //       updated += ' |\\n| ';\n  //       // pad\n  //       column = 0;\n  //     }\n  //     updated += word.type === WordTokenType.tab ? '  ' : word.text;\n  //     column += word.type === WordTokenType.tab ? 2 : word.text.length;\n  //   } else if (word.type === WordTokenType.eol) {\n  //     if (column === 0) {\n  //       updated += '| ';\n  //     }\n  //     updated += ' '.repeat(lineWidth - column);\n  //     updated += ' |\\n';\n  //     column = 0;\n  //   }\n  // }\n  // if (column !== 0) {\n  //   updated += ' '.repeat(lineWidth - column);\n  //   updated += ' |\\n';\n  // }\n  // updated += `+${'-'.repeat(lineWidth + 2)}+`;\n  // return updated.replace(/^(?=.)/mg, '  ');\n}\n\nexport function sexyFont(text: string, color = '#99a329', font: cfonts.FontOption['font'] = 'block') {\n  return cfonts.render(text, {font, colors: [color]});\n}\n\nexport interface CliTableOption extends NonNullable<ConstructorParameters<Table>[0]> {\n  horizontalLines?: boolean;\n}\n\nexport function createCliTable(opt?: CliTableOption) {\n  const tableOpt: CliTableOption = {\n    // style: {head: []},\n    wordWrap: true,\n    ...opt\n  };\n  delete tableOpt.horizontalLines;\n\n  if (opt && opt.horizontalLines === false) {\n    tableOpt.chars = {mid: '', 'left-mid': '', 'mid-mid': '', 'right-mid': '', 'top-mid': ''};\n  }\n  if (opt && opt.horizontalLines) {\n    tableOpt.colAligns = opt.colAligns;\n  }\n  return new Table(tableOpt);\n}\n\nexport interface PackageTsDirs {\n  /** srcDir works like \"rootDir\" in tsconfig compilerOptions */\n  srcDir: string;\n  destDir: string;\n  isomDir?: string;\n  /** For plink command tsc, \"isomDir\" will be ignored if \"include\" is set in package.json */\n  include?: string[] | string;\n  files?: string[] | string;\n}\n\nexport function getTscConfigOfPkg(json: any) {\n  // const globs: string[] | undefined = get(json, 'dr.ts.globs');\n  const srcDir = get(json, 'dr.ts.src', get(json, 'plink.tsc.src', 'ts')) as string;\n  const isomDir = get(json, 'dr.ts.isom', get(json, 'plink.tsc.isom', 'isom')) as string;\n  const include = get(json, 'dr.ts.include', get(json, 'plink.tsc.include')) as string[] | undefined;\n  const files = get(json, 'plink.tsc.files') as string[] | undefined;\n  let destDir = get(json, 'dr.ts.dest', get(json, 'plink.tsc.dest', 'dist')) as string;\n\n  destDir = trim(trim(destDir, '\\\\'), '/');\n  return {\n    srcDir, destDir, isomDir, include, files\n  };\n}\n\nexport const getRootDir = () => rootDir;\n/** get Plink work directory or process.cwd() */\nexport const getWorkDir = () => workDir;\n\n\n\nexport function getSymlinkForPackage(pkgName: string, workspaceDir = workDir) {\n  if (symlinkDirName)\n    return Path.resolve(workspaceDir, symlinkDirName, pkgName);\n  return null;\n}\n\nexport function closestCommonParentDir(paths: Iterable<string>) {\n  let commonDir: string[] | undefined;\n\n  for (const realPath of paths) {\n    if (commonDir == null) {\n      commonDir = realPath.split(Path.sep);\n      continue;\n    }\n    const dir = realPath.split(Path.sep);\n    // Find the closest common parent directory, use it as rootDir\n    for (let i = 0, l = commonDir.length; i < l; i++) {\n      if (i >= dir.length || commonDir[i] !== dir[i]) {\n        commonDir = commonDir.slice(0, i);\n        break;\n      }\n    }\n  }\n  let dir = commonDir ? commonDir.join(Path.sep) : workDir;\n  if (dir.endsWith(':')) {\n    // window disk root directory like \"c:\", needs to turn it to \"c:\\\\\", since path module malfunctions on \"c:\"\n    dir += Path.sep;\n  }\n  return dir;\n}\n\n// interface MapOrSet extends Iterable<any> {\n//   size: number;\n//   has(el: any): boolean;\n// }\nexport function isEqualMapSet<T>(set1: Set<T> | Map<T, any>, set2: Set<T> | Map<T, any>) {\n  if (set1.size !== set2.size)\n    return false;\n  for (const el of set1 instanceof Map ? set1.keys() : set1) {\n    if (!set2.has(el))\n      return false;\n  }\n  for (const el of set2 instanceof Map ? set2.keys() : set2) {\n    if (!set1.has(el))\n      return false;\n  }\n  return true;\n}\n\nexport class SimpleLinkedListNode<T> {\n  constructor(\n    public prev: SimpleLinkedListNode<T> | null,\n    public next: SimpleLinkedListNode<T> | null,\n    public value: T\n  ) {}\n}\n\nexport class SimpleLinkedList<T> {\n  first: SimpleLinkedListNode<T> | null = null;\n  last: SimpleLinkedListNode<T> | null = null;\n\n  removeNode(node: SimpleLinkedListNode<T>) {\n    if (node.prev)\n      node.prev.next = node.next;\n    if (node.next)\n      node.next.prev = node.prev;\n    if (this.first === node) {\n      this.first = node.next;\n    }\n    if (this.last === node) {\n      this.last = node.prev;\n    }\n  }\n\n  push(value: T): SimpleLinkedListNode<T> {\n    const node = new SimpleLinkedListNode<T>(this.last, null, value);\n    if (this.last)\n      this.last.next = node;\n    this.last = node;\n    if (this.first == null) {\n      this.first = node;\n    }\n    return node;\n  }\n\n  *traverse() {\n    for (let curr = this.first; curr != null; curr = curr.next) {\n      yield curr.value;\n    }\n  }\n}\n"]}