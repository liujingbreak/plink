{"version":3,"file":"range-tree.js","sourceRoot":"","sources":["../../ts/utils/range-tree.ts"],"names":[],"mappings":";;;;;AAAA,uCAAuC;AAIvC,MAAM,qBAAyB,SAAQ,sBAA4B;IACjE;QACE,KAAK,CAAC,CAAC,MAAM,EAAE,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;IACrD,CAAC;CACF;AAED,MAAM,sBAA0B,SAAQ,sBAA4B;IAClE;QACE,KAAK,CAAC,CAAC,MAAM,EAAE,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;IACvD,CAAC;CACF;AAED,MAAa,aAAa;IAIxB;QAHA,wCAAkB,IAAI,qBAAqB,EAAO,EAAC;QACnD,yCAAmB,IAAI,sBAAsB,EAAO,EAAC;IAE9B,CAAC;IAExB,QAAQ,CAAC,KAAQ;QACf,MAAM,IAAI,GAAG,+BAAA,IAAI,qCAAgB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAChD,IAAI,IAAI,CAAC,KAAK,EAAE;YACd,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACxB;aAAM;YACL,IAAI,CAAC,KAAK,GAAG,CAAC,KAAK,CAAC,CAAC;SACtB;QACD,MAAM,KAAK,GAAG,+BAAA,IAAI,sCAAiB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAClD,IAAI,KAAK,CAAC,KAAK,EAAE;YACf,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACzB;aAAM;YACL,KAAK,CAAC,KAAK,GAAG,CAAC,KAAK,CAAC,CAAC;SACvB;IACH,CAAC;IAED,WAAW,CAAC,KAAQ;QAClB,+BAAA,IAAI,qCAAgB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACnC,+BAAA,IAAI,sCAAiB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACtC,CAAC;CACF;AAzBD,sCAyBC","sourcesContent":["import {RedBlackTree} from './rb-tree';\n\nexport type IntervalKey = {low: number; high: number};\n\nclass IntervalByLowBoundary<V> extends RedBlackTree<IntervalKey, V> {\n  constructor() {\n    super((range1, range2) => range1.low - range2.low);\n  }\n}\n\nclass IntervalByHighBoundary<V> extends RedBlackTree<IntervalKey, V> {\n  constructor() {\n    super((range1, range2) => range1.high - range2.high);\n  }\n}\n\nexport class RangeSearcher<V extends IntervalKey> {\n  #lowBoundryTree = new IntervalByLowBoundary<V[]>();\n  #highBoundryTree = new IntervalByHighBoundary<V[]>();\n\n  private constructor() {}\n\n  addRange(value: V) {\n    const node = this.#lowBoundryTree.insert(value);\n    if (node.value) {\n      node.value.push(value);\n    } else {\n      node.value = [value];\n    }\n    const nodeH = this.#highBoundryTree.insert(value);\n    if (nodeH.value) {\n      nodeH.value.push(value);\n    } else {\n      nodeH.value = [value];\n    }\n  }\n\n  removeRange(value: V) {\n    this.#lowBoundryTree.delete(value);\n    this.#highBoundryTree.delete(value);\n  }\n}\n\n"]}