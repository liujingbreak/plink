{"version":3,"file":"data-structures-test.js","sourceRoot":"","sources":["../../ts/utils/data-structures-test.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,0CAA4B;AAC5B,uDAA2D;AAC3D,mCAAoC;AAEpC,SAAgB,IAAI;IAClB,MAAM,IAAI,GAAG,IAAI,8BAAY,EAAU,CAAC;IACxC,MAAM,GAAG,GAAG,EAAE,CAAC;IACf,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;QAC5B,sCAAsC;QACtC,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;QAC1B,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;KAChB;IAED,IAAI,GAAG,GAAG,IAAI,WAAG,CAAqB,WAAW,CAAC,CAAC;IAEnD,GAAG,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,IAAK,CAAC,CAAC,CAAC;IAExB,sCAAsC;IACtC,OAAO,CAAC,GAAG,CAAC,6BAA6B,CAAC,CAAC;IAC3C,iCAAiC;IACjC,gCAAgC;IAChC,sBAAsB;IACtB,oDAAoD;IACpD,uDAAuD;IACvD,6BAA6B;IAC7B,MAAM;IACN,MAAM,IAAI,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;IAC7B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;QACvC,IAAI,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;QAC3D,MAAM,GAAG,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC;QAC/B,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;QAC7B,sCAAsC;QACtC,OAAO,CAAC,GAAG,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC;QAC/B,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;KAClB;IAED,GAAG,GAAG,IAAI,WAAG,CAAqB,WAAW,CAAC,CAAC;IAC/C,GAAG,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,IAAK,CAAC,CAAC,CAAC;IAExB,SAAS,WAAW,CAAC,IAAwB,EAAE,MAAkC,EAAE,KAAa;;QAC9F,sCAAsC;QACtC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA,MAAA,IAAI,CAAC,CAAC,0CAAE,IAAI,MAAK,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,IAAI,IAAI,CAAC,GAAG,GAAG,EAAE,KAAK,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC;QACzJ,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,EAA+B,EAAE,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC;IAC7F,CAAC;AACH,CAAC;AAxCD,oBAwCC","sourcesContent":["import * as _ from 'lodash';\nimport {RedBlackTree, RbTreeNode} from './data-structures';\nimport {DFS, Vertex} from './graph';\n\nexport function test() {\n  const tree = new RedBlackTree<number>();\n  const len = 30;\n  for (let i = 0; i < len; i++) {\n    // eslint-disable-next-line no-console\n    console.log('add key', i);\n    tree.insert(i);\n  }\n\n  let dfs = new DFS<RbTreeNode<number>>(adjacencyOf);\n\n  dfs.visit([tree.root!]);\n\n  // eslint-disable-next-line no-console\n  console.log('------------------ deletion');\n  // [5, 8 , 1, 6].forEach(key => {\n  //   console.log('delete', key);\n  //   tree.delete(key);\n  //   dfs = new DFS<RbTreeNode<number>>(adjacencyOf);\n  //   console.log(`----- after deletion ${key} ------`);\n  //   dfs.visit([tree.root!]);\n  // });\n  const keys = _.range(0, len);\n  for (let i = 0, l = len / 2; i < l; i++) {\n    let randomKeyIdx = Math.floor(Math.random() * keys.length);\n    const key = keys[randomKeyIdx];\n    keys.splice(randomKeyIdx, 1);\n    // eslint-disable-next-line no-console\n    console.log('delete key', key);\n    tree.delete(key);\n  }\n\n  dfs = new DFS<RbTreeNode<number>>(adjacencyOf);\n  dfs.visit([tree.root!]);\n\n  function adjacencyOf(node: RbTreeNode<number>, vertex: Vertex<RbTreeNode<number>>, level: number) {\n    // eslint-disable-next-line no-console\n    console.log(`${_.repeat('| ', level)}- ${node.p ? node.p?.left === node ? 'left' : 'right' : 'root'} ${node.key + ''}: ${node.isRed ? 'red' : 'black'}`);\n    return [node.left, node.right].filter((node) : node is RbTreeNode<number> => node != null);\n  }\n}\n"]}