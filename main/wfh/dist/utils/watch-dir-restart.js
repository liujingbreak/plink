"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const cp = __importStar(require("child_process"));
const rx = __importStar(require("rxjs"));
const op = __importStar(require("rxjs/operators"));
const chokidar_1 = __importDefault(require("chokidar"));
function default_1(dirOrFile, forkJsFiles) {
    const watcher = chokidar_1.default.watch(dirOrFile, { ignoreInitial: true });
    const change$ = rx.fromEventPattern(h => watcher.on('change', h), h => watcher.off('change', h))
        .pipe(op.map(event => ({ fileChangeType: 'change', data: event })));
    const add$ = rx.fromEventPattern(h => watcher.on('add', h), h => watcher.off('add', h))
        .pipe(op.map(event => ({ fileChangeType: 'add', data: event })));
    const action$ = new rx.Subject();
    const serverState$ = new rx.BehaviorSubject('stopped');
    rx.merge(action$.pipe(
    // eslint-disable-next-line no-console
    op.tap(type => console.log('[watch-dir-restart]:', type)), op.ignoreElements()), 
    // restart after started
    rx.merge(change$, add$).pipe(op.debounceTime(500), op.mapTo('request restart'), op.exhaustMap(() => {
        const wait = serverState$.pipe(op.filter(type => type === 'started'), op.take(1));
        action$.next('restart');
        return wait;
    })), 
    // restart -> (after stopped) -> stop, start
    action$.pipe(op.filter(type => type === 'restart'), op.concatMap(() => {
        const done = serverState$.pipe(op.filter(type => type === 'stopped'), op.take(1));
        action$.next('stop');
        return done;
    }), op.tap(() => action$.next('start'))), 
    // start -> started, stop -> stopped
    action$.pipe(op.filter(type => type === 'start'), op.concatMap(() => {
        let child$;
        if (forkJsFiles.length > 0 && typeof forkJsFiles[0] === 'string') {
            child$ = rx.from(forkJsFiles).pipe(op.map(forkJsFile => cp.fork(forkJsFile)));
        }
        else {
            child$ = rx.from(forkJsFiles());
        }
        serverState$.next('started');
        const store = new rx.BehaviorSubject({
            numOfExited: 0
        });
        return rx.merge(store.pipe(op.filter(s => s.numOfExited === s.numOfChild), op.take(1), op.tap(() => {
            serverState$.next('stopped');
        })), child$.pipe(op.tap(child => {
            child.on('error', err => {
                // action$.error(err);
                const state = store.getValue();
                store.next(Object.assign(Object.assign({}, state), { numOfExited: state.numOfExited + 1 }));
                console.error('[watch-dir-restart] child process error', err);
            });
            child.on('exit', () => {
                const state = store.getValue();
                store.next(Object.assign(Object.assign({}, state), { numOfExited: state.numOfExited + 1 }));
            });
        }), op.count(), op.map(count => {
            store.next(Object.assign(Object.assign({}, store.getValue()), { numOfChild: count }));
        })), action$.pipe(op.filter(type => type === 'stop'), op.take(1), op.mergeMap(() => child$), op.map(child => child.kill('SIGINT'))));
    })), rx.defer(() => {
        // initial
        action$.next('start');
        return rx.EMPTY;
    })).subscribe();
    return { action$, serverState$ };
}
exports.default = default_1;
//# sourceMappingURL=data:application/json;base64,