{"version":3,"file":"patch-text.js","sourceRoot":"","sources":["../../ts/utils/patch-text.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,+CAAiC;AACjC,6BAA8B;AAoB9B,MAAa,WAAW;IACtB;;;;;OAKG;IACH,YAAmB,KAAa,EAAS,GAAW,EAC3C,IAAY;QADF,UAAK,GAAL,KAAK,CAAQ;QAAS,QAAG,GAAH,GAAG,CAAQ;QAC3C,SAAI,GAAJ,IAAI,CAAQ;QACnB,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,EAAE,kDAAkD,CAAC,CAAC;IAClF,CAAC;CACF;AAXD,kCAWC;AAED,SAAgB,qBAAqB,CAAC,YAA8B,EAAE,aAAa,GAAG,IAAI,EAAE,IAAY;IACtG,YAAY,CAAC,IAAI,CAAC,UAAS,CAAC,EAAE,CAAC;QAC7B,OAAO,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC;IAC3B,CAAC,CAAC,CAAC;IAEH,IAAI,YAAY,CAAC,MAAM,GAAG,CAAC;QACzB,OAAO;IACT,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,GAAG;QAC/C,IAAI,YAAY,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,YAAY,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE;YACnD,MAAM,IAAI,GAAG,YAAY,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACjC,MAAM,IAAI,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;YAC7B,IAAI,aAAa,EAAE;gBACjB,YAAY,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBAC1B,CAAC,EAAE,CAAC;aACL;iBAAM;gBACL,MAAM,IAAI,KAAK,CAAC;OACjB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,KAAK,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;WACnD,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,KAAK,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;aAC/D;SACF;;YACC,CAAC,EAAE,CAAC;KACP;AACH,CAAC;AAtBD,sDAsBC;AAED,SAAgB,cAAc,CAAC,IAAY,EAAE,YAA8B;IACzE,IAAI,MAAM,GAAG,CAAC,CAAC;IACf,OAAO,YAAY,CAAC,MAAM,CAAC,CAAC,IAAY,EAAE,MAAsB,EAAE,EAAE;QAClE,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC;QACpC,MAAM,GAAG,GAAG,MAAM,CAAC,GAAG,GAAG,MAAM,CAAC;QAChC,MAAM,WAAW,GAAG,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC;QAC3E,MAAM,IAAI,CAAC,WAAY,CAAC,MAAM,GAAG,CAAC,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC;QAChD,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,GAAG,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAC9D,CAAC,EAAE,IAAI,CAAC,CAAC;AACX,CAAC;AATD,wCASC;AAED,SAAwB,WAAW,CAAC,IAAY,EAAE,YAA8B,EAAE,aAAa,GAAG,KAAK;IACrG,qBAAqB,CAAC,YAAY,EAAE,aAAa,EAAE,IAAI,CAAC,CAAC;IACzD,OAAO,cAAc,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;AAC5C,CAAC;AAHD,8BAGC","sourcesContent":["import * as assert from 'assert';\nimport util = require('util');\n\n/**\n * @param  {[type]} text\n * @param  {object} replacements\n * @param  {number} replacements.start\n * @param  {number} replacements.end\n * @param  {string} replacements.replacement\n * @return {string}           \treplaced text\n */\nexport interface ReplacementInf {\n  start: number;\n  /**\n   * excluded index\n   */\n  end: number;\n  text?: string;\n  replacement?: string;\n}\n\nexport class Replacement implements ReplacementInf {\n  /**\n   * Replacement\n   * @param start included index\n   * @param end excluded index\n   * @param text\n   */\n  constructor(public start: number, public end: number,\n    public text: string) {\n    assert.notEqual(text, null, 'replacement text should not be null or undefined');\n  }\n}\n\nexport function _sortAndRemoveOverlap(replacements: ReplacementInf[], removeOverlap = true, text: string) {\n  replacements.sort(function(a, b) {\n    return a.start - b.start;\n  });\n\n  if (replacements.length < 2)\n    return;\n  for (let i = 1, l = replacements.length; i < l;) {\n    if (replacements[i].start < replacements[i - 1].end) {\n      const prev = replacements[i - 1];\n      const curr = replacements[i];\n      if (removeOverlap) {\n        replacements.splice(i, 1);\n        l--;\n      } else {\n        throw new Error(`Overlap replacements: \n\t\t\t\t\"${text.slice(curr.start, curr.end)}\" ${util.inspect(curr)}\n\t\t\t\tand \"${text.slice(prev.start, prev.end)}\" ${util.inspect(prev)}`);\n      }\n    } else\n      i++;\n  }\n}\n\nexport function _replaceSorted(text: string, replacements: ReplacementInf[]) {\n  let offset = 0;\n  return replacements.reduce((text: string, update: ReplacementInf) => {\n    const start = update.start + offset;\n    const end = update.end + offset;\n    const replacement = update.text != null ? update.text : update.replacement;\n    offset += (replacement!.length - (end - start));\n    return text.slice(0, start) + replacement + text.slice(end);\n  }, text);\n}\n\nexport default function replaceCode(text: string, replacements: ReplacementInf[], removeOverlap = false) {\n  _sortAndRemoveOverlap(replacements, removeOverlap, text);\n  return _replaceSorted(text, replacements);\n}\n"]}