{"version":3,"file":"ts-node-setup.js","sourceRoot":"","sources":["../../ts/utils/ts-node-setup.ts"],"names":[],"mappings":";;;;;AAAA,4CAAoB;AACpB,gDAAwB;AACxB,4DAA4B;AAC5B,qCAAmD;AACnD,4EAA+E;AAC/E,iCAAgC;AAEhC,SAAS,QAAQ;IACf,MAAM,iBAAiB,GAAG,cAAI,CAAC,OAAO,CAAC,SAAS,EAAE,0BAA0B,CAAC,CAAC;IAE9E,mEAAmE;IACnE,MAAM,EAAC,eAAe,EAAC,GAAG,oBAAE,CAAC,cAAc,CAAC,iBAAiB,EAC3D,IAAI,CAAC,EAAE,CAAC,YAAE,CAAC,YAAY,CAAC,IAAI,EAAE,MAAM,CAAC,CACtC,CAAC,MAAM,CAAC;IACT,+GAA+G;IAE/G,IAAA,iDAA2B,EAAC,OAAO,CAAC,GAAG,EAAE,EAAE,IAAI,EAAE,eAAe,EAAE;QAChE,eAAe,EAAE,IAAI;QACrB,YAAY,EAAE,eAAQ,CAAC,OAAO;KAC/B,CAAC,CAAC;IAEH,eAAe,CAAC,MAAM,GAAG,UAAU,CAAC;IACpC,eAAe,CAAC,cAAc,GAAG,KAAK,CAAC;IACvC,eAAe,CAAC,WAAW,GAAG,IAAI,CAAC;IACnC,eAAe,CAAC,WAAW,GAAG,KAAK,CAAC;IACpC,OAAO,eAAe,CAAC,OAAO,CAAC;IAE/B,gCAAgC;IAChC,IAAA,kBAAc,EAAC;QACb,SAAS,EAAE,IAAI;QACf,eAAe;QACf,UAAU,EAAE,IAAI;QAChB,QAAQ,EAAE,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC;QACvC;;WAEG;QACH,WAAW,EAAE,IAAI;QACjB,YAAY,EAAE;YACZ,MAAM,EAAE;gBACN,OAAO,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE;oBACjB,sDAAsD;oBACtD,yBAAyB;oBACzB,OAAO,GAAG,CAAC;gBACb,CAAC;aACF;YACD,KAAK,EAAE;gBACL,OAAO,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE;oBACjB,+CAA+C;oBAC/C,yBAAyB;oBACzB,OAAO,GAAG,CAAC;gBACb,CAAC;aACF;SACF;KACF,CAAC,CAAC;AACL,CAAC;AAED,IAAI;IACF,QAAQ,EAAE,CAAC;CACZ;AAAC,OAAO,CAAC,EAAE;IACV,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;CAClB","sourcesContent":["import fs from 'fs';\nimport Path from 'path';\nimport ts from 'typescript';\nimport {register as registerTsNode} from 'ts-node';\nimport {setTsCompilerOptForNodePath} from '../package-mgr/package-list-helper';\nimport {plinkEnv} from './misc';\n\nfunction register() {\n  const internalTscfgFile = Path.resolve(__dirname, '../../tsconfig-base.json');\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const {compilerOptions} = ts.readConfigFile(internalTscfgFile,\n    file => fs.readFileSync(file, 'utf8')\n  ).config;\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\n\n  setTsCompilerOptForNodePath(process.cwd(), './', compilerOptions, {\n    enableTypeRoots: true,\n    workspaceDir: plinkEnv.workDir\n  });\n\n  compilerOptions.module = 'commonjs';\n  compilerOptions.noUnusedLocals = false;\n  compilerOptions.diagnostics = true;\n  compilerOptions.declaration = false;\n  delete compilerOptions.rootDir;\n\n  // console.log(compilerOptions);\n  registerTsNode({\n    typeCheck: true,\n    compilerOptions,\n    skipIgnore: true, // important, by \"false\" will ignore files are under node_modules\n    compiler: require.resolve('typescript'),\n    /**\n     * Important!! prevent ts-node looking for tsconfig.json from current working directory\n     */\n    skipProject: true,\n    transformers: {\n      before: [\n        context => (src) => {\n          // log.info('before ts-node compiles:', src.fileName);\n          // console.log(src.text);\n          return src;\n        }\n      ],\n      after: [\n        context => (src) => {\n          // log.info('ts-node compiles:', src.fileName);\n          // console.log(src.text);\n          return src;\n        }\n      ]\n    }\n  });\n}\n\ntry {\n  register();\n} catch (e) {\n  console.error(e);\n}\n\n"]}