"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RedBlackTree = void 0;
/**
 * According to the book << Introduction to Algorithms, Third Edition >>
 * include features: Dynamic order statistics, range tree
 */
class RedBlackTree {
    constructor(comparator) {
        this.comparator = comparator;
        if (comparator == null) {
            this.comparator = (a, b) => {
                return a < b ? -1 :
                    a > b ? 1 : 0;
            };
        }
    }
    /**
     *
     * @param key
     * @returns null if key duplicates with existing tree node
     */
    insert(key) {
        let y;
        let x = this.root;
        let cmp;
        while (x != null) {
            y = x;
            cmp = this.comparator(key, x.key);
            if (cmp < 0) {
                x = x.left;
            }
            else if (cmp > 0) {
                x = x.right;
            }
            else {
                return null; // duplicate key found
            }
        }
        const z = {
            isRed: true,
            key,
            p: y,
            size: 0
        };
        if (y == null) {
            this.root = z;
            z.isRed = false;
        }
        else if (cmp < 0) {
            y.left = z;
        }
        else if (cmp > 0) {
            y.right = z;
        }
        this.redBlackInsertFixUp(z);
        return z;
    }
    delete(key) {
        const node = this.search(key);
        if (node == null) {
            return false;
        }
        this.deleteNode(node);
        return true;
    }
    deleteNode(node) {
        let origIsRed = node.isRed;
        let x;
        if (node.left == null) {
            x = node.right;
            this.transplant(node, node.right);
        }
        else if (node.right == null) {
            x = node.left;
            this.transplant(node, node.left);
        }
        else {
            // both left and right child are not empty
            const rightMin = this.minimumOf(node.right);
            origIsRed = rightMin.isRed;
            x = rightMin.right;
            if (rightMin.p !== node) {
                this.transplant(rightMin, rightMin.right);
                rightMin.right = node.right;
                rightMin.right.p = rightMin;
            }
            else {
                this.transplant(node, rightMin);
            }
            rightMin.left = node.left;
            rightMin.left.p = rightMin;
            rightMin.isRed = node.isRed;
        }
        if (!origIsRed && x) {
            console.log('fixup', x.key);
            this.deleteFixup(x);
        }
    }
    deleteFixup(x) {
        while (x.p && x !== this.root && !x.isRed) {
            if (x === x.p.left && x.p.right) {
                let w = x.p.right; // w is x's sibling
                if (w.isRed) {
                    w.isRed = false;
                    x.p.isRed = true;
                    this.leftRotate(x.p);
                    w = x.p.right;
                }
                if (w.left && !w.left.isRed && w.right && !w.right.isRed) {
                    w.isRed = true;
                    x = x.p;
                }
                else {
                    if (w.right && !w.right.isRed && w.left) {
                        w.left.isRed = false;
                        w.isRed = true;
                        this.rightRotate(w);
                        w = x.p.right;
                    }
                    w.isRed = x.p.isRed;
                    x.p.isRed = false;
                    if (w.right)
                        w.right.isRed = false;
                    this.leftRotate(x.p);
                    x = this.root;
                }
            }
            else if (x === x.p.right && x.p.left) {
                let w = x.p.left; // w is x's sibling
                if (w.isRed) {
                    w.isRed = false;
                    x.p.isRed = true;
                    this.rightRotate(x.p);
                    w = x.p.left;
                }
                if (w.right && !w.right.isRed && w.left && !w.left.isRed) {
                    w.isRed = true;
                    x = x.p;
                }
                else {
                    if (w.left && !w.left.isRed && w.right) {
                        w.right.isRed = false;
                        w.isRed = true;
                        this.leftRotate(w);
                        w = x.p.left;
                    }
                    w.isRed = x.p.isRed;
                    x.p.isRed = false;
                    if (w.left)
                        w.left.isRed = false;
                    this.rightRotate(x.p);
                    x = this.root;
                }
            }
        }
        x.isRed = false;
    }
    minimumOf(node = this.root) {
        while (node.left) {
            node = node.left;
        }
        return node;
    }
    maximumOf(node = this.root) {
        while (node.right)
            node = node.right;
        return node;
    }
    transplant(replaceNode, withNode) {
        if (replaceNode.p == null) {
            this.root = withNode;
        }
        else if (replaceNode === replaceNode.p.left) {
            replaceNode.p.left = withNode;
        }
        else {
            replaceNode.p.right = withNode;
        }
        if (withNode)
            withNode.p = replaceNode.p;
    }
    search(key) {
        let node = this.root;
        while (node != null) {
            const cmp = this.comparator(key, node.key);
            if (cmp === 0)
                return node;
            if (cmp < 0) {
                node = node.left;
            }
            else {
                node = node.right;
            }
        }
        return null;
    }
    redBlackInsertFixUp(z) {
        var _a, _b, _c, _d;
        while (z.p && z.p.isRed) {
            if (z.p === ((_a = z.p.p) === null || _a === void 0 ? void 0 : _a.left)) {
                const uncle = z.p.p.right;
                if (uncle === null || uncle === void 0 ? void 0 : uncle.isRed) {
                    // mark parent and uncle to black, grandpa to red, continue to go up to grandpa level
                    z.p.isRed = false;
                    uncle.isRed = false;
                    z.p.p.isRed = true;
                    z = z.p.p;
                }
                else {
                    // uncle is black
                    if (z === z.p.right) {
                        // if is right child tree
                        z = z.p;
                        this.leftRotate(z);
                    }
                    if ((_b = z.p) === null || _b === void 0 ? void 0 : _b.p) {
                        z.p.isRed = false;
                        z.p.p.isRed = true;
                        this.rightRotate(z.p.p);
                    }
                }
            }
            else if (z.p === ((_c = z.p.p) === null || _c === void 0 ? void 0 : _c.right)) {
                const uncle = z.p.p.left;
                if (uncle === null || uncle === void 0 ? void 0 : uncle.isRed) {
                    // mark parent and uncle to black, grandpa to red, continue to go up to grandpa level
                    z.p.isRed = false;
                    uncle.isRed = false;
                    z.p.p.isRed = true;
                    z = z.p.p;
                }
                else {
                    if (z === z.p.left) {
                        // if is right child tree
                        z = z.p;
                        this.rightRotate(z);
                    }
                    if ((_d = z.p) === null || _d === void 0 ? void 0 : _d.p) {
                        z.p.isRed = false;
                        z.p.p.isRed = true;
                        this.leftRotate(z.p.p);
                    }
                }
            }
        }
        this.root.isRed = false;
    }
    leftRotate(x) {
        const y = x.right;
        x.right = y.left;
        if (y.left) {
            y.left.p = x;
        }
        y.p = x.p;
        if (x.p == null)
            this.root = y;
        else if (x === x.p.left)
            x.p.left = y;
        else
            x.p.right = y;
        y.left = x;
        x.p = y;
    }
    rightRotate(x) {
        const y = x.left;
        x.left = y.right;
        if (y.right) {
            y.right.p = x;
        }
        y.p = x.p;
        if (x.p == null)
            this.root = y;
        else if (x === x.p.right)
            x.p.right = y;
        else
            x.p.left = y;
        y.right = x;
        x.p = y;
    }
}
exports.RedBlackTree = RedBlackTree;
RedBlackTree.nil = {
    isRed: false,
    size: 0
};
//# sourceMappingURL=data:application/json;base64,