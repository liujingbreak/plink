{"version":3,"file":"data-structures.js","sourceRoot":"","sources":["../../ts/utils/data-structures.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * According to the book << Introduction to Algorithms, Third Edition >>\n * \n * features in progress: Dynamic order statistics, range tree\n * \n * This data structure is meant for being extend, since the majority of 3rd-party red-black tree on npmjs.org is not extensible\n */\n\nexport interface RbTreeNode<T> {\n  key: T;\n  p: RbTreeNode<T> | null;\n  left: RbTreeNode<T> | null;\n  right: RbTreeNode<T> | null;\n  isRed: boolean;\n  size: number;\n}\nexport class RedBlackTree<T> {\n  root: RbTreeNode<T> | null | undefined = null;\n\n  constructor(protected comparator?: (a: T, b: T) => number) {\n    if (comparator == null) {\n      this.comparator = (a, b) => {\n        return a < b ? -1 :\n          a > b ? 1 : 0;\n      };\n    }\n  }\n\n  /**\n   * \n   * @param key\n   * @returns null if key duplicates with existing tree node\n   */\n  insert(key: T): RbTreeNode<T> | null {\n    let y: RbTreeNode<T> | null = null;\n    let x = this.root;\n    let cmp: number;\n    while (x) {\n      y = x ;\n      cmp = this.comparator!(key, x.key);\n      if (cmp < 0) {\n        x = x.left;\n      } else if (cmp > 0) {\n        x = x.right;\n      } else {\n        return null; // duplicate key found\n      }\n    }\n    const z: RbTreeNode<T> = {\n      isRed: true,\n      key,\n      p: y,\n      left: null,\n      right: null,\n      size: 0\n    };\n    if (y == null) {\n      this.root = z;\n    } else if (cmp! < 0 ) {\n      y.left = z;\n    } else if (cmp! > 0 ) {\n      y.right = z;\n    }\n    this.redBlackInsertFixUp(z);\n    return z;\n  }\n\n  delete(key: T) {\n    const node = this.search(key);\n    if (node == null) {\n      return false;\n    }\n    this.deleteNode(node);\n    return true;\n  }\n\n  isRed(node: RbTreeNode<T> | null | undefined) {\n    return node != null && node.isRed;\n  }\n\n  isBlack(node: RbTreeNode<T> | null | undefined) {\n    return node == null || !node.isRed;\n  }\n\n  protected deleteNode(z: RbTreeNode<T>) {\n    let y: RbTreeNode<T> | null  = z;\n    let origIsRed = this.isRed(y);\n    let x: RbTreeNode<T> | null = null;\n    if (z.left == null) {\n      x = z.right;\n      this.transplant(z, z.right);\n    } else if (z.right == null) {\n      x = z.left;\n      this.transplant(z, z.left);\n    } else {\n      // both left and right child are not empty\n      y = this.minimumOf(z.right);\n      if (y == null)\n        return false;\n      origIsRed = this.isRed(y);\n      x = y.right;\n      if (y.p === z) {\n        if (x) x.p = y;\n      } else {\n        this.transplant(y, y.right);\n        y.right = z.right;\n        y.right.p = y;\n      }\n      this.transplant(z, y);\n      y.left = z.left;\n      y.left.p = y;\n      y.isRed = this.isRed(z);\n    }\n    if (!origIsRed && x) {\n      // console.log('delete fixup', x.key);\n      this.deleteFixup(x);\n    }\n    return true;\n  }\n\n  private deleteFixup(x: RbTreeNode<T>) {\n    while (x !== this.root && this.isBlack(x)) {\n      if (x.p && x === x.p.left) {\n        let w = x.p.right; // w is x's sibling\n        if (this.isRed(w)) {\n          w!.isRed = false;\n          x.p.isRed = true;\n          this.leftRotate(x.p );\n          w = x.p.right;\n        }\n        if (w) {\n          if (this.isBlack(w.left) && this.isBlack(w.right)) {\n            w.isRed = true;\n            x = x.p ;\n          } else {\n            if (this.isBlack(w.right)) {\n              if (w.left)\n                w.left.isRed = false;\n              w.isRed = true;\n              this.rightRotate(w);\n              w = x.p.right;\n            }\n            if (w) w.isRed = this.isRed(x.p);\n            x.p.isRed = false;\n            if (w?.right) w.right.isRed = false;\n            this.leftRotate(x.p );\n            x = this.root!;\n          }\n        }\n      } else if (x.p && x === x.p.right) {\n        let w = x.p.left; // w is x's sibling\n        if (this.isRed(w)) {\n          w!.isRed = false;\n          x.p.isRed = true;\n          this.rightRotate(x.p );\n          w = x.p.left;\n        }\n        if (w) {\n          if (this.isBlack(w.right) && this.isBlack(w.left)) {\n            w.isRed = true;\n            x = x.p ;\n          } else {\n            if (this.isBlack(w.left)) {\n              if (w.right)\n                w.right.isRed = false;\n              w.isRed = true;\n              this.leftRotate(w);\n              w = x.p.left;\n            }\n            if (w) w.isRed = this.isRed(x.p);\n            x.p.isRed = false;\n            if (w?.left) w.left.isRed = false;\n            this.rightRotate(x.p );\n            x = this.root!;\n          }\n        }\n      }\n    }\n    x.isRed = false;\n  }\n\n  minimumOf(node: RbTreeNode<T> | null | undefined = this.root) {\n    // let min: RbTreeNode<T> | null = null;\n    while (node?.left) {\n      node = node.left;\n    }\n    return node ? node : null;\n  }\n\n  private transplant(replaceNode: RbTreeNode<T>, withNode: RbTreeNode<T> | null = null) {\n    if (replaceNode.p == null) {\n      this.root = withNode;\n    } else if (replaceNode === replaceNode.p.left) {\n      replaceNode.p.left = withNode;\n    } else {\n      replaceNode.p.right = withNode;\n    }\n    if (withNode)\n      withNode.p = replaceNode.p;\n  }\n\n  search(key: T): RbTreeNode<T> | null {\n    let node = this.root;\n    while (node) {\n      const cmp = this.comparator!(key, node.key);\n      if (cmp === 0)\n        return node;\n      if (cmp < 0) {\n        node = node.left;\n      } else {\n        node = node.right;\n      }\n    }\n    return null;\n  }\n\n  protected redBlackInsertFixUp(z: RbTreeNode<T>) {\n    while (this.isRed(z.p)) {\n      if (z.p?.p && z.p === z.p.p.left) {\n        const uncle = z.p.p.right;\n        if (this.isRed(uncle)) {\n          // mark parent and uncle to black, grandpa to red, continue to go up to grandpa level\n          z.p.isRed = false;\n          if (uncle) uncle.isRed = false;\n          z.p.p.isRed = true;\n          z = z.p.p;\n        } else {\n          // uncle is black\n          if (z === z.p.right) {\n            // if is right child tree\n            z = z.p;\n            this.leftRotate(z);\n          }\n          if (z.p) {\n            z.p.isRed = false;\n            if (z.p.p) {\n              z.p.p.isRed = true;\n              this.rightRotate(z.p.p);\n            }\n          }\n        }\n      } else if (z.p?.p && z.p === z.p.p.right) {\n        const uncle = z.p.p.left;\n        if (this.isRed(uncle)) {\n          // mark parent and uncle to black, grandpa to red, continue to go up to grandpa level\n          z.p.isRed = false;\n          if (uncle) uncle.isRed = false;\n          z.p.p.isRed = true;\n          z = z.p.p;\n        } else {\n          // uncle is black\n          if (z === z.p.left) {\n            // if is right child tree\n            z = z.p;\n            this.rightRotate(z);\n          }\n          if (z.p) {\n            z.p.isRed = false;\n            if (z.p.p) {\n              z.p.p.isRed = true;\n              this.leftRotate(z.p.p);\n            }\n          }\n        }\n      }\n    }\n    if (this.root)\n      this.root.isRed = false;\n  }\n\n  private leftRotate(x: RbTreeNode<T>) {\n    // console.log('leftRotate', x.key);\n    const y = x.right;\n    if (y == null)\n      return;\n    x.right = y.left;\n    if (y.left) {\n      y.left.p = x;\n    }\n    y.p = x.p;\n    if (x.p == null)\n      this.root = y;\n    else if (x === x.p.left)\n      x.p.left = y;\n    else\n      x.p.right = y;\n    y.left = x;\n    x.p = y;\n  }\n\n  private rightRotate(x: RbTreeNode<T>) {\n    const y = x.left;\n    if (y == null)\n      return;\n    x.left = y.right;\n    if (y.right) {\n      y.right.p = x;\n    }\n    y.p = x.p;\n    if (x.p == null)\n      this.root = y;\n    else if (x === x.p.right)\n      x.p.right = y;\n    else\n      x.p.left = y;\n    y.right = x;\n    x.p = y;\n  }\n}\n\n/** Allow inserting multiple items with same key in a red-black tree */\nexport class DuplicateKeyTree<T> extends RedBlackTree<T> {\n\n}\n\nexport type IntervalKey = {low: number; high: number, max?: number};\n\nfunction intervalComparator(k1: IntervalKey, k2: IntervalKey) {\n  return k1.low - k2.low;\n}\n\nexport class IntervalTree extends RedBlackTree<IntervalKey> {\n  constructor() {\n    super(intervalComparator);\n  }\n}\n\n"]}