"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RedBlackTree = void 0;
/**
 * According to the book << Introduction to Algorithms, Third Edition >>
 */
var RedBlackTree = /** @class */ (function () {
    function RedBlackTree(comparator) {
        this.comparator = comparator;
        if (comparator == null) {
            this.comparator = function (a, b) {
                return a < b ? -1 :
                    a > b ? 1 : 0;
            };
        }
    }
    /**
     *
     * @param key
     * @returns null if key duplicates with existing tree node
     */
    RedBlackTree.prototype.insert = function (key) {
        var y;
        var x = this.root;
        var cmp;
        while (x != null) {
            y = x;
            cmp = this.comparator(key, x.key);
            if (cmp < 0) {
                x = x.left;
            }
            else if (cmp > 0) {
                x = x.right;
            }
            else {
                return null; // duplicate key found
            }
        }
        var z = {
            isRed: true,
            key: key,
            p: y
        };
        if (y == null) {
            this.root = z;
        }
        else if (cmp < 0) {
            y.left = z;
        }
        else if (cmp > 0) {
            y.right = z;
        }
        this.redBlackInsertFixUp(z);
        return z;
    };
    RedBlackTree.prototype.delete = function (key) {
        var node = this.search(key);
        if (node == null) {
            return false;
        }
        if (node.left == null) {
            this.transplant(node, node.right);
        }
        else if (node.right == null) {
            this.transplant(node, node.left);
        }
        else {
            // both left and right child are not empty
            var rightMin = this.minimumOf(node.right);
            if (rightMin.p !== node) {
                this.transplant(rightMin, rightMin.right);
                rightMin.right = node.right;
                rightMin.right.p = rightMin;
            }
            else {
                this.transplant(node, rightMin);
            }
            rightMin.left = node.left;
            rightMin.left.p = rightMin;
        }
    };
    RedBlackTree.prototype.minimumOf = function (node) {
        if (node === void 0) { node = this.root; }
        while (node.left) {
            node = node.left;
        }
        return node;
    };
    RedBlackTree.prototype.maximumOf = function (node) {
        if (node === void 0) { node = this.root; }
        while (node.right)
            node = node.right;
        return node;
    };
    RedBlackTree.prototype.transplant = function (replaceNode, withNode) {
        if (replaceNode.p == null) {
            this.root = withNode;
        }
        else if (replaceNode === replaceNode.p.left) {
            replaceNode.p.left = withNode;
        }
        else {
            replaceNode.p.right = withNode;
        }
        if (withNode)
            withNode.p = replaceNode.p;
    };
    RedBlackTree.prototype.search = function (key) {
        var node = this.root;
        while (node != null) {
            var cmp = this.comparator(key, node.key);
            if (cmp === 0)
                return node;
            if (cmp < 0) {
                node = node.left;
            }
            else {
                node = node.right;
            }
        }
        return null;
    };
    RedBlackTree.prototype.redBlackInsertFixUp = function (z) {
        var _a, _b, _c, _d;
        while (z.p && z.p.isRed) {
            if (z.p === ((_a = z.p.p) === null || _a === void 0 ? void 0 : _a.left)) {
                var uncle = z.p.p.right;
                if (uncle === null || uncle === void 0 ? void 0 : uncle.isRed) {
                    // mark parent and uncle to black, grandpa to red, continue to go up to grandpa level
                    z.p.isRed = false;
                    uncle.isRed = false;
                    z.p.p.isRed = true;
                    z = z.p.p;
                }
                else {
                    // uncle is black
                    if (z === z.p.right) {
                        // if is right child tree
                        z = z.p;
                        this.leftRotate(z);
                    }
                    if ((_b = z.p) === null || _b === void 0 ? void 0 : _b.p) {
                        z.p.isRed = false;
                        z.p.p.isRed = true;
                        this.rightRotate(z.p.p);
                    }
                }
            }
            else if (z.p === ((_c = z.p.p) === null || _c === void 0 ? void 0 : _c.right)) {
                var uncle = z.p.p.left;
                if (uncle === null || uncle === void 0 ? void 0 : uncle.isRed) {
                    // mark parent and uncle to black, grandpa to red, continue to go up to grandpa level
                    z.p.isRed = false;
                    uncle.isRed = false;
                    z.p.p.isRed = true;
                    z = z.p.p;
                }
                else {
                    if (z === z.p.left) {
                        // if is right child tree
                        z = z.p;
                        this.rightRotate(z);
                    }
                    if ((_d = z.p) === null || _d === void 0 ? void 0 : _d.p) {
                        z.p.isRed = false;
                        z.p.p.isRed = true;
                        this.leftRotate(z.p.p);
                    }
                }
            }
        }
    };
    RedBlackTree.prototype.leftRotate = function (x) {
        var y = x.right;
        x.right = y.left;
        if (y.left) {
            y.left.p = x;
        }
        y.p = x.p;
        if (x.p == null)
            this.root = y;
        else if (x === x.p.left)
            x.p.left = y;
        else
            x.p.right = y;
        y.left = x;
        x.p = y;
    };
    RedBlackTree.prototype.rightRotate = function (x) {
        var y = x.left;
        x.left = y.right;
        if (y.right) {
            y.right.p = x;
        }
        y.p = x.p;
        if (x.p == null)
            this.root = y;
        else if (x === x.p.right)
            x.p.right = y;
        else
            x.p.left = y;
        y.right = x;
        x.p = y;
    };
    return RedBlackTree;
}());
exports.RedBlackTree = RedBlackTree;
//# sourceMappingURL=data:application/json;base64,