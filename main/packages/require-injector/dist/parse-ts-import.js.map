{"version":3,"file":"parse-ts-import.js","sourceRoot":"","sources":["../ts/parse-ts-import.ts"],"names":[],"mappings":"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","sourcesContent":["// tslint:disable:max-line-length\nimport * as _ts from 'typescript';\nimport * as fs from 'fs';\nimport * as Path from 'path';\nimport * as _ from 'lodash';\nimport {ParseInfo} from './parse-esnext-import';\nimport {FactoryMap, ReplaceType, ReplacedResult} from './factory-map';\nimport patchText from './patch-text';\nimport ReplaceRequire from './replace-require';\n\nexport function parseTs(file: string) {\n  // let source = fs.readFileSync(Path.resolve(__dirname, '../../ts/spec/test-ts.txt'), 'utf8');\n  let source = fs.readFileSync(Path.resolve(file), 'utf8');\n  let sFile = _ts.createSourceFile('test-ts.ts', source,\n    _ts.ScriptTarget.ES2015);\n  traverse(sFile);\n  function traverse(ast: _ts.Node, level = 0) {\n    // tslint:disable-next-line:no-console\n    console.log(_.repeat(' |- ', level) + _ts.SyntaxKind[ast.kind]);\n    if (ast.kind === _ts.SyntaxKind.ImportDeclaration) {\n      // tslint:disable-next-line:no-console\n      console.log('found import statement', ast.getText(sFile));\n    }\n    // let count = 0;\n    ast.forEachChild((sub: _ts.Node) => {\n      traverse(sub, level + 1);\n      // count++;\n    });\n    // if (count === 0) {\n    // tslint:disable-next-line:no-console\n    console.log(_.repeat(' |- ', level + 1), `\"${ast.getText(sFile)}\"`);\n    // }\n  }\n}\n\nexport class TypescriptParser {\n  srcfile: _ts.SourceFile;\n\n  private _addPatch: (start: number, end: number, moduleName: string, replaceType: ReplaceType) => void;\n  private _addPatch4Import: (allStart: number, allEnd: number, start: number, end: number,\n    moduleName: string, info: ParseInfo) => void;\n\n  constructor(public esReplacer: ReplaceRequire | null = null, public ts = _ts) {}\n\n  replace(code: string, factoryMaps: FactoryMap[] | FactoryMap, filePath: string, ast?: _ts.SourceFile):\n    {replaced: string | null, patches: Array<{start: number, end: number, replacement: string}>} {\n\n    let patches: Array<{start: number, end: number, replacement: string}> = [];\n    let self = this;\n    const _factoryMaps = ([] as FactoryMap[]).concat(factoryMaps);\n    this._addPatch = function(this: TypescriptParser, start: number, end: number, moduleName: string, replaceType: ReplaceType) {\n      if (! this.esReplacer)\n        return;\n      this.esReplacer.addPatch(patches, start, end, moduleName, replaceType, _factoryMaps, filePath);\n    };\n    this._addPatch4Import = function(allStart: number, allEnd: number, start: number, end: number,\n      moduleName: string, info: ParseInfo) {\n        _factoryMaps.some((factoryMap: FactoryMap) => {\n        var setting = factoryMap.matchRequire(info.from);\n        if (setting) {\n          var replacement = factoryMap.getReplacement(setting, ReplaceType.imp, filePath, info) as ReplacedResult;\n          if (replacement != null) {\n            patches.push({\n              start: replacement.replaceAll ? allStart : start,\n              end: replacement.replaceAll ? allEnd : end,\n              replacement: replacement.code\n            });\n            if (self.esReplacer)\n              self.esReplacer.emit('replace', info.from, replacement.code);\n          }\n          return true;\n        }\n        return false;\n      });\n    };\n\n    this.parseTsSource(code, filePath, ast);\n    return {\n      replaced: patches.length > 0 ? patchText(code, patches) : null,\n      patches\n    };\n  }\n\n  parseTsSource(source: string, file: string, ast?: _ts.SourceFile): void {\n    this.srcfile = ast || this.ts.createSourceFile(file, source, this.ts.ScriptTarget.ESNext,\n      true, this.ts.ScriptKind.TSX);\n    const asts: _ts.Node[] = [...this.srcfile.statements];\n    let node = asts.shift();\n    while (node != null) {\n      this.traverseTsAst(node, this.srcfile, asts);\n      node = asts.shift();\n    }\n  }\n\n  private traverseTsAst(ast: _ts.Node, srcfile: _ts.SourceFile, visitLater: _ts.Node[]) {\n    let SyntaxKind = this.ts.SyntaxKind;\n    if (ast.kind === SyntaxKind.ImportDeclaration || ast.kind === SyntaxKind.ExportDeclaration) {\n      let node = ast as _ts.ImportDeclaration;\n      // console.log('found import statement:', ast.getText(srcfile));\n      let parseInfo = new ParseInfo();\n      if (!node.moduleSpecifier && ast.kind === SyntaxKind.ExportDeclaration) {\n        return;\n      }\n      parseInfo.from = (node.moduleSpecifier as _ts.StringLiteral).text;\n\n      // parseInfo.from = /^[ '\"]*([^'\"]+)[ '\"]*$/.exec(srcfile.text.substring(node.moduleSpecifier.getStart(this.srcfile, false), node.moduleSpecifier.getEnd()))[1];\n      if (_.get(node, 'importClause.name')) {\n        parseInfo.defaultVar = node.importClause!.name!.text;\n      }\n      if (_.get(node, 'importClause.namedBindings')) {\n        let nb = node.importClause!.namedBindings!;\n        if (nb.kind === SyntaxKind.NamespaceImport) {\n          parseInfo.namespaceVar = nb.name.text;\n        } else {\n          nb.elements.forEach(element => {\n            parseInfo.vars[element.name.text] = element.propertyName ? element.propertyName.text : element.name.text;\n          });\n        }\n      }\n      this._addPatch4Import(node.getStart(this.srcfile, false), node.getEnd(), node.moduleSpecifier.getStart(this.srcfile, false),\n        node.moduleSpecifier.getEnd(), parseInfo.from, parseInfo);\n      // console.log(getTextOf(node.moduleSpecifier, srcfile));\n      return;\n    } else if (ast.kind === SyntaxKind.CallExpression) {\n      let node = ast as _ts.CallExpression;\n      if (node.expression.kind === SyntaxKind.Identifier &&\n        (node.expression as _ts.Identifier).text === 'require' &&\n        node.arguments[0].kind === SyntaxKind.StringLiteral) {\n        // console.log('Found', getTextOf(node, srcfile));\n        this._addPatch(node.getStart(this.srcfile, false), node.getEnd(), (node.arguments[0] as _ts.StringLiteral).text, ReplaceType.rq);\n        return;\n      } else if (node.expression.kind === SyntaxKind.ImportKeyword) {\n        // console.log('Found import() ', node.arguments.map(arg => (arg as any).text));\n        this._addPatch(node.getStart(this.srcfile, false), node.getEnd(), (node.arguments[0] as _ts.StringLiteral).text, ReplaceType.ima);\n        return;\n      } else if (node.expression.kind === SyntaxKind.PropertyAccessExpression) {\n        let left = (node.expression as _ts.PropertyAccessExpression).expression;\n        let right = (node.expression as _ts.PropertyAccessExpression).name;\n        if (left.kind === SyntaxKind.Identifier && (left as _ts.Identifier).text === 'require' &&\n        right.kind === SyntaxKind.Identifier && (right as _ts.Identifier).text === 'ensure') {\n          node.arguments.forEach((arg) => {\n            if (arg.kind === SyntaxKind.StringLiteral) {\n              this._addPatch(arg.getStart(this.srcfile, false), arg.getEnd(), (arg as _ts.StringLiteral).text, ReplaceType.rs);\n              // console.log(`replace require.ensure(${(arg as ts.StringLiteral).text})`);\n            } else if (arg.kind === SyntaxKind.ArrayLiteralExpression) {\n              const arrArg = arg as _ts.ArrayLiteralExpression;\n              for (const moduleNameAst of arrArg.elements) {\n                if (moduleNameAst.kind !== SyntaxKind.StringLiteral) {\n                  // tslint:disable-next-line:no-console\n                  console.log('[require-injector] parse %s failed, only support arguments of `require.ensure()` as StringLiteral', this.srcfile.fileName);\n                  continue;\n                }\n                this._addPatch(moduleNameAst.getStart(this.srcfile, false),\n                  moduleNameAst.getEnd(), (moduleNameAst as _ts.StringLiteral).text, ReplaceType.rs);\n              }\n            }\n          });\n          // console.log('Found require.ensure()', node.arguments.map(arg => (arg as any).text));\n        }\n      }\n    }\n    visitLater.push(...ast.getChildren());\n  }\n}\n"]}