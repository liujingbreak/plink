{"version":3,"file":"patch-text.js","sourceRoot":"","sources":["../ts/patch-text.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,+CAAiC;AACjC,6BAA8B;AAiB9B,MAAa,WAAW;IACvB,YAAmB,KAAa,EAAS,GAAW,EAC5C,IAAY;QADD,UAAK,GAAL,KAAK,CAAQ;QAAS,QAAG,GAAH,GAAG,CAAQ;QAC5C,SAAI,GAAJ,IAAI,CAAQ;QACnB,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,EAAE,kDAAkD,CAAC,CAAC;IACjF,CAAC;CACD;AALD,kCAKC;AAED,SAAgB,qBAAqB,CAAC,YAA8B,EAAE,aAAa,GAAG,IAAI,EAAE,IAAY;IACvG,YAAY,CAAC,IAAI,CAAC,UAAS,CAAC,EAAE,CAAC;QAC9B,OAAO,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC;IAC1B,CAAC,CAAC,CAAC;IAEH,IAAI,YAAY,CAAC,MAAM,GAAG,CAAC;QAC1B,OAAO;IACR,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,GAAG;QAChD,IAAI,YAAY,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,YAAY,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE;YACpD,IAAI,IAAI,GAAG,YAAY,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YAC/B,IAAI,IAAI,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;YAC3B,IAAI,aAAa,EAAE;gBAClB,YAAY,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBAC1B,CAAC,EAAE,CAAC;aACJ;iBAAM;gBACN,MAAM,IAAI,KAAK,CAAC;OACb,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,KAAK,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;WACnD,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,KAAK,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;aAClE;SACD;;YACA,CAAC,EAAE,CAAC;KACL;AACF,CAAC;AAtBD,sDAsBC;AAED,SAAgB,cAAc,CAAC,IAAY,EAAE,YAA8B;IAC1E,IAAI,MAAM,GAAG,CAAC,CAAC;IACf,OAAO,YAAY,CAAC,MAAM,CAAC,CAAC,IAAY,EAAE,MAAsB,EAAE,EAAE;QACnE,IAAI,KAAK,GAAG,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC;QAClC,IAAI,GAAG,GAAG,MAAM,CAAC,GAAG,GAAG,MAAM,CAAC;QAC9B,IAAI,WAAW,GAAG,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC;QACzE,MAAM,IAAI,CAAC,WAAY,CAAC,MAAM,GAAG,CAAC,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC;QAChD,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,GAAG,WAAY,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAC9D,CAAC,EAAE,IAAI,CAAC,CAAC;AACV,CAAC;AATD,wCASC;AAED,SAAwB,WAAW,CAAC,IAAY,EAAE,YAA8B,EAAE,aAAa,GAAG,KAAK;IACtG,qBAAqB,CAAC,YAAY,EAAE,aAAa,EAAE,IAAI,CAAC,CAAC;IACzD,OAAO,cAAc,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;AAC3C,CAAC;AAHD,8BAGC","sourcesContent":["import * as assert from 'assert';\nimport util = require('util');\n\n/**\n * @param  {[type]} text\n * @param  {object} replacements\n * @param  {number} replacements.start\n * @param  {number} replacements.end\n * @param  {string} replacements.replacement\n * @return {string}           \treplaced text\n */\nexport interface ReplacementInf {\n\tstart: number;\n\tend: number;\n\ttext?: string;\n\treplacement?: string;\n}\n\nexport class Replacement implements ReplacementInf {\n\tconstructor(public start: number, public end: number,\n\t\tpublic text: string) {\n\t\tassert.notEqual(text, null, 'replacement text should not be null or undefined');\n\t}\n}\n\nexport function _sortAndRemoveOverlap(replacements: ReplacementInf[], removeOverlap = true, text: string) {\n\treplacements.sort(function(a, b) {\n\t\treturn a.start - b.start;\n\t});\n\n\tif (replacements.length < 2)\n\t\treturn;\n\tfor (let i = 1, l = replacements.length; i < l;) {\n\t\tif (replacements[i].start < replacements[i - 1].end) {\n\t\t\tlet prev = replacements[i - 1];\n\t\t\tlet curr = replacements[i];\n\t\t\tif (removeOverlap) {\n\t\t\t\treplacements.splice(i, 1);\n\t\t\t\tl--;\n\t\t\t} else {\n\t\t\t\tthrow new Error(`Overlap replacements: \n\t\t\t\t\"${text.slice(curr.start, curr.end)}\" ${util.inspect(curr)}\n\t\t\t\tand \"${text.slice(prev.start, prev.end)}\" ${util.inspect(prev)}`);\n\t\t\t}\n\t\t} else\n\t\t\ti++;\n\t}\n}\n\nexport function _replaceSorted(text: string, replacements: ReplacementInf[]) {\n\tvar offset = 0;\n\treturn replacements.reduce((text: string, update: ReplacementInf) => {\n\t\tvar start = update.start + offset;\n\t\tvar end = update.end + offset;\n\t\tvar replacement = update.text == null ? update.replacement : update.text;\n\t\toffset += (replacement!.length - (end - start));\n\t\treturn text.slice(0, start) + replacement! + text.slice(end);\n\t}, text);\n}\n\nexport default function replaceCode(text: string, replacements: ReplacementInf[], removeOverlap = false) {\n\t_sortAndRemoveOverlap(replacements, removeOverlap, text);\n\treturn _replaceSorted(text, replacements);\n}\n"]}