{"version":3,"file":"css-loader.js","sourceRoot":"","sources":["../ts/css-loader.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport Inject from './replace-require';\nimport {FactoryFunc} from './factory-map';\nconst log = require('log4js').getLogger('require-injector.cssLoader');\nvar lu = require('loader-utils');\nvar rj = require('.');\n/**\n * Some legacy LESS files reply on npm-import-plugin, which are using convention like\n * \"import 'npm://bootstrap/less/bootstrap';\" to locate LESS file from node_modules,\n * but with Webpack resolver, it changes to use `@import \"~bootstrap/less/bootstrap\";`.\n *\n * This loader replaces all \"import ... npm://\"s with webpack's \"import ... ~\" style,\n * and works with require-injector to replace package.\n */\nfunction loader(content: string, sourcemap: any) {\n\tvar callback = this.async();\n\tif (!callback)\n\t\tthrow new Error('Must be used as async loader');\n\tvar opts = lu.getOptions(this);\n\tloadAsync(content, this, opts)\n\t.then(result => callback(null, result, sourcemap))\n\t.catch(err => {\n\t\tthis.emitError(err);\n\t\tcallback(err);\n\t});\n}\n\nfunction loadAsync(content: string, loader: {resourcePath: string}, opts: {injector: Inject}) {\n\tvar file = loader.resourcePath;\n\tcontent = injectReplace(content, file, loader, opts);\n\treturn Promise.resolve(content);\n}\n\nfunction injectReplace(content: string, file: string, loader: {resourcePath: string}, opts: {injector: Inject}) {\n\tvar replaced = content.replace(\n\t\t/@import\\s+(?:\\([^\\)]*\\)\\s+)?[\"'](?:npm:\\/\\/|~(?!\\/))((?:@[^\\/]+\\/)?[^\\/]+)(\\/.+?)?[\"'];?/g,\n\t\t(match, packageName, relPath, offset, whole) => {\n\t\tif (relPath == null)\n\t\t\trelPath = '';\n\t\tvar packageResourcePath = packageName + relPath;\n\t\tvar newPackage = _getInjectedPackage(file, packageResourcePath, opts ? opts.injector : undefined);\n\t\tif (newPackage) {\n\t\t\tlog.info(`Found injected less import target: ${packageResourcePath}, replaced to ${newPackage}`);\n\t\t\tpackageResourcePath = newPackage;\n\t\t\treturn '@import \"~' + packageResourcePath + '\";';\n\t\t} else if (newPackage === '') {// delete whole line, do not import anything\n\t\t\tlog.debug('Remove import');\n\t\t\treturn `/* Deleted by npmimport-css-loader ${match}*/`;\n\t\t}\n\t\treturn '@import \"~' + packageResourcePath + '\";';\n\t});\n\treturn replaced;\n}\n\n/**\n *\n * @param {*} file\n * @param {*} origPackageName\n * @return {*} could be {string} for injected package name, {null} for no injection,\n * empty string for `replaceCode` with falsy value\n */\nfunction _getInjectedPackage(file: string, origPackageName: string, injector?: Inject): string | null {\n\tif (!injector)\n\t\tinjector = rj;\n\tconst fmaps = injector!.factoryMapsForFile(file);\n\tlet replaced = null;\n\tif (fmaps.length > 0) {\n\t\t_.some(fmaps, factoryMap => {\n\t\t\tconst ijSetting = factoryMap.matchRequire(origPackageName);\n\t\t\tif (!ijSetting)\n\t\t\t\treturn false;\n\t\t\tif (ijSetting.method === 'substitute') {\n\t\t\t\treplaced = _.isFunction(ijSetting.value) ?\n\t\t\t\t\t(ijSetting.value as FactoryFunc)(file, ijSetting.execResult) : ijSetting.value as string;\n\t\t\t\treplaced += ijSetting.subPath;\n\t\t\t\treturn true;\n\t\t\t} else if (ijSetting.method === 'replaceCode') {\n\t\t\t\treplaced = _.isFunction(ijSetting.value) ?\n\t\t\t\t\t(ijSetting.value as FactoryFunc)(file, ijSetting.execResult) : ijSetting.value as string;\n\t\t\t\tif (!replaced)\n\t\t\t\t\treplaced = '';\n\t\t\t\telse\n\t\t\t\t\treplaced = null;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t});\n\t}\n\treturn replaced;\n}\n\nnamespace loader {\n\texport const getInjectedPackage = _getInjectedPackage;\n}\n\nexport = loader;\n"]}