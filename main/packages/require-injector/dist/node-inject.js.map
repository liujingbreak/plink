{"version":3,"file":"node-inject.js","sourceRoot":"","sources":["../ts/node-inject.ts"],"names":[],"mappings":"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","sourcesContent":["import Module from 'module';\nimport EventEmitter from 'events';\nimport Path from 'path';\nimport * as fs from 'fs';\nimport _ from 'lodash';\nimport log4js from 'log4js';\nimport {DirTree} from './dir-tree';\n\n\nimport {FactoryMap, FactoryMapInterf, FactoryMapCollection, FactoryFunc} from './factory-map';\nexport {FactoryMap, FactoryMapInterf, FactoryMapCollection};\nconst log = log4js.getLogger('require-injector.node-inject');\n\nconst emptyFactoryMap = {\n  factory: emptryChainableFunction,\n  substitute: emptryChainableFunction,\n  alias: emptryChainableFunction,\n  replaceCode: emptryChainableFunction,\n  value:  emptryChainableFunction\n} as FactoryMapInterf;\n\nexport interface InjectorOption {\n  /**\n\t * default is process.cwd(), used to resolve relative path in `.fromDir(path)`\n\t */\n  basedir?: string;\n  /**\n\t * default is false, if you only use this module as Browserify or Webpack's transform,\n\t * you don't want injection work on Node side, no kidnapping on `Module.prototype.require`,\n\t * set this property to `true`\n\t */\n  noNode?: boolean;\n  // resolve?: (path: string) => string;\n  resolveOpts?: any;\n  debug?: boolean;\n}\n\n/**\n * browser-resolve options\n */\nexport interface ResolveOption {\n  basedir?: string;\n}\nclass Injector extends EventEmitter.EventEmitter {\n\n  dirTree: DirTree<FactoryMap>;\n  oldRequire: NodeJS.Require;\n  config: InjectorOption = {};\n\n  constructor(opts?: InjectorOption) {\n    super();\n    // this.sortedDirs = [];\n    this.dirTree = new DirTree();\n    // this.injectionScopeMap = {};\n    this.oldRequire = Module.prototype.require;\n    this._initOption(opts);\n  }\n\n  cleanup() {\n    Module.prototype.require = this.oldRequire;\n    // this.sortedDirs.splice(0);\n    this.dirTree = new DirTree();\n    // var self = this;\n    // _.each(_.keys(self.injectionScopeMap), function(key) {\n    // \tdelete self.injectionScopeMap[key];\n    // });\n    this.config = {};\n    if (this.config.debug)\n      log.debug('cleanup');\n  }\n\n  fromPackage(packageName: string | string[], resolveOpts?: ResolveOption): FactoryMapInterf {\n    if (Array.isArray(packageName)) {\n      // eslint-disable-next-line prefer-rest-params\n      const args = [].slice.call(arguments) as any[];\n      const factoryMaps = _.map(packageName, single => {\n        args[0] = single;\n        // eslint-disable-next-line prefer-spread\n        return this._fromPackage.apply(this, args as [any]);\n      });\n      return new FactoryMapCollection(factoryMaps);\n    } else {\n      return this._fromPackage(packageName, resolveOpts);\n    }\n  }\n\n  _fromPackage(packageName: string, resolveOpts?: ResolveOption): FactoryMapInterf {\n    // var resolveSync = resolve;\n    if (!resolveOpts) {\n      resolveOpts = this.config.resolveOpts;\n    }\n    let dir = resolveOpts?.basedir || process.cwd();\n    const {root: rootDir} = Path.parse(dir);\n    let jsonPath: string | undefined;\n    do {\n      const testPkgJson = Path.resolve(dir, 'node_modules', packageName, 'package.json');\n      if (fs.existsSync(testPkgJson)) {\n        jsonPath = testPkgJson;\n        break;\n      } else {\n        dir = Path.dirname(dir);\n      }\n    } while (dir !== rootDir);\n    if (jsonPath == null) {\n      log.info(packageName + ' is not Found, will be skipped from .fromPackage()');\n      return emptyFactoryMap;\n    }\n    const path = Path.dirname(jsonPath);\n    return this._fromDir(path, this.dirTree);\n  }\n\n  fromRoot(): FactoryMapInterf {\n    return this._fromDir('', this.dirTree);\n  }\n\n  fromDir(dir: string | string[]): FactoryMapInterf {\n    if (_.isArray(dir)) {\n      const args = [].slice.call(arguments) as any[];\n      const factoryMaps = _.map(dir, single => {\n        args[0] = single;\n        return this.resolveFromDir.apply(this, args as [any]);\n      });\n      return new FactoryMapCollection(factoryMaps);\n    } else {\n      return this.resolveFromDir(dir);\n    }\n  }\n\n  resolveFromDir(dir: string): FactoryMapInterf {\n    const path = this.config.basedir ?\n      Path.resolve(this.config.basedir, dir) : Path.resolve(dir);\n    return this._fromDir(path, this.dirTree);\n  }\n\n  /**\n\t * Recursively build dirTree, subDirMap\n\t * @param  {string} path new directory\n\t * @param  {Array<string>} dirs [description]\n\t * @return {[type]}      [description]\n\t */\n  _fromDir(path: string, tree: DirTree<FactoryMap>): FactoryMap {\n    let factory: FactoryMap | undefined;\n    const linked = parseSymlink(path);\n    if (linked !== path) {\n      log.debug('%s is symbolic link path to %s', path, linked);\n      factory = this._createFactoryMapFor(linked, tree);\n    }\n    return this._createFactoryMapFor(path, tree, factory);\n  }\n\n  _createFactoryMapFor(path = '', tree: DirTree<FactoryMap>, existingFactory?: FactoryMap): FactoryMap {\n    // path = this._pathToSortKey(path);\n    if (!existingFactory) {\n      let f = tree.getData(path);\n      if (f) {\n        return f;\n      } else {\n        f = new FactoryMap(this.config);\n        tree.putData(path, f);\n        return f;\n      }\n    } else {\n      tree.putData(path, existingFactory);\n      return existingFactory;\n    }\n  }\n\n  /**\n\t * Return array of configured FactoryMap for source code file depends on the file's location.\n\t * Later on, you can call `factoryMap.matchRequire(name)` to get exact inject value\n\t * @return {FactoryMap[]} Empty array if there is no injector configured for current file\n\t */\n  factoryMapsForFile(fromFile: string): FactoryMap[] {\n    const fmaps = this.dirTree.getAllData(fromFile);\n    return _.reverse(fmaps);\n  }\n\n  testable() {\n    return this;\n  }\n  protected _initOption(opts?: InjectorOption) {\n    if (opts)\n      this.config = opts;\n\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self = this;\n    if (!_.get(opts, 'noNode')) {\n      Module.prototype.require = function(path) {\n        return self.replacingRequire(this, path);\n      } as NodeJS.Require;\n    }\n  }\n  protected inject(calleeModule: Module, name: string) {\n    if (calleeModule.filename == null)\n      return this.oldRequire.call(calleeModule, name);\n    const fmaps = this.factoryMapsForFile(calleeModule.filename);\n    if (fmaps.length === 0)\n      return this.oldRequire.call(calleeModule, name);\n    let injected;\n    const match = _.some(fmaps, factoryMap => {\n      const injector = factoryMap.matchRequire(name);\n      if (injector == null) {\n        return false;\n      }\n      if (this.config.debug) {\n        log.debug('inject %s', name);\n      }\n      injected = factoryMap.getInjected(injector, calleeModule.filename, calleeModule, this.oldRequire);\n      this.emit('inject', calleeModule.filename);\n      return true;\n    });\n    if (!match)\n      return this.oldRequire.call(calleeModule, name);\n    return injected;\n  }\n\n  protected replacingRequire(calleeModule: Module, path: string) {\n    try {\n      return this.inject(calleeModule, path);\n    } catch (e: any) {\n      if (this.config.debug)\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        log.debug('require from : ', calleeModule.filename, e.message);\n      throw e;\n    }\n  }\n}\n\nexport {Injector as default, Injector as NodeInjector};\n\n/**\n * If a path contains symbolic link, return the exact real path\n * Unlike fs.realpath, it also works for nonexist path\n */\nexport function parseSymlink(path: string) {\n  try {\n    fs.accessSync(path, fs.constants.F_OK);\n    return fs.realpathSync(path);\n  } catch (e) {}\n  path = Path.resolve(path);\n  const parsed = Path.parse(path);\n  let dir = parsed.root;\n  const pathElements = path.split(Path.sep).slice(1);\n  pathElements.some((el, index) => {\n    if (!_.endsWith(dir, Path.sep))\n      dir += Path.sep;\n    dir += el;\n    try {\n      fs.accessSync(dir, fs.constants.F_OK);\n    } catch (e) {\n      const restPart = pathElements.slice(index + 1).join(Path.sep);\n      dir += restPart.length > 0 ? Path.sep + restPart : restPart;\n      return true;\n    }\n    if (fs.lstatSync(dir).isSymbolicLink()) {\n      const link = fs.readlinkSync(dir);\n      dir = Path.resolve(Path.dirname(dir), link);\n    }\n    return false;\n  });\n  return dir;\n}\n\nfunction emptryChainableFunction(name: string | RegExp, RegExp: string| FactoryFunc): FactoryMapInterf {\n  return emptyFactoryMap;\n}\n"]}