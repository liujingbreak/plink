{"version":3,"file":"rb-tree.js","sourceRoot":"","sources":["../src/rb-tree.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * According to the book << Introduction to Algorithms, Third Edition >>\n * \n * features in progress: Dynamic order statistics, range tree\n * \n * This data structure is meant for being extend, since the majority of 3rd-party red-black tree on npmjs.org is not extensible\n */\n\nexport type RbTreeNode<T, V = unknown, C extends RbTreeNode<any, any, any> = RbTreeNode<T, V, any>> = {\n  key: T;\n  value: V;\n  p: C | null;\n  left: C | null;\n  right: C | null;\n  isRed: boolean;\n  /** total weight of currentt node and children's.\n  * size = left child's size + right child size + weight\n  */\n  size: number;\n  /** weight of current node, not includingg childlren'ss */\n  weight: number;\n};\n\nexport class RedBlackTree<T, V = unknown, ND extends RbTreeNode<T, V, ND> = RbTreeNode<T, V>> {\n  root: ND | null | undefined = null;\n\n  constructor(protected comparator?: (a: T, b: T) => number) {\n    if (comparator == null) {\n      this.comparator = (a, b) => {\n        return a < b ?\n          -1 :\n          a > b ? 1 : 0;\n      };\n    }\n  }\n\n  /**\n   * Should override this function to create new typeof tree node\n   * @param key\n   * @returns existing tree node if key duplicates or a new empty node\n   */\n  insert(key: T): Omit<ND, 'value'> & {value?: V} {\n    let y: ND | null = null;\n    let x = this.root;\n    let cmp: number;\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self = this;\n    while (x) {\n      y = x ;\n      cmp = this.comparator!(key, x.key);\n      if (cmp < 0) {\n        x = x.left;\n      } else if (cmp > 0) {\n        x = x.right;\n      } else {\n        return x; // duplicate key found\n      }\n    }\n    const z = {\n      isRed: true,\n      key,\n      p: y\n    } as unknown as ND;\n\n    let left: ND | null | undefined;\n    let right: ND | null | undefined;\n\n    Object.defineProperty(z, 'left', {\n      get() {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-unsafe-member-access\n        return left;\n      },\n      set(v: ND | null | undefined) {\n        if (left === v)\n          return;\n        left = v;\n        self.updateNodeSize(z);\n        self.onLeftChildChange(z, v);\n      }\n    });\n\n    Object.defineProperty(z, 'right', {\n      get() {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-unsafe-member-access\n        return right;\n      },\n      set(v: ND | null | undefined) {\n        if (right === v)\n          return;\n        right = v;\n        self.updateNodeSize(z);\n        self.onRightChildChange(z, v);\n      }\n    });\n\n    let weight = 0;\n\n    Object.defineProperty(z, 'weight', {\n      get() {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-unsafe-member-access\n        return weight;\n      },\n      set(v: number) {\n        if (weight === v)\n          return;\n\n        weight = v;\n        self.updateNodeSize(z);\n        // if (z.p) {\n        //   z.p.size = (z.p.left?.size || 0) + (z.p.right?.size || 0) + 1;\n        // }\n      }\n    });\n\n    z.weight = 1;\n\n    if (y == null) {\n      this.root = z;\n    } else if (cmp! < 0 ) {\n      y.left = z;\n    } else if (cmp! > 0 ) {\n      y.right = z;\n    }\n    this.redBlackInsertFixUp(z);\n    return z;\n  }\n\n  /** Retrieve an element with a given rank, unlike <<Introduction to Algorithms 3rd Edition>>, it begins with 0 \n  * and it is baesed on \"size\" which is accumulated  from \"weight\" of node ands children's\n  */\n  atIndex(idx: number, beginNode: ND | null | undefined = this.root): ND | null | undefined {\n    let currNode = beginNode;\n    while (currNode) {\n      const leftSize = (currNode.left?.size || 0);\n      if (leftSize === idx)\n        return currNode;\n      else if (idx < leftSize) {\n        currNode = currNode.left;\n      } else {\n        currNode = currNode.right;\n        idx -= leftSize + 1;\n      }\n    }\n    return currNode;\n  }\n\n  indexOf(key: T): number {\n    let node = this.search(key);\n    if (node == null)\n      return -1;\n\n    let currIdx = (node.left?.size || 0);\n    while (node.p) {\n      if (node === node.p.right) {\n        currIdx += (node.p.left?.size || 0) + 1;\n      }\n      node = node.p;\n    }\n    return currIdx;\n  }\n\n  search(key: T): ND | null {\n    let node = this.root;\n    while (node) {\n      const cmp = this.comparator!(key, node.key);\n      if (cmp === 0)\n        return node;\n      if (cmp < 0) {\n        node = node.left;\n      } else {\n        node = node.right;\n      }\n    }\n    return null;\n  }\n\n  delete(key: T) {\n    const node = this.search(key);\n    if (node == null) {\n      return false;\n    }\n    this.deleteNode(node);\n    return true;\n  }\n\n  successorNode(node: ND) {\n    if (node.right) {\n      return this.minimum(node.right);\n    }\n    let y = node.p;\n    while (y && node === y.right) {\n      node = y;\n      y = y.p;\n    }\n    return y;\n  }\n\n  predecessorNode(node: ND) {\n    if (node.left) {\n      return this.maximum(node.left);\n    }\n    let y = node.p;\n    while (y && node === y.left) {\n      node = y;\n      y = y.p;\n    }\n    return y;\n  }\n\n  /**\n   * @param key the value of key to be compared which could be related to none nodes in current tree\n   * @return interator of existing nodes whose key are greater than specific key\n   */\n  *keysGreaterThan(key: T) {\n    let node = this.root;\n    while (node) {\n      const cmp = this.comparator!(key, node.key);\n      if (cmp === 0)\n        break;\n      if (cmp < 0) {\n        if (node.left == null) {\n          let z = node as typeof node | null;\n          while (z) {\n            yield z;\n            z = this.successorNode(z);\n          }\n          break;\n        }\n        node = node.left;\n      } else {\n        if (node.right == null) {\n          let z = node.p;\n          while (z) {\n            yield z;\n            z = this.successorNode(z);\n          }\n          break;\n        }\n        node = node.right;\n      }\n    }\n  }\n  /**\n   * @param key the value of key to be compared which could be related to none nodes in current tree\n   * @return interator of existing nodes whose key are greater than specific key\n   */\n  *keysSmallererThan(key: T) {\n    let node = this.root;\n    while (node) {\n      const cmp = this.comparator!(key, node.key);\n      if (cmp === 0)\n        break;\n      if (cmp < 0) {\n        if (node.left == null) {\n          let z = node.p;\n          while (z) {\n            yield z;\n            z = this.predecessorNode(z);\n          }\n          break;\n        }\n        node = node.left;\n      } else {\n        if (node.right == null) {\n          let z = node as typeof node | null;\n          while (z) {\n            yield z;\n            z = this.predecessorNode(z);\n          }\n          break;\n        }\n        node = node.right;\n      }\n    }\n  }\n  inorderWalk(callback: (node: ND, level: number) => void, node = this.root, level = 0) {\n    const nextLevel = level + 1;\n    if (node?.left)\n      this.inorderWalk(callback, node.left, nextLevel);\n    if (node)\n      callback(node, level);\n    if (node?.right)\n      this.inorderWalk(callback, node.right, nextLevel);\n  }\n\n  minimum(node = this.root) {\n    while (node?.left) {\n      node = node.left;\n    }\n    return node ?? null;\n  }\n\n  maximum(node = this.root) {\n    while (node?.right) {\n      node = node.right;\n    }\n    return node ?? null;\n  }\n\n  size() {\n    return this.root?.size ?? 0;\n  }\n\n  isRed(node: ND | null | undefined) {\n    return !!node?.isRed;\n  }\n\n  isBlack(node: ND | null | undefined) {\n    return node == null || !node.isRed;\n  }\n\n  deleteNode(z: ND) {\n    let y: ND | null  = z;\n    let origIsRed = this.isRed(y);\n    let x: ND | null = null;\n    if (z.left == null) {\n      x = z.right;\n      this.transplant(z, z.right);\n    } else if (z.right == null) {\n      x = z.left;\n      this.transplant(z, z.left);\n    } else {\n      // both left and right child are not empty\n      y = this.minimum(z.right);\n      if (y == null)\n        return false;\n      origIsRed = this.isRed(y);\n      x = y.right;\n      if (y.p === z) {\n        if (x) x.p = y;\n      } else {\n        this.transplant(y, y.right);\n        y.right = z.right;\n        y.right.p = y;\n      }\n      this.transplant(z, y);\n      y.left = z.left;\n      y.left.p = y;\n      y.isRed = this.isRed(z);\n    }\n    if (!origIsRed && x) {\n      // console.log('delete fixup', x.key);\n      this.deleteFixup(x);\n    }\n    return true;\n  }\n  /**\n   * To be extend and overridden\n   */\n  protected onLeftChildChange(_parent: ND, _child: ND | null | undefined) {\n  }\n  /**\n   * To be extend and overridden\n   */\n  protected onRightChildChange(_parent: ND, _child: ND | null | undefined) {\n  }\n\n  protected updateNodeSize(node: ND) {\n    let z = node as typeof node.p;\n    while (z) {\n      z.size = z.weight + (z.left?.size ?? 0) + (z.right?.size ?? 0);\n      z = z.p;\n    }\n  }\n\n  private deleteFixup(x: ND) {\n    while (x !== this.root && this.isBlack(x)) {\n      if (x.p && x === x.p.left) {\n        let w = x.p.right; // w is x's sibling\n        if (this.isRed(w)) {\n          w!.isRed = false;\n          x.p.isRed = true;\n          this.leftRotate(x.p );\n          w = x.p.right;\n        }\n        if (w) {\n          if (this.isBlack(w.left) && this.isBlack(w.right)) {\n            w.isRed = true;\n            x = x.p ;\n          } else {\n            if (this.isBlack(w.right)) {\n              if (w.left)\n                w.left.isRed = false;\n              w.isRed = true;\n              this.rightRotate(w);\n              w = x.p.right;\n            }\n            if (w) w.isRed = this.isRed(x.p);\n            x.p.isRed = false;\n            if (w?.right) w.right.isRed = false;\n            this.leftRotate(x.p );\n            x = this.root!;\n          }\n        }\n      } else if (x.p && x === x.p.right) {\n        let w = x.p.left; // w is x's sibling\n        if (this.isRed(w)) {\n          w!.isRed = false;\n          x.p.isRed = true;\n          this.rightRotate(x.p );\n          w = x.p.left;\n        }\n        if (w) {\n          if (this.isBlack(w.right) && this.isBlack(w.left)) {\n            w.isRed = true;\n            x = x.p ;\n          } else {\n            if (this.isBlack(w.left)) {\n              if (w.right)\n                w.right.isRed = false;\n              w.isRed = true;\n              this.leftRotate(w);\n              w = x.p.left;\n            }\n            if (w) w.isRed = this.isRed(x.p);\n            x.p.isRed = false;\n            if (w?.left) w.left.isRed = false;\n            this.rightRotate(x.p );\n            x = this.root!;\n          }\n        }\n      }\n    }\n    x.isRed = false;\n  }\n\n  private transplant(replaceNode: ND, withNode: ND | null = null) {\n    if (replaceNode.p == null) {\n      this.root = withNode;\n    } else if (replaceNode === replaceNode.p.left) {\n      replaceNode.p.left = withNode;\n    } else {\n      replaceNode.p.right = withNode;\n    }\n    if (withNode)\n      withNode.p = replaceNode.p;\n  }\n\n  protected redBlackInsertFixUp(z: ND) {\n    while (this.isRed(z.p)) {\n      if (z.p?.p && z.p === z.p.p.left) {\n        const uncle = z.p.p.right;\n        if (this.isRed(uncle)) {\n          // mark parent and uncle to black, grandpa to red, continue to go up to grandpa level\n          z.p.isRed = false;\n          if (uncle) uncle.isRed = false;\n          z.p.p.isRed = true;\n          z = z.p.p;\n        } else {\n          // uncle is black\n          if (z === z.p.right) {\n            // if is right child tree\n            z = z.p;\n            this.leftRotate(z);\n          }\n          if (z.p) {\n            z.p.isRed = false;\n            if (z.p.p) {\n              z.p.p.isRed = true;\n              this.rightRotate(z.p.p);\n            }\n          }\n        }\n      } else if (z.p?.p && z.p === z.p.p.right) {\n        const uncle = z.p.p.left;\n        if (this.isRed(uncle)) {\n          // mark parent and uncle to black, grandpa to red, continue to go up to grandpa level\n          z.p.isRed = false;\n          if (uncle) uncle.isRed = false;\n          z.p.p.isRed = true;\n          z = z.p.p;\n        } else {\n          // uncle is black\n          if (z === z.p.left) {\n            // if is right child tree\n            z = z.p;\n            this.rightRotate(z);\n          }\n          if (z.p) {\n            z.p.isRed = false;\n            if (z.p.p) {\n              z.p.p.isRed = true;\n              this.leftRotate(z.p.p);\n            }\n          }\n        }\n      }\n    }\n    if (this.root)\n      this.root.isRed = false;\n  }\n\n  private leftRotate(x: ND) {\n    // console.log('leftRotate', x.key);\n    const y = x.right;\n    if (y == null)\n      return;\n    x.right = y.left;\n    if (y.left) {\n      y.left.p = x;\n    }\n    y.p = x.p;\n    if (x.p == null)\n      this.root = y;\n    else if (x === x.p.left)\n      x.p.left = y;\n    else\n      x.p.right = y;\n    y.left = x;\n    x.p = y;\n  }\n\n  private rightRotate(x: ND) {\n    const y = x.left;\n    if (y == null)\n      return;\n    x.left = y.right;\n    if (y.right) {\n      y.right.p = x;\n    }\n    y.p = x.p;\n    if (x.p == null)\n      this.root = y;\n    else if (x === x.p.right)\n      x.p.right = y;\n    else\n      x.p.left = y;\n    y.right = x;\n    x.p = y;\n  }\n}\n\n"]}