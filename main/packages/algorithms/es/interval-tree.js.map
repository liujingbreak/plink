{"version":3,"file":"interval-tree.js","sourceRoot":"","sources":["../src/interval-tree.ts"],"names":[],"mappings":"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","sourcesContent":["import {RbTreeNode, RedBlackTree} from './rb-tree';\n\n/**\n * A Red black tree node to contains multiple intervals which has same \"low\" value,\n * \"key\" is interval's low value\n */\nexport interface IntervalTreeNode<V = unknown> extends RbTreeNode<number, V, IntervalTreeNode<V>> {\n  /** For no duplicate single interval*/\n  int?: [low: number, high: number];\n  /** For multiple intervals, a tree to store different \"high\" value */\n  highValuesTree?: RedBlackTree<number, V>;\n  /** Maximum \"high\" value of multi intervals that this node contains */\n  maxHighOfMulti?: number;\n  /** Maximum \"high\" of children */\n  max: number;\n}\n\n/**\n * Maintaining:\n *  node.max = max(node.int[1], node.left.max, node.right.max)\n *\n *\n */\nexport class IntervalTree<V = unknown> extends RedBlackTree<number, V, IntervalTreeNode<V>> {\n  /** Return tree node, if property value is undefined */\n  insertInterval(low: number, high: number):\n  Omit<IntervalTreeNode<V>, 'value'> & {value?: V} | Omit<RbTreeNode<number, V>, 'value'> & {value?: V} {\n\n    let valueContainer: Omit<IntervalTreeNode<V>, 'value'> & {value?: V} | Omit<RbTreeNode<number, V>, 'value'> & {value?: V};\n    if (low > high) {\n      const temp = high = low;\n      low = temp;\n    }\n    const node = this.insert(low);\n    if (node.int) {\n      if (node.int[1] === high) {\n        // duplicate high boundray value\n        // node.value = data;\n        return node;\n      }\n      // A duplicate low boundray\n      node.highValuesTree = new RedBlackTree<number, V>();\n      node.highValuesTree.insert(node.int[1]).value = node.value;\n      valueContainer = node.highValuesTree.insert(high);\n\n      node.int = undefined;\n      node.weight++;\n    }\n    if (node.highValuesTree) {\n      // node.highValuesTree.insert(high).value = data;\n      valueContainer = node.highValuesTree.insert(high);\n      node.weight = node.highValuesTree.size();\n    } else {\n      node.int = [low, high];\n      // node.value = data;\n      valueContainer = node;\n    }\n    if (high > (node.maxHighOfMulti ?? Number.MIN_VALUE)) {\n      node.maxHighOfMulti = high;\n    }\n    maintainNodeMaxValue(node);\n    return valueContainer;\n  }\n\n  deleteInterval(low: number, high: number) {\n    if (low > high) {\n      const temp = high = low;\n      low = temp;\n    }\n    const node = this.search(low);\n    if (node == null)\n      return false;\n    if (node.int && node.int[1] === high) {\n      this.deleteNode(node);\n      return true;\n    } else if (node.highValuesTree) {\n      const origMaxHigh = node.maxHighOfMulti;\n      const deleted = node.highValuesTree.delete(high);\n      if (deleted) {\n        node.weight--;\n        if (node.highValuesTree.size() === 1) {\n          node.int = [node.key, node.highValuesTree.root!.key];\n          node.value = node.highValuesTree.root!.value;\n          node.highValuesTree = undefined;\n          node.maxHighOfMulti = node.int[1];\n          if (origMaxHigh !== node.maxHighOfMulti)\n            maintainNodeMaxValue(node);\n          return true;\n        } else {\n          node.maxHighOfMulti = node.highValuesTree.maximum()!.key;\n          if (origMaxHigh !== node.maxHighOfMulti)\n            maintainNodeMaxValue(node);\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  searchIntervalNode(low: number, high: number): IntervalTreeNode<V> | RbTreeNode<number, V, RbTreeNode<number, V, any>> | null {\n    if (low > high) {\n      const temp = high = low;\n      low = temp;\n    }\n    const node = this.search(low);\n    if (node == null)\n      return null;\n    if (node.int && node.int[1] === high) {\n      return node;\n    } else if (node.highValuesTree) {\n      return node.highValuesTree.search(high);\n    }\n    return null;\n  }\n\n  searchSingleOverlap(low: number, high: number) {\n    let node = this.root;\n    while (node && !doesIntervalOverlap([node.key, node.maxHighOfMulti!], [low, high])) {\n      if (node.left && low <= node.left.max) {\n        node = node.left;\n      } else {\n        node = node.right;\n      }\n    }\n    return node;\n  }\n\n  *searchMultipleOverlaps(low: number, high: number): Generator<[low: number, high: number, data: V, node: IntervalTreeNode<V>]> {\n    const foundNodes = [] as IntervalTreeNode<V>[];\n    searchMultipleOverlaps(foundNodes, low, high, this.root);\n    // const intervals = new Array<[number, number, V, IntervalTreeNode<V>]>(foundNodes.length);\n    for (const node of foundNodes) {\n      if (node.int) {\n        yield [...node.int, node.value, node];\n      } else if (node.highValuesTree) {\n        for (const highTreeNode of node.highValuesTree.keysSmallererThan(high)) {\n          yield [node.key, highTreeNode.key, highTreeNode.value, node];\n        }\n      }\n    }\n  }\n\n  /** @Override\n   */\n  protected onLeftChildChange(parent: IntervalTreeNode<V>, child: IntervalTreeNode<V> | null | undefined) {\n    maintainNodeMaxValue<V>(parent);\n  }\n  /** @Override\n   */\n  protected onRightChildChange(parent: IntervalTreeNode<V>, child: IntervalTreeNode<V> | null | undefined) {\n    maintainNodeMaxValue<V>(parent);\n  }\n}\n\nfunction maintainNodeMaxValue<V>(node: Partial<IntervalTreeNode<V>>) {\n  let currNode: Partial<IntervalTreeNode<V>> | null | undefined = node;\n  while (currNode) {\n    // if (currNode.maxHighOfMulti == null)\n    //   throw new Error('currNode.maxHighOfMulti should not be empty');\n    currNode.max = Math.max(currNode.maxHighOfMulti ?? Number.MIN_VALUE, Math.max(\n      currNode.left?.max ?? Number.MIN_VALUE, currNode.right?.max ?? Number.MIN_VALUE\n    ));\n    currNode = currNode.p;\n  }\n}\n\nfunction doesIntervalOverlap(intA: [number, number], intB: [number, number]) {\n  // Not in case of: intA is left to intB or intA is right to intB entirely\n  return !(intA[1] < intB[0] || intB[1] < intA[0]);\n}\n\nfunction searchMultipleOverlaps<V>(\n  overlaps: IntervalTreeNode<V>[], low: number, high: number, node: IntervalTreeNode<V> | null | undefined\n): number {\n  if (node == null) {\n    return 0;\n  }\n  let numOverlaps = 0;\n  if (doesIntervalOverlap([node.key, node.maxHighOfMulti!], [low, high])) {\n    overlaps.push(node);\n    numOverlaps = 1;\n  }\n  if (node.left && low <= node.left.max) {\n    const numOverlapsLeft = searchMultipleOverlaps(overlaps, low, high, node.left);\n    if (numOverlapsLeft > 0) {\n      numOverlaps += numOverlapsLeft;\n      numOverlaps += searchMultipleOverlaps(overlaps, low, high, node.right);\n    }\n    // Skip right child, as if zero left child overlaps, then\n    // target interval's high value must be even smaller than all left children's low values,\n    // meaning entire left child tree is greater than target interval, so right child tree does the same\n  } else {\n    numOverlaps += searchMultipleOverlaps(overlaps, low, high, node.right);\n  }\n  return numOverlaps;\n}\n"]}