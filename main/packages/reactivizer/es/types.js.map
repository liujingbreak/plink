{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"","sourcesContent":["import type {Worker as NodeWorker, MessagePort as NodeMessagePort} from 'worker_threads';\nimport {Action, ActionFunctions} from './control';\nimport {Broker} from './node-worker-broker';\n\nexport type ForkWorkerInput = {\n  exit(): void;\n  fork(targetAction: Action<any>, messagePort?: NodeMessagePort): void;\n};\n\nexport type ForkWorkerOutput<I extends ActionFunctions> = {\n  // inited(workerNo: number): void;\n  fork: ForkWorkerInput['fork'];\n  returnFork<K extends keyof I>(ForkId: Action<any>['i'], type: K, ...result: Parameters<I[K]>): void;\n  brokerCreated(broker: Broker<I>): void;\n};\n\nexport type BrokerInput = {\n  ensureInitWorker(workerNo: number, worker: Worker | NodeWorker): void;\n  /** Send message to worker to stop all event listerners on it */\n  letWorkerExit(worker: Worker | NodeWorker): void;\n  fork: ForkWorkerOutput<any>['fork'];\n  workerAssigned(assignId: Action<any>['i'], worketNo: number, worker: Worker | NodeWorker | 'main'): void;\n};\n\nexport type BrokerEvent = {\n  workerInited(workerNo: number, newPort: MessagePort | NodeMessagePort | null, initId: Action<any, string>['i'], skipped: boolean): void;\n  onWorkerError(workerNo: number, error: any): void;\n  onWorkerExit(workerNo: number, initId: Action<any, string>['i']): void;\n  assignWorker(): void;\n};\n"]}