{"version":3,"file":"fork-merge-sort.js","sourceRoot":"","sources":["../../src/__tests__/fork-merge-sort.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable no-console */\nimport Path from 'node:path';\nimport {Worker} from 'worker_threads';\nimport {performance} from 'node:perf_hooks';\nimport os from 'node:os';\nimport * as rx from 'rxjs';\nimport {expect}  from '@jest/globals';\nimport {log4File} from '@wfh/plink';\nimport {createSorter} from '../res/sorter';\nimport {createBroker} from '../fork-join/node-worker-broker';\nimport {applyScheduler} from '../fork-join/worker-scheduler';\n\nconst log = log4File(__filename);\n\nexport async function forkMergeSort(threadMode: 'scheduler' | 'mainOnly' | 'singleWorker' | 'mix' | 'newWorker' | 'excludeMainThread',\n  workerNum?: number) {\n  const num = 30;\n  const testArr = createSharedArryForTest(0, num);\n  const sorter = createSorter(null, {\n    name: 'sorter',\n    debug: false,\n    log(...msg) {\n      log.info(...msg);\n    }\n  });\n  let workerIsAssigned = false;\n\n  sorter.o.dp.log('worker created');\n  const workers = [] as Worker[];\n\n  const broker = createBroker(sorter, {\n    name: 'broker',\n    debug: true,\n    log(...msg) {\n      log.info(...msg);\n    },\n    debugExcludeTypes: ['workerInited', 'ensureInitWorker'],\n    logStyle: 'noParam'\n  });\n\n  broker.o.pt.onWorkerError.pipe(\n    rx.tap(([, workerNo, error, type]) => console.error(type, 'worker #', workerNo, error))\n  ).subscribe();\n\n  const {i, o} = broker;\n  const numOfWorkers = workerNum ?? os.availableParallelism();\n\n  let ranksByWorkerNo: ReturnType<typeof applyScheduler>;\n  if (threadMode === 'scheduler') {\n    ranksByWorkerNo = applyScheduler(broker, {\n      maxNumOfWorker: numOfWorkers,\n      excludeCurrentThead: false,\n      workerFactory() {\n        return new Worker(Path.resolve(__dirname, '../../dist/res/sort-worker.js'));\n      }\n    });\n  } else if (threadMode === 'excludeMainThread') {\n    ranksByWorkerNo = applyScheduler(broker, {\n      maxNumOfWorker: numOfWorkers,\n      excludeCurrentThead: true,\n      workerFactory() {\n        return new Worker(Path.resolve(__dirname, '../../dist/res/sort-worker.js'));\n      }\n    });\n  } else {\n    sorter.r('on assignWorker -> workerAssigned', rx.merge(\n      // Mimic a thread pool's job\n      o.pt.assignWorker.pipe(\n        rx.map(([m], idx) => {\n          if (threadMode === 'mainOnly')\n            i.dpf.workerAssigned(m, -1, 'main');\n          else if (threadMode === 'singleWorker') {\n            let worker: Worker;\n            if (workers.length > 0) {\n              worker = workers[0];\n            } else {\n              worker = new Worker(Path.resolve(__dirname, '../../dist/res/sort-worker.js'));\n              workers.push(worker);\n            }\n            i.dpf.workerAssigned(m, workers.length, worker);\n          } else if (threadMode === 'newWorker') {\n            const worker = new Worker(Path.resolve(__dirname, '../../dist/res/sort-worker.js'));\n            workers.push(worker);\n            i.dpf.workerAssigned(m, idx++, worker);\n          } else {\n            let worker: Worker;\n            if (Math.random() <= 0.5) {\n              if (workers.length > 0) {\n                worker = workers[0];\n              } else {\n                worker = new Worker(Path.resolve(__dirname, '../../dist/res/sort-worker.js'));\n                workers.push(worker);\n              }\n              i.dpf.workerAssigned(m, workers.length, worker);\n            } else\n              i.dpf.workerAssigned(m, -1, 'main');\n          }\n          workerIsAssigned = true;\n        }),\n        rx.ignoreElements()\n      ),\n      rx.merge(\n        broker.error$.pipe(rx.map(([label, err]) => console.error('Broker', label, 'on error', err))),\n        o.pt.onWorkerError.pipe(rx.map(([, workNo, err, type]) => console.error('Worker', workNo, 'on', type ?? 'error', err)))\n      ).pipe(\n        rx.take(1),\n        rx.map(() => {\n          sorter.destory();\n          for (const worker of workers)\n            i.dp.letWorkerExit(worker);\n          workers.splice(0);\n        })\n      )\n    ));\n  }\n\n  sorter.o.dp.log('Initial test array', testArr);\n\n\n  performance.mark(threadMode + '/sort start');\n  // call main sort function\n  await rx.firstValueFrom(sorter.i.do.sortAllInWorker(\n    sorter.o.at.sortAllInWorkerResolved, testArr.buffer as SharedArrayBuffer, 0, num, num / numOfWorkers / 2\n  ));\n  performance.measure(`measure ${numOfWorkers}`, threadMode + '/sort start');\n  const performanceEntry = performance.getEntriesByName(`measure ${numOfWorkers}`)[0];\n  // eslint-disable-next-line no-console\n  console.log(performanceEntry.name, performanceEntry.duration, 'ms');\n  performance.clearMeasures();\n  performance.clearMarks();\n\n  if (!['scheduler', 'excludeMainThread'].includes(threadMode)) {\n    expect(workerIsAssigned).toBe(true);\n  }\n  sorter.o.dp.log('-----------------------------\\nsorted:', testArr);\n\n  if (['scheduler', 'excludeMainThread'].includes(threadMode)) {\n    await new Promise(r => setTimeout(r, 500));\n    console.log('Ranks of workers:', [...ranksByWorkerNo!.entries()].map(([workerNo, [worker, rank]]) => `#${worker === 'main' ? worker : workerNo}: ${rank}`));\n    for (const [, [, rank]] of ranksByWorkerNo!.entries()) {\n      // console.log('Rank of worker ' + workerKey + `: ${rank}`);\n      expect(rank).toBe(0);\n    }\n  }\n\n  const latestBrokerEvents = broker.outputTable.addActions('onWorkerExit').l;\n  if (['scheduler', 'excludeMainThread'].includes(threadMode)) {\n    await rx.firstValueFrom(i.do.letAllWorkerExit(o.at.onAllWorkerExit));\n    broker.destory();\n    sorter.destory();\n  } else if (threadMode !== 'mainOnly') {\n    for (const worker of workers)\n      i.dp.letWorkerExit(worker);\n    await rx.lastValueFrom(latestBrokerEvents.onWorkerExit.pipe(rx.take(workers.length)));\n  }\n}\nfunction createSharedArryForTest(from: number, to: number) {\n  const size = to - from;\n  const buf = new SharedArrayBuffer(4 * size);\n  const testArr = new Float32Array(buf, 0, size);\n  const initArr = new Array(size);\n  for (let i = 0; i < size; i++) {\n    initArr[i] = i + from;\n  }\n  shuffleArray(initArr, testArr);\n  return testArr;\n}\n\nfunction shuffleArray(arr: number[], target: {[i: number]: any}) {\n  let arrEffectiveLen = arr.length;\n  for (let i = 0, l = arr.length; i < l; i++) {\n    const pos = Math.floor(Math.random() * arrEffectiveLen--);\n    // console.log(`(${pos}, ${arr.length})`, '-', arr[pos]);\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    target[i] = arr[pos];\n    if (pos !== arr.length - 1)\n      arr[pos] = arr.pop()!;\n    else\n      arr.pop();\n  }\n}\n"]}