{"version":3,"file":"node-worker-broker.js","sourceRoot":"","sources":["../src/node-worker-broker.ts"],"names":[],"mappings":"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","sourcesContent":["import {Worker as NodeWorker} from 'worker_threads';\nimport * as rx from 'rxjs';\nimport {ReactorComposite} from './epic';\nimport {Action, ActionFunctions, serializeAction, deserializeAction, RxController} from './control';\nimport {BrokerInput, BrokerEvent, ForkWorkerInput} from './types';\n\n/** WA - Worker output Message\n*/\nexport function createBroker<WA extends ActionFunctions = Record<string, never>>(\n  mainWorkerInput: RxController<ForkWorkerInput>,\n  opts?: ConstructorParameters<typeof ReactorComposite>[0]\n) {\n  const ctx = new ReactorComposite<BrokerInput, BrokerEvent>(opts);\n\n  const workerInitState = new Map<number, 'DONE' | 'WIP'>();\n\n  const {r, i, o} = ctx;\n  ctx.startAll();\n  r(i.pt.ensureInitWorker.pipe(\n    rx.mergeMap(([id, workerNo, worker]) => {\n      if (workerInitState.get(workerNo) === 'DONE') {\n        o.dp.workerInited(workerNo, null, id, true);\n        return rx.EMPTY;\n      } else if (workerInitState.get(workerNo) === 'WIP') {\n        return o.pt.workerInited.pipe(\n          rx.filter(() => workerInitState.get(workerNo) === 'DONE'),\n          rx.take(1)\n        );\n      }\n      (worker as NodeWorker).on('message', (event: Action<WA, keyof WA> | {type: string}) => {\n        if ((event as {type: string}).type === 'WORKER_READY') {\n          workerInitState.set(workerNo, 'DONE');\n          o.dp.workerInited(workerNo, null, id, false);\n        } else if ((event as {error?: any}).error) {\n          o.dp.onWorkerError(\n            workerNo,\n            (event as {error?: any}).error\n          );\n        } else {\n          const {data} = event as MessageEvent<Action<any, keyof any>>;\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n          deserializeAction(data, o);\n        }\n      });\n\n      (worker as NodeWorker).on('error', event => {\n        o.dp.onWorkerError(workerNo, event);\n      });\n\n      (worker as NodeWorker).on('messageerror', event => {\n        o.dp.onWorkerError(workerNo, event);\n      });\n\n      (worker as NodeWorker).on('exit', event => {\n        o.dp.onWorkerExit(workerNo, event);\n      });\n\n      (worker as NodeWorker).postMessage({type: 'ASSIGN_WORKER_NO', workerNo});\n      return rx.EMPTY;\n    })\n    // rx.takeUntil(o.pt.onWorkerExit.pipe(rx.filter(([id]) => id === )))\n  ));\n\n  r(i.at.fork.pipe(\n    rx.mergeMap(async forkAction => {\n      const waitWorkerAssignment = i.pt.workerAssigned.pipe(\n        rx.filter(([, aId]) => aId === assignId)\n      );\n      const assignId = o.dp.assignWorker();\n      const [, , workerNo, worker] = await rx.firstValueFrom(waitWorkerAssignment);\n      if (worker === 'main') {\n        mainWorkerInput.core.actionUpstream.next(forkAction as Action<any>);\n      } else {\n        console.log('ensureInitWorker', workerNo);\n        i.dp.ensureInitWorker(workerNo, worker);\n        worker.postMessage(serializeAction(forkAction), [forkAction.p[1]!]);\n      }\n    })\n  ));\n\n  r(i.pt.letWorkerExit.pipe(\n    rx.map(([, worker]) => {\n      // eslint-disable-next-line @typescript-eslint/ban-types\n      (worker as NodeWorker).postMessage(serializeAction(\n        (o as unknown as RxController<ForkWorkerInput>).core.createAction('exit')\n      ));\n    })\n  ));\n  return ctx as unknown as Broker<WA>;\n}\n\nexport type Broker<WA extends ActionFunctions = any> = ReactorComposite<BrokerInput, BrokerEvent & WA>;\n"]}