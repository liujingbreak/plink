{"version":3,"file":"worker-scheduler.js","sourceRoot":"","sources":["../src/worker-scheduler.ts"],"names":[],"mappings":"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","sourcesContent":["import type {Worker as NodeWorker} from 'node:worker_threads';\nimport {RedBlackTree} from '@wfh/algorithms';\nimport * as rx from 'rxjs';\nimport {Broker} from './types';\n\nlet SEQ = 0;\n\nexport function apply(broker: Broker, opts: {\n  maxNumOfWorker: number;\n  workerFactory(): Worker | NodeWorker;\n}) {\n  const {r, o, i} = broker;\n  const workerRankTree = new RedBlackTree<number, number[]>();\n  const ranksByWorkerNo = new Map<number, [worker: Worker | NodeWorker, rank: number]>();\n\n  r(o.at.assignWorker.pipe(\n    rx.map(() => {\n      if (ranksByWorkerNo.size < opts.maxNumOfWorker) {\n        const newWorker = opts.workerFactory();\n        ranksByWorkerNo.set(SEQ, [newWorker, 1]);\n        const tnode = workerRankTree.insert(1);\n        if (tnode.value) {\n          tnode.value.push(SEQ);\n        } else {\n          tnode.value = [SEQ];\n        }\n        SEQ++;\n      } else {\n        const treeNode = workerRankTree.minimum()!;\n        const workerNo = treeNode.value[0];\n        const [worker] = ranksByWorkerNo.get(workerNo)!;\n        i.dp.workerAssigned(treeNode.value[0], worker);\n      }\n    })\n  ));\n\n  r(rx.merge(i.pt.onWorkerAwake, i.pt.workerAssigned).pipe(\n    rx.map(([, workerNo]) => {\n      changeWorkerRank(workerNo, 1);\n    })\n  ));\n\n  r(i.pt.onWorkerWait.pipe(\n    rx.map(([, workerNo]) => changeWorkerRank(workerNo, -1))\n  ));\n\n  r(o.pt.onWorkerExit.pipe(\n    rx.tap(([, workerNo]) => {\n      if (ranksByWorkerNo.has(workerNo)) {\n        const [, rank] = ranksByWorkerNo.get(workerNo)!;\n        ranksByWorkerNo.delete(workerNo);\n        const tnode = workerRankTree.search(rank);\n        if (tnode) {\n          const idx = tnode.value.indexOf(workerNo);\n          if (idx >= 0) {\n            tnode.value.splice(idx, 1);\n          }\n        }\n      }\n    })\n  ));\n\n  r(i.at.stopAll.pipe());\n\n  function changeWorkerRank(workerNo: number, changeValue: number) {\n    const [, rank] = ranksByWorkerNo.get(workerNo)!;\n    const node = workerRankTree.search(rank);\n    if (node) {\n      const idx = node.value.indexOf(workerNo);\n      node.value.splice(idx, 1);\n      const tnode = workerRankTree.insert(rank + changeValue);\n      if (tnode.value)\n        tnode.value.push(workerNo);\n      else\n        tnode.value = [workerNo];\n    }\n  }\n}\n\n"]}