{"version":3,"file":"epic.js","sourceRoot":"","sources":["../src/epic.ts"],"names":[],"mappings":"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","sourcesContent":["// import inspector from 'node:inspector';\nimport * as rx from 'rxjs';\nimport {RxController, ActionTable, ActionFunctions} from './control';\nimport {DuplexController, DuplexOptions} from './duplex';\n// inspector.open(9222, 'localhost', true);\n\nexport type Reactor<I extends ActionFunctions> = (ctl: RxController<I>) => rx.Observable<any>;\nexport type DuplexReactor<I extends ActionFunctions, O extends ActionFunctions> = (ctl: DuplexController<I, O>) => rx.Observable<any>;\n\nexport type InferFuncReturnEvents<I extends ActionFunctions> = {\n  [K in keyof I as `${K & string}Resolved`]: (\n    p: ReturnType<I[K]> extends PromiseLike<infer P> ?\n      P : ReturnType<I[K]> extends rx.Observable<infer OB> ?\n        OB : ReturnType<I[K]>) => void\n} & {\n  [K in keyof I as `${K & string}Completed`]: () => void;\n};\n\nexport interface ReactorCompositeOpt<\n  I extends ActionFunctions = Record<string, never>,\n  O extends ActionFunctions = Record<string, never>,\n  LI extends readonly (keyof I)[] = readonly [],\n  LO extends readonly (keyof O)[] = readonly []\n> extends DuplexOptions<I & O> {\n  name: string;\n  inputTableFor?: LI;\n  outputTableFor?: LO;\n}\n\nexport class ReactorComposite<\n  I extends ActionFunctions = Record<string, never>,\n  O extends ActionFunctions = Record<string, never>,\n  LI extends readonly (keyof I)[] = readonly [],\n  LO extends readonly (keyof O)[] = readonly []\n> extends DuplexController<I, O> {\n  error$: rx.Subject<[lable: string, originError: any]> = new rx.ReplaySubject();\n  destory$: rx.Subject<void> = new rx.ReplaySubject(1);\n\n  get inputTable(): ActionTable<I, LI> {\n    if (this.iTable)\n      return this.iTable;\n    this.iTable = new ActionTable<I, LI>(this.i, [] as unknown as LI);\n    return this.iTable;\n  }\n\n  get outputTable(): ActionTable<O, LO> {\n    if (this.oTable)\n      return this.oTable;\n    this.oTable = new ActionTable<O, LO>(this.o, [] as unknown as LO);\n    return this.oTable;\n  }\n\n  private iTable: ActionTable<I, LI> | undefined;\n  private oTable: ActionTable<O, LO> | undefined;\n  // protected static logSubj: rx.Subject<[level: string, ...msg: any[]]>;\n  protected reactorSubj: rx.Subject<[label: string, stream: rx.Observable<any>, disableCatchError?: boolean]>;\n\n  constructor(private opts?: ReactorCompositeOpt<I, O, LI, LO>) {\n    super(opts);\n    this.reactorSubj = new rx.ReplaySubject();\n\n    if (opts?.inputTableFor && opts?.inputTableFor.length > 0) {\n      this.iTable = new ActionTable(this.i, opts.inputTableFor);\n    }\n    if (opts?.outputTableFor && opts?.outputTableFor.length > 0) {\n      this.oTable = new ActionTable(this.o, opts.outputTableFor);\n    }\n    // this.logSubj = new rx.ReplaySubject(50);\n    rx.merge(\n      this.reactorSubj.pipe(\n        rx.mergeMap(([label, downStream, noError]) => {\n          if (noError == null || !noError) {\n            downStream = this.handleError(downStream, label);\n          }\n          return downStream;\n        })\n      )\n    ).pipe(\n      rx.takeUntil(this.destory$),\n      rx.catchError((err, src) => {\n        if (this.opts?.log)\n          this.opts.log(err);\n        else\n          console.error(err);\n        return src;\n      })\n    ).subscribe();\n  }\n\n  /** @deprecated no longer needed, always start automatically after being contructed */\n  startAll() {}\n\n  destory() {\n    this.destory$.next();\n  }\n\n  // eslint-disable-next-line space-before-function-paren\n  reactivize<F extends {[s: string]: (...a: any[]) => any}>(fObject: F) {\n    const funcs = Object.entries(fObject);\n\n    for (const [key, func] of funcs) {\n      if (typeof func === 'function') {\n        this.reactivizeFunction(key, func, fObject);\n      }\n    }\n    return this as unknown as ReactorComposite<I & F, InferFuncReturnEvents<F> & O>;\n  }\n\n  /** \n   * It is just a declaration of mergeMap() operator, which merge an observable to the main stream\n   * which will be or has already been observed by `startAll()`.\n   * This is where we can add `side effect`s\n  * */\n  addReaction(...params: [label: string, stream: rx.Observable<any>, disableCatchError?: boolean]) {\n    this.r(...params);\n  }\n\n  /** Abbrevation of addReaction */\n  r = (...params: [label: string, stream: rx.Observable<any>, disableCatchError?: boolean] | [stream: rx.Observable<any>, disableCatchError?: boolean]) => {\n    if (typeof params[0] === 'string')\n      this.reactorSubj.next(params as [label: string, stream: rx.Observable<any>, disableCatchError?: boolean]);\n    else\n      this.reactorSubj.next(['', ...params as [stream: rx.Observable<any>, disableCatchError?: boolean]]);\n  };\n\n  /**\n   * A rx operator tracks down \"lobel\" information in error log via a 'catchError' inside it, to help to locate errors.\n   * This operator will continue to throw any errors from upstream observable, if you want to play any side-effect to\n   * errors, you should add your own \"catchError\" after.\n   *\n   * `addReaction(lable, ...)` uses this op internally.\n   */\n  labelError(label: string) {\n    return (upStream: rx.Observable<any>) => upStream.pipe(\n      rx.catchError((err) => {\n        this.logError(label, err);\n        return rx.throwError(err);\n      })\n    );\n  }\n\n  protected reactivizeFunction(key: string, func: (...a: any[]) => any, funcThisRef?: any) {\n    const resolveFuncKey = key + 'Resolved';\n    const finishFuncKey = key + 'Completed';\n    const dispatchResolved = (this as unknown as ReactorComposite<Record<string, never>, Record<string, never>>).o.core.dispatchForFactory(resolveFuncKey as any);\n    const dispatchCompleted = (this as unknown as ReactorComposite<Record<string, never>, Record<string, never>>).o.core.dispatchForFactory(finishFuncKey as any);\n\n    this.r(this.i.pt[key as keyof I].pipe(\n      rx.mergeMap(([meta, ...params]) => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        const res = func.apply(funcThisRef, params);\n        if (rx.isObservable(res)) {\n          return res.pipe(\n            rx.map(res => dispatchResolved(meta, res)),\n            rx.finalize(() => dispatchCompleted(meta))\n          );\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        } else if (res?.then != null && res?.catch != null) {\n          return rx.defer(() => (res as PromiseLike<unknown>)).pipe(\n            rx.map(res => dispatchResolved(meta, res)),\n            rx.finalize(() => dispatchCompleted(meta))\n          );\n        } else {\n          dispatchResolved(meta, res);\n          dispatchCompleted(meta);\n          return rx.EMPTY;\n        }\n      })\n    ));\n\n    return resolveFuncKey;\n  }\n\n  protected logError(label: string, err: any) {\n    (this as unknown as ReactorComposite<Record<string, never>, Record<string, never>>).error$.next([err, label]);\n    if (this.opts?.log)\n      this.opts.log('@' + this.opts.name + '::' + label, err);\n    else\n      console.error('@' + this.opts?.name + '::' + label, err);\n  }\n\n  protected handleError(upStream: rx.Observable<any>, label = '', hehavior: 'continue' | 'stop' | 'throw' = 'continue') {\n    return upStream.pipe(\n      rx.catchError((err, src) => {\n        this.logError(label, err);\n        if (hehavior === 'throw')\n          return rx.throwError(err);\n        return hehavior === 'continue' ? src : rx.EMPTY;\n      })\n    );\n  }\n}\n"]}