{"version":3,"file":"epic.js","sourceRoot":"","sources":["../src/epic.ts"],"names":[],"mappings":"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","sourcesContent":["// import inspector from 'node:inspector';\nimport * as rx from 'rxjs';\nimport {RxController, Action, ArrayOrTuple, ActionTable, ActionFunctions, ActionMeta, DispatchForAndObserveRes,\n  InferPayload, InferMapParam, mapActionToPayload, actionRelatedToAction} from './control';\nimport {DuplexController, DuplexOptions} from './duplex';\n// inspector.open(9222, 'localhost', true);\n\nexport type Reactor<I> = (ctl: RxController<I>) => rx.Observable<any>;\nexport type DuplexReactor<I, O> = (ctl: DuplexController<I, O>) => rx.Observable<any>;\n\nexport type InferFuncReturnEvents<I> = {\n  [K in keyof I as `${K & string}Resolved`]: (\n    p: I[K] extends (...args: any) => PromiseLike<infer P> ?\n      P : I[K] extends (...args: any) =>  rx.Observable<infer OB> ?\n        OB : I[K] extends infer R ? R : unknown) => void\n} & {\n  [K in keyof I as `${K & string}Completed`]: () => void;\n};\n\nexport interface ReactorCompositeOpt<\n  I = Record<never, never>,\n  O = Record<never, never>,\n  LI extends readonly (keyof I)[] = readonly [],\n  LO extends readonly (keyof O)[] = readonly []\n> extends DuplexOptions<I & O> {\n  name: string;\n  inputTableFor?: LI;\n  outputTableFor?: LO;\n}\n\ninterface BaseEvents {\n  _onErrorFor(err: any): void;\n}\n\ntype LOE<LI extends readonly any[]> = readonly (LI[number] | '_onErrorFor')[];\n\nexport class ReactorComposite<\n  I = Record<never, never>,\n  O = Record<never, never>,\n  LI extends readonly (keyof I)[] = readonly [],\n  LO extends readonly (keyof O)[] = readonly []\n> extends DuplexController<I, O & BaseEvents> {\n\n  protected errorSubject: rx.Subject<\n  [lable: string, originError: any] |\n  [lable: string, originError: any, relevantActions: ActionMeta[]\n  ]> = new rx.ReplaySubject(20);\n  /** All catched error goes here */\n  error$ = this.errorSubject.asObservable();\n  destory$: rx.Subject<void> = new rx.ReplaySubject(1);\n  dispose: () => void;\n\n  get inputTable(): ActionTable<I, LI> {\n    if (this.iTable)\n      return this.iTable;\n    this.iTable = new ActionTable<I, LI>(this.i, [] as unknown as LI);\n    return this.iTable;\n  }\n\n  get outputTable(): ActionTable<O & BaseEvents, LOE<LO>> {\n    if (this.oTable)\n      return this.oTable;\n    this.oTable = new ActionTable<O & BaseEvents, LOE<LO>>(this.o, ['_onErrorFor'] as unknown as LOE<LO>);\n    return this.oTable;\n  }\n\n  private iTable: ActionTable<I, LI> | undefined;\n  private oTable: ActionTable<O & BaseEvents, LOE<LO>> | undefined;\n  // protected static logSubj: rx.Subject<[level: string, ...msg: any[]]>;\n  protected reactorSubj: rx.Subject<[label: string, stream: rx.Observable<any>, disableCatchError?: boolean]>;\n\n  constructor(private opts?: ReactorCompositeOpt<I, O, LI, LO>) {\n    super(opts);\n    this.reactorSubj = new rx.ReplaySubject();\n    this.createDispatchAndObserveProxy(this.i);\n    this.createDispatchAndObserveProxy(this.o);\n\n    if (opts?.inputTableFor && opts?.inputTableFor.length > 0) {\n      this.iTable = new ActionTable(this.i, opts.inputTableFor);\n    }\n    if (opts?.outputTableFor && opts?.outputTableFor.length > 0) {\n      this.oTable = new ActionTable(this.o, [...opts.outputTableFor, '_onErrorFor']);\n    }\n    this.o.pt._onErrorFor.pipe(\n      rx.takeUntil(this.destory$),\n      rx.catchError((err, src) => {\n        if (this.opts?.log)\n          this.opts.log(err);\n        else\n          console.error(err);\n        return src;\n      })\n    );\n    // this.logSubj = new rx.ReplaySubject(50);\n    this.reactorSubj.pipe(\n      rx.mergeMap(([label, downStream, noError]) => {\n        if (noError == null || !noError) {\n          downStream = this.handleError(downStream, label);\n        }\n        return downStream;\n      }),\n      rx.takeUntil(this.destory$),\n      rx.catchError((err, src) => {\n        if (this.opts?.log)\n          this.opts.log(err);\n        else\n          console.error(err);\n        return src;\n      })\n    ).subscribe();\n    this.dispose = () => {\n      this.o.core.actionUpstream.next(this.o.core.createAction('Reactors finalized' as any));\n      this.destory$.next();\n    };\n  }\n\n  /** @deprecated no longer needed, always start automatically after being contructed */\n  startAll() {}\n\n  /** @deprecated call dispose() instead */\n  destory() {\n    this.dispose();\n  }\n\n\n  // eslint-disable-next-line space-before-function-paren\n  reactivize<F extends ActionFunctions>(fObject: F) {\n    const funcs = Object.entries(fObject);\n\n    for (const [key, func] of funcs) {\n      if (typeof func === 'function') {\n        this.reactivizeFunction(key, func, fObject);\n      }\n    }\n    return this as unknown as ReactorComposite<I & F, InferFuncReturnEvents<F> & O, LI, LO>;\n  }\n\n  reativizeRecursiveFuncs<F extends ActionFunctions>(fObject: F) {\n    this.reactivize(fObject);\n    return this as unknown as ReactorComposite<InferFuncReturnEvents<F> & I & F, InferFuncReturnEvents<F> & O, LI, LO>;\n  }\n\n  /**\n   * It is just a declaration of mergeMap() operator, which merge an observable to the main stream\n   * which will be or has already been observed by `startAll()`.\n   * This is where we can add `side effect`s\n  * */\n  addReaction(...params: [label: string, stream: rx.Observable<any>, disableCatchError?: boolean]) {\n    this.r(...params);\n  }\n\n  /** Abbrevation of addReaction */\n  r = (...params: [label: string, stream: rx.Observable<any>, disableCatchError?: boolean] | [stream: rx.Observable<any>, disableCatchError?: boolean]) => {\n    if (typeof params[0] === 'string')\n      this.reactorSubj.next(params as [label: string, stream: rx.Observable<any>, disableCatchError?: boolean]);\n    else\n      this.reactorSubj.next(['', ...params as [stream: rx.Observable<any>, disableCatchError?: boolean]]);\n  };\n\n  /**\n   * An rx operator tracks down \"lobel\" information in error log via a 'catchError' inside it, to help to locate errors.\n   * This operator will continue to throw any errors from upstream observable, if you want to play any side-effect to\n   * errors, you should add your own \"catchError\" after.\n   *\n   * `addReaction(lable, ...)` uses this op internally.\n   */\n  labelError<T>(label: string): (upStream: rx.Observable<T>) => rx.Observable<T> {\n    return (upStream: rx.Observable<T>): rx.Observable<T> => upStream.pipe(\n      rx.catchError((err) => {\n        this.logError(label, err);\n        return rx.throwError(() => err instanceof Error ? err : new Error(err));\n      })\n    );\n  }\n\n  catchErrorFor<T>(...actionMetas: ActionMeta[]): (upStream: rx.Observable<T>) => rx.Observable<T> {\n    return (upStream: rx.Observable<T>): rx.Observable<T> => upStream.pipe(\n      rx.catchError((err, src) => {\n        (this.o as unknown as RxController<BaseEvents>).dpf._onErrorFor(actionMetas, err);\n        // this.errorSubject.next(['', err instanceof Error ? err : new Error(err), actionMetas]);\n        return rx.EMPTY;\n      })\n    );\n  }\n\n  dispatchErrorFor(err: any, actionMetas: ActionMeta | ActionMeta[]) {\n    (this.o as unknown as RxController<BaseEvents>).dpf._onErrorFor(actionMetas, err);\n  }\n\n  protected createDispatchAndObserveProxy<I>(streamCtl: RxController<I>) {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const composite = this;\n    streamCtl.dispatchForAndObserveRes = streamCtl.dfo = new Proxy({} as {[K in keyof I]: DispatchForAndObserveRes<I, K>}, {\n      get(_target, key, _rec) {\n        return <R extends keyof I>(observedAction$: rx.Observable<Action<I, R>>, referActions: ActionMeta | ArrayOrTuple<ActionMeta> | null, ...params: any[]) => {\n          const action = streamCtl.core.createAction(key as keyof I, params as InferPayload<I[keyof I]>);\n          if (referActions)\n            action.r = Array.isArray(referActions) ? referActions.map(m => m.i) : (referActions as ActionMeta).i;\n          const r$ = new rx.ReplaySubject<InferMapParam<I, R>>(1);\n          rx.merge(\n            observedAction$.pipe(\n              actionRelatedToAction(action),\n              mapActionToPayload()\n            ),\n            composite.o.pt._onErrorFor.pipe(\n              actionRelatedToAction(action),\n              rx.map(([, err, ...metas]) => {\n                throw err;\n              })\n            ),\n            new rx.Observable<never>(sub => {\n              streamCtl.core.actionUpstream.next(action);\n              sub.complete();\n            })\n          ).subscribe(r$);\n          return r$.asObservable();\n        };\n      },\n      has(_target, key) {\n        return true;\n      },\n      ownKeys() {\n        return [] as string[];\n      }\n    });\n  }\n\n  protected reactivizeFunction(key: string, func: (...a: any[]) => any, funcThisRef?: any) {\n    const resolveFuncKey = key + 'Resolved';\n    const finishFuncKey = key + 'Completed';\n    const dispatchResolved = (this as unknown as ReactorComposite<Record<string, never>, Record<string, any>>).o.core.dispatchForFactory(resolveFuncKey as any);\n    const dispatchCompleted = (this as unknown as ReactorComposite<Record<string, never>, Record<string, () => void>>).o.core.dispatchForFactory(finishFuncKey as any);\n\n    this.r(this.i.pt[key as keyof I].pipe(\n      rx.mergeMap(([meta, ...params]) => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        const res = func.apply(funcThisRef, params);\n        if (rx.isObservable(res)) {\n          return res.pipe(\n            rx.map(res => dispatchResolved(meta, res)),\n            this.catchErrorFor(meta),\n            rx.finalize(() => dispatchCompleted(meta))\n          );\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        } else if (res?.then != null && res?.catch != null) {\n          return rx.defer(() => (res as PromiseLike<unknown>)).pipe(\n            rx.map(res => dispatchResolved(meta, res)),\n            this.catchErrorFor(meta),\n            rx.finalize(() => dispatchCompleted(meta))\n          );\n        } else {\n          try {\n            dispatchResolved(meta, res);\n            dispatchCompleted(meta);\n          } catch (e) {\n            this.dispatchErrorFor(e as Error, meta);\n          }\n          return rx.EMPTY;\n        }\n      })\n    ));\n\n    return resolveFuncKey;\n  }\n\n  protected logError(label: string, err: any) {\n    const message = '@' + (this.opts?.name ? this.opts.name + '::' : '') + label;\n    this.errorSubject.next([err, message]);\n    if (this.opts?.log)\n      this.opts.log(message, err);\n    else\n      console.error(message, err);\n  }\n\n  protected handleError(upStream: rx.Observable<any>, label = '', hehavior: 'continue' | 'stop' | 'throw' = 'continue') {\n    return upStream.pipe(\n      rx.catchError((err, src) => {\n        this.logError(label, err);\n        if (hehavior === 'throw')\n          return rx.throwError(() => err instanceof Error ? err : new Error(err));\n        return hehavior === 'continue' ? src : rx.EMPTY;\n      })\n    );\n  }\n}\n\ntype InferInputActionsType<R> = R extends ReactorComposite<infer I, any, any, any> ? I : Record<never, never>;\ntype InferOutputEventsType<R> = R extends ReactorComposite<any, infer O, any, any> ? O : Record<never, never>;\ntype ExtractTupleElement<T> = T extends readonly (infer R)[] ? R : never;\ntype InferLatestActionType<R> = R extends ReactorComposite<any, any, infer LI, any> ? ExtractTupleElement<LI> : never;\ntype InferLatestEventsType<R> = R extends ReactorComposite<any, any, any, infer LO> ? ExtractTupleElement<LO> : never;\n\n/** An utility type inference which helps to define a new ReactorComposite type based on extending an existing ReactorComposite type */\nexport type ReactorCompositeMergeType<\n  R extends ReactorComposite<any, any, any, any>,\n  ExActions = Record<never, never>,\n  ExEvents = Record<never, never>,\n  ELI extends readonly (keyof ExActions | keyof InferInputActionsType<R>)[] = readonly [],\n  ELO extends readonly (keyof ExEvents | keyof InferOutputEventsType<R>)[] = readonly []\n> = ReactorComposite<\n(R extends ReactorComposite<infer I, any, any, any> ? I : Record<never, never>) & ExActions,\n(R extends ReactorComposite<any, infer O, any, any> ? O : Record<never, never>) & ExEvents,\nreadonly (InferLatestActionType<R> | ExtractTupleElement<ELI>)[],\nreadonly (InferLatestEventsType<R> | ExtractTupleElement<ELO>)[]\n>;\n\n"]}