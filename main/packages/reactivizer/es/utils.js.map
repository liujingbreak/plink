{"version":3,"file":"utils.js","sourceRoot":"","sources":["../src/utils.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,MAAM,MAAM,CAAC;AAE3B,MAAM,UAAU,UAAU,CAAI,WAAmB,EAAE,GAAe;IAChE,OAAO,UAAS,EAAoB;QAClC,IAAI,QAAQ,GAAG,KAAK,CAAC;QACrB,OAAO,EAAE,CAAC,KAAK,CACb,EAAE,CAAC,IAAI,CACL,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;YACT,QAAQ,GAAG,IAAI,CAAC;YAChB,OAAO,CAAC,CAAC;QACX,CAAC,CAAC,CACH,EACD,EAAE,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,IAAI,CACxB,EAAE,CAAC,GAAG,CAAC,GAAG,EAAE;YACV,IAAI,CAAC,QAAQ,EAAE;gBACb,GAAG,EAAE,CAAC;aACP;QACH,CAAC,CAAC,EACF,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EACV,EAAE,CAAC,cAAc,EAAE,CACpB,CACF,CAAC;IACJ,CAAC,CAAC;AACJ,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,eAAe,CAA4C,GAAW,EAAE,QAAQ,GAAG,KAAK;IACtG,MAAM,GAAG,GAAG,QAAQ,CAAC,CAAC,CAAC,IAAI,iBAAiB,CAAC,GAAG,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,WAAW,CAAC,GAAG,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC;IACjG,MAAM,MAAM,GAAG,IAAI,WAAW,CAAC,GAAG,CAAC,CAAC;IACpC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;QAC1C,MAAM,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;KAC/B;IACD,OAAO,GAAQ,CAAC;AAClB,CAAC;AAED,MAAM,UAAU,eAAe,CAAC,GAAoC,EAAE,UAAmB,EAAE,MAAe;IACxG,OAAO,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,IAAI,WAAW,CAAC,GAAG,EAAE,UAAU,EAAE,MAAM,CAAC,CAAwB,CAAC,CAAC;AAC5G,CAAC;AACD;;GAEG;AACH,MAAM,UAAU,iBAAiB,CAA4C,GAAW,EAAE,QAAQ,GAAG,KAAK;IACxG,MAAM,GAAG,GAAG,QAAQ,CAAC,CAAC,CAAC,IAAI,iBAAiB,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IACvF,MAAM,MAAM,GAAG,IAAI,UAAU,CAAC,GAAG,CAAC,CAAC;IACnC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;QAC1C,MAAM,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;KAC/B;IACD,OAAO,GAAQ,CAAC;AAClB,CAAC;AAED,MAAM,UAAU,iBAAiB,CAAC,GAAoC,EAAE,UAAmB,EAAE,MAAe;IAC1G,OAAO,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,IAAI,UAAU,CAAC,GAAG,EAAE,UAAU,EAAE,MAAM,CAAC,CAAwB,CAAC,CAAC;AAC3G,CAAC","sourcesContent":["import * as rx from 'rxjs';\n\nexport function timeoutLog<T>(millseconds: number, log: () => void): (up: rx.Observable<T>) => rx.Observable<T> {\n  return function(up: rx.Observable<T>): rx.Observable<T> {\n    let hasValue = false;\n    return rx.merge(\n      up.pipe(\n        rx.map(v => {\n          hasValue = true;\n          return v;\n        })\n      ),\n      rx.timer(millseconds).pipe(\n        rx.map(() => {\n          if (!hasValue) {\n            log();\n          }\n        }),\n        rx.take(1),\n        rx.ignoreElements()\n      )\n    );\n  };\n}\n\n/**\n * Turn string to web worker transferable `ArrayBuffer`\n */\nexport function str2ArrayBuffer<T extends SharedArrayBuffer | ArrayBuffer>(str: string, isShared = false): T {\n  const buf = isShared ? new SharedArrayBuffer(str.length << 1) : new ArrayBuffer(str.length << 1);\n  const u16arr = new Uint16Array(buf);\n  for (let i = 0, l = str.length; i < l; i++) {\n    u16arr[i] = str.charCodeAt(i);\n  }\n  return buf as T;\n}\n\nexport function arrayBuffer2str(buf: ArrayBuffer | SharedArrayBuffer, byteOffset?: number, length?: number) {\n  return String.fromCharCode.apply(null, (new Uint16Array(buf, byteOffset, length)) as unknown as number[]);\n}\n/**\n * Turn ascii string to web worker transferable `ArrayBuffer` by Uint8Array\n */\nexport function ascii2ArrayBuffer<T extends SharedArrayBuffer | ArrayBuffer>(str: string, isShared = false): T {\n  const buf = isShared ? new SharedArrayBuffer(str.length) : new ArrayBuffer(str.length);\n  const u16arr = new Uint8Array(buf);\n  for (let i = 0, l = str.length; i < l; i++) {\n    u16arr[i] = str.charCodeAt(i);\n  }\n  return buf as T;\n}\n\nexport function arrayBuffer2ascii(buf: ArrayBuffer | SharedArrayBuffer, byteOffset?: number, length?: number) {\n  return String.fromCharCode.apply(null, (new Uint8Array(buf, byteOffset, length)) as unknown as number[]);\n}\n"]}