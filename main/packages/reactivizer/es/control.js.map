{"version":3,"file":"control.js","sourceRoot":"","sources":["../src/control.ts"],"names":[],"mappings":"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","sourcesContent":["import * as rx from 'rxjs';\n\n// type Mutable<I> = {-readonly [K in keyof I]: I[K]};\nexport type ActionFunctions = {[k: string]: any}; // instead of A indexed access type, since a \"class type\" can not be assigned to \"Indexed access type with function type property\"\n\ntype InferPayload<F> = F extends (...a: infer P) => any ? P : unknown[];\n\nexport type Action<I extends ActionFunctions, K extends keyof I = keyof I> = {\n  /** id */\n  i: number;\n  /** type */\n  t: string;\n  /** payload **/\n  p: InferPayload<I[K]>;\n};\n\ntype InferMapParam<I extends ActionFunctions, K extends keyof I> = [Action<any>['i'], ...InferPayload<I[K]>];\n\nexport type PayloadStream<I extends ActionFunctions, K extends keyof I> = rx.Observable<InferMapParam<I, K>>;\n\ntype Dispatch<I extends ActionFunctions> = (...params: InferPayload<I[keyof I]>) => Action<any>['i'];\n// type DispatchAndObserveFn<I extends ActionFunctions, K extends keyof I> = {\n//   id: Action<I, K>['i'];\n//   observe<T>(target: rx.Observable<T>, predicate: (\n//     requestActionId: Action<I, K>['i'],\n//     targetValue: T\n//   ) => boolean): rx.Observable<T>;\n// };\n\nexport type CoreOptions = {\n  debug?: string | boolean;\n  debugExcludeTypes?: string[];\n  log?: (msg: string, ...objs: any[]) => unknown;\n};\n\nlet SEQ = 1;\nlet ACTION_SEQ = Number((Math.random() + '').slice(2, 10)) + 1;\n\nconst has = Object.prototype.hasOwnProperty;\n\nexport class ControllerCore<I extends ActionFunctions = {[k: string]: never}> {\n  actionUpstream = new rx.Subject<Action<I, keyof I>>();\n  interceptor$ = new rx.BehaviorSubject<(up: rx.Observable<Action<I, keyof I>>) => rx.Observable<Action<I, keyof I>>>(a => a);\n  typePrefix = SEQ++ + '/';\n  debugName: string;\n  action$: rx.Observable<Action<I, keyof I>>;\n  debugExcludeSet: Set<string>;\n  protected dispatcher = {} as {[K in keyof I]: Dispatch<I>};\n\n  constructor(public opts?: CoreOptions) {\n    this.debugName = typeof opts?.debug === 'string' ? `[${this.typePrefix}${opts.debug}] ` : this.typePrefix;\n    this.debugExcludeSet = new Set(opts?.debugExcludeTypes ?? []);\n\n    const debuggableAction$ = opts?.debug\n      ? this.actionUpstream.pipe(\n        opts?.log ?\n          rx.tap(action => opts.log!(this.debugName + 'rx:action', nameOfAction(action))) :\n          (typeof window !== 'undefined') || (typeof Worker !== 'undefined') ?\n            rx.tap(action => {\n              const type = nameOfAction(action);\n              if (!this.debugExcludeSet.has(type)) {\n                // eslint-disable-next-line no-console\n                console.log(`%c ${this.debugName}rx:action `, 'color: white; background: #8c61ff;', type, [action.i, ...action.p]);\n              }\n            })\n            :\n            rx.tap(action => {\n              const type = nameOfAction(action);\n              if (!this.debugExcludeSet.has(type)) {\n                // eslint-disable-next-line no-console\n                console.log( this.debugName + 'rx:action', type, action.p === undefined ? '' : [action.i, ...action.p] );\n              }\n            }),\n        rx.share()\n      )\n      : this.actionUpstream;\n\n    this.action$ = this.interceptor$.pipe(\n      rx.switchMap(interceptor => interceptor ?\n        debuggableAction$.pipe(interceptor, rx.share()) :\n        debuggableAction$)\n    );\n  }\n\n  createAction<K extends keyof I>(type: K, params?: InferPayload<I[K]>) {\n    return {\n      t: this.typePrefix + (type as string),\n      i: ACTION_SEQ++,\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      p: params ?? []\n    } as Action<I, K>;\n  }\n\n  dispatcherFactory<K extends keyof I>(type: K): Dispatch<I> {\n    if (has.call(this.dispatcher, type)) {\n      return this.dispatcher[type];\n    }\n    const dispatch = (...params: InferPayload<I[keyof I]>) => {\n      const action = this.createAction(type, params);\n      this.actionUpstream.next(action);\n      return action.i;\n    };\n    this.dispatcher[type] = dispatch;\n    return dispatch;\n  }\n\n  replaceActionInterceptor(\n    factory: (\n      origin: (up: rx.Observable<Action<I, keyof I>>) => rx.Observable<Action<I, keyof I>>\n    ) => (up: rx.Observable<Action<I, keyof I>>) => rx.Observable<Action<I, keyof I>>\n  ) {\n    const newInterceptor = factory(this.interceptor$.getValue());\n    this.interceptor$.next(newInterceptor);\n  }\n\n  // eslint-disable-next-line space-before-function-paren\n  ofType<T extends (keyof I)[]>(...types: T) {\n    return (up: rx.Observable<Action<any, any>>) => {\n      const matchTypes = types.map(type => this.typePrefix + (type as string));\n      return up.pipe(\n        rx.filter((a): a is Action<I, T[number]> => matchTypes.some(matchType => a.t === matchType))\n      );\n    };\n  }\n}\n\nexport class RxController<I extends ActionFunctions> {\n  core: ControllerCore<I>;\n  dispatcher: {[K in keyof I]: (...params: InferPayload<I[K]>) => Action<I, K>['i']};\n  dp: {[K in keyof I]: (...params: InferPayload<I[K]>) => Action<I, K>['i']};\n  // dispatchAndObserve: {[K in keyof I]: (...params: InferPayload<I[K]>) => DispatchAndObserveFn<I, K>};\n  // dpno: {[K in keyof I]: (...params: InferPayload<I[K]>) => DispatchAndObserveFn<I, K>};\n  payloadByType: {[K in keyof I]: PayloadStream<I, K>};\n  pt: {[K in keyof I]: PayloadStream<I, K>};\n  actionByType: {[K in keyof I]: rx.Observable<Action<I, K>>};\n  at: {[K in keyof I]: rx.Observable<Action<I, K>>};\n  replaceActionInterceptor: ControllerCore<I>['replaceActionInterceptor'];\n\n  constructor(private opts?: CoreOptions) {\n    const core = this.core = new ControllerCore(opts);\n\n    this.dispatcher = this.dp = new Proxy({} as {[K in keyof I]: (...params: InferPayload<I[K]>) => Action<I, K>['i']}, {\n      get(_target, key, _rec) {\n        return core.dispatcherFactory(key as keyof I);\n      }\n    });\n\n    const actionsByType = {} as {[K in keyof I]: rx.Observable<Action<I, K>>};\n    const actionByTypeProxy = new Proxy(\n      {} as typeof actionsByType,\n      {\n        get(_target, type, _rec) {\n          let a$ = actionsByType[type as keyof I];\n          if (a$ == null) {\n            const matchType = core.typePrefix + (type as string);\n            a$ = actionsByType[type as keyof I] = core.action$.pipe(\n              rx.filter(({t}) => t === matchType),\n              rx.share()\n            );\n          }\n          return a$;\n        }\n      });\n\n    const payloadsByType = {} as {[K in keyof I]: rx.Observable<[Action<I, K>['i'], ...Action<I, K>['p']]>};\n    const payloadByTypeProxy = new Proxy(\n      {} as typeof payloadsByType,\n      {\n        get(_target, key, _rec) {\n          let p$ = payloadsByType[key as keyof I];\n          if (p$ == null) {\n            const a$ = actionByTypeProxy[key as keyof I];\n            p$ = payloadsByType[key as keyof I] = a$.pipe(\n              rx.map(a => [a.i, ...a.p] as any),\n              rx.share()\n            );\n          }\n          return p$;\n        }\n      });\n    this.actionByType = this.at = actionByTypeProxy;\n    this.payloadByType = this.pt = payloadByTypeProxy;\n    this.replaceActionInterceptor = core.replaceActionInterceptor;\n\n    // const dispatchAndObserveCache = {} as {[K in keyof I]: (...params: InferPayload<I[K]>) => DispatchAndObserveFn<I, K>};\n    // this.dispatchAndObserve = this.dpno = new Proxy({} as typeof dispatchAndObserveCache, {\n    //   get(_target, type) {\n    //     let fn = dispatchAndObserveCache[type as keyof I];\n    //     if (fn == null) {\n    //       fn = dispatchAndObserveCache[type as keyof I] = (...params: InferPayload<I[keyof I]>) => {\n    //         let actionId: Action<any>['i'];\n    //         const observe = rx.merge(\n    //           new rx.Observable<never>(sub => {\n    //             actionId = dispatcher[type as keyof I](...params);\n\n    //           })\n    //         );\n    //         return {id, observe};\n    //       };\n    //     }\n    //     return fn;\n    //   }\n    // });\n  }\n\n  /**\n   * Conceptually, it is a \"state store\" like Apache Kafka's \"table\"\n   * From perspecitve of implementation, a map ReplaySubject which provides similiar function as rx.withLatestFrom() does\n   * @return Pick<...>\n   The reason using `Pick<{[K in keyof I]: PayloadStream<I, K>}, T[number]>` instead of `{[K in T[number]]: PayloadStream<I, K>` is that the former expression\n   makes Typescript to jump to `I` type definition source code when we perform operation like \"Go to definition\" in editor, the latter can't\n   */\n  // eslint-disable-next-line space-before-function-paren\n  createLatestPayloadsFor<T extends (keyof I)[]>(...types: T): Pick<{[K in keyof I]: PayloadStream<I, K>}, T[number]> {\n    const replayedPayloads = {} as {[K in keyof I]: rx.Observable<InferMapParam<I, K>>};\n    const payloadByTypeProxy = this.payloadByType;\n    for (const key of types) {\n      const r$ = new rx.ReplaySubject<InferMapParam<I, keyof I>>(1);\n      replayedPayloads[key] = this.opts?.debug ?\n        r$.pipe(this.debugLogLatestActionOperator(key as string)) :\n        r$.asObservable();\n      payloadByTypeProxy[key].subscribe(r$);\n    }\n    return replayedPayloads;\n  }\n\n  protected debugLogLatestActionOperator<P>(type: string) {\n    return this.opts?.log ?\n      rx.map<P, P>((payload, idx) => {\n        if (idx === 0) {\n          this.opts!.log!(this.core.debugName + 'rx:latest', type);\n        }\n        return payload;\n      }) :\n      (typeof window !== 'undefined') || (typeof Worker !== 'undefined') ?\n        rx.map<P, P>((payload, idx) => {\n          if (idx === 0) {\n            // eslint-disable-next-line no-console\n            console.log(`%c ${this.core.debugName}rx:latest `, 'color: #f0fe0fe0; background: #8c61dd;', type,\n              payload === undefined ? '' : payload\n            );\n          }\n          return payload;\n        }) :\n        rx.map<P, P>((payload, idx) => {\n          if (idx === 0) {\n            // eslint-disable-next-line no-console\n            console.log(this.core.debugName + 'rx:latest', type, payload === undefined ? '' : payload);\n          }\n          return payload;\n        });\n  }\n}\n\n/**\n * Get the \"action name\" from payload's \"type\" field,\n * `payload.type`` is actually consist of string like `${Prefix}/${actionName}`,\n * this function returns the `actionName` part\n * @return undefined if current action doesn't have a valid \"type\" field\n */\n// eslint-disable-next-line space-before-function-paren\nexport function nameOfAction<I extends ActionFunctions>(\n  action: Pick<Action<I, keyof I>, 't'>\n) {\n  const elements = action.t.split('/');\n  return (elements.length > 1 ? elements[1] : elements[0]) as keyof I & string;\n}\n\nexport function serializeAction(action: Action<any>):\nAction<any> {\n  return {...action, t: nameOfAction(action)};\n}\n\nexport function deserializeAction<I extends ActionFunctions>(actionObj: any, toController: RxController<I>) {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return toController.dispatcher[actionObj.t as keyof I](...actionObj.p as InferPayload<I[keyof I]>);\n}\n\n\n"]}