{"version":3,"file":"control.js","sourceRoot":"","sources":["../src/control.ts"],"names":[],"mappings":"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","sourcesContent":["import * as rx from 'rxjs';\nimport {Action, InferPayload, ActionMeta,\n  ArrayOrTuple, ControllerCore, Dispatch, DispatchFor, CoreOptions,\n  has, nameOfAction, actionMetaToStr\n} from './stream-core';\n\nexport * from './stream-core';\n\nexport type InferMapParam<I, K extends keyof I> = [ActionMeta, ...InferPayload<I[K]>];\nexport type DispatchAndObserveRes<I, K extends keyof I> = <O, R extends keyof O>(\n  waitForAction$: rx.Observable<Action<O, R>>, ...params: InferPayload<I[K]>\n) => rx.Observable<InferMapParam<O, R>>;\n\nexport type DispatchForAndObserveRes<I, K extends keyof I> = <O, R extends keyof O>(\n  waitForAction$: rx.Observable<Action<O, R>>, relateToActionMeta: ActionMeta | ArrayOrTuple<ActionMeta> | null, ...params: InferPayload<I[K]>\n) => rx.Observable<InferMapParam<O, R>>;\n\nconst EMPTY_ARRY = [] as [];\n\nexport class RxController<I> {\n  core: ControllerCore<I>;\n  dispatcher: {[K in keyof I]: Dispatch<I, K & string>};\n  dispatcherFor: {[K in keyof I]: DispatchFor<I, K & string>};\n  /** abbrevation of property \"dispatcher\", exactly same instance of dispatcher */\n  dp: {[K in keyof I]: Dispatch<I, K & string>};\n  /** abbrevation of property \"dispatcherFor\", exactly same instance of dispatcherFor */\n  dpf: {[K in keyof I]: DispatchFor<I, K & string>};\n  dispatchAndObserveRes: {[K in keyof I]: DispatchAndObserveRes<I, K>};\n  /** abbrevation of property \"dispatchAndObserveRes\", exactly same instance of dispatchAndObserveRes */\n  do: {[K in keyof I]: DispatchAndObserveRes<I, K>};\n  dispatchForAndObserveRes: {[K in keyof I]: DispatchForAndObserveRes<I, K>};\n  /** abbrevation of dispatchForAndObserveRes */\n  dfo: {[K in keyof I]: DispatchForAndObserveRes<I, K>};\n  payloadByType: {[K in keyof I]: rx.Observable<[ActionMeta, ...InferPayload<I[K]>]>};\n  /** abbrevation of payloadByType */\n  pt: {[K in keyof I]: rx.Observable<[ActionMeta, ...InferPayload<I[K]>]>};\n  actionByType: {[K in keyof I]: rx.Observable<Action<I, K>>};\n  /** abbrevation of actionByType */\n  at: {[K in keyof I]: rx.Observable<Action<I, K>>};\n\n  updateInterceptor: ControllerCore<I>['updateInterceptor'];\n\n  constructor(public opts?: CoreOptions<I> & {debugTableAction?: boolean}) {\n    const core = this.core = new ControllerCore(opts);\n\n    this.dispatcher = this.dp = new Proxy({} as {[K in keyof I]: Dispatch<I, K & string>}, {\n      get(_target, key, _rec) {\n        return core.dispatchFactory(key as keyof I);\n      },\n      has(_target, _key) {\n        return true;\n      },\n      ownKeys() {\n        return [] as string[];\n      }\n    });\n    this.dispatcherFor = this.dpf = new Proxy({} as {[K in keyof I]: DispatchFor<I, K & string>}, {\n      get(_target, key, _rec) {\n        return core.dispatchForFactory(key as keyof I);\n      },\n      has(_target, key) {\n        return true;\n      },\n      ownKeys() {\n        return [] as string[];\n      }\n    });\n\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self = this;\n    this.dispatchForAndObserveRes = this.dfo = new Proxy({} as {[K in keyof I]: DispatchForAndObserveRes<I, K>}, {\n      get(_target, key, _rec) {\n\n        return <R extends keyof I>(action$: rx.Observable<Action<I, R>>, referActions: ActionMeta | ArrayOrTuple<ActionMeta> | null, ...params: any[]) => {\n          const action = self.core.createAction(key as keyof I, params as InferPayload<I[keyof I]>);\n          if (referActions)\n            action.r = Array.isArray(referActions) ? referActions.map(m => m.i) : (referActions as ActionMeta).i;\n          const r$ = new rx.ReplaySubject<InferMapParam<I, R>>(1);\n          rx.merge(\n            action$.pipe(\n              actionRelatedToAction(action),\n              mapActionToPayload()\n            ),\n            new rx.Observable<never>(sub => {\n              self.core.actionUpstream.next(action);\n              sub.complete();\n            })\n          ).subscribe(r$);\n          return r$.asObservable();\n        };\n      },\n      has(_target, key) {\n        return true;\n      },\n      ownKeys() {\n        return [] as string[];\n      }\n    });\n\n    this.dispatchAndObserveRes = this.do = new Proxy({} as {[K in keyof I]: DispatchAndObserveRes<I, K>}, {\n      get(_target, key, _rec) {\n\n        return <R extends keyof I>(action$: rx.Observable<Action<I, R>>, ...params: any[]) => {\n          return self.dfo[key as keyof I](action$, null, ...(params as any));\n        };\n      },\n      has(_target, key) {\n        return true;\n      },\n      ownKeys() {\n        return [] as string[];\n      }\n    });\n\n    const actionsByType = {} as {[K in keyof I]: rx.Observable<Action<I, K>>};\n    const actionByTypeProxy = new Proxy(\n      {} as typeof actionsByType,\n      {\n        get(_target, type, _rec) {\n          let a$ = actionsByType[type as keyof I];\n          if (a$ == null) {\n            const matchType = core.typePrefix + (type as string);\n            a$ = actionsByType[type as keyof I] = core.action$.pipe(\n              rx.filter(({t}) => t === matchType),\n              rx.share()\n            );\n          }\n          return a$;\n        },\n        has(_target, key) {\n          return Object.prototype.hasOwnProperty.call(actionsByType, key);\n        },\n        ownKeys() {\n          return Object.keys(actionsByType);\n        }\n      });\n\n    const payloadsByType = {} as {[K in keyof I]: rx.Observable<InferMapParam<I, K>>};\n    this.actionByType = this.at = actionByTypeProxy;\n\n    this.payloadByType = this.pt = new Proxy(\n      {} as typeof payloadsByType,\n      {\n        get(_target, key, _rec) {\n          let p$ = payloadsByType[key as keyof I];\n          if (p$ == null) {\n            const a$ = actionByTypeProxy[key as keyof I];\n            p$ = payloadsByType[key as keyof I] = a$.pipe(\n              mapActionToPayload(),\n              rx.share()\n            );\n          }\n          return p$;\n        },\n        has(_target, key) {\n          return Object.prototype.hasOwnProperty.call(actionByTypeProxy, key);\n        },\n        ownKeys() {\n          return Object.keys(actionByTypeProxy);\n        }\n      });\n    this.updateInterceptor = core.updateInterceptor;\n  }\n\n  /** change CoreOptions's \"name\" property which is displayed in actions log for developer to identify which stream the action log entry\n  * belongs to\n  */\n  setName(value: string) {\n    this.core.setName(value);\n  }\n\n  createAction<J = I, K extends keyof J = keyof J>(type: K, ...params: InferPayload<J[K]>) {\n    return this.core.createAction(type, params);\n  }\n\n  /** This method internally uses [groupBy](https://rxjs.dev/api/index/function/groupBy#groupby) */\n  groupControllerBy<K>(keySelector: (action: Action<I>) => K, groupedCtlOptionsFn?: (key: K) => CoreOptions<I>):\n  rx.Observable<[newGroup: GroupedRxController<I, K>, allGroups: Map<K, GroupedRxController<I, K>>]> {\n    return this.core.action$.pipe(\n      rx.groupBy(keySelector),\n      rx.map(grouped => {\n        const groupedRxCtl = new GroupedRxController<I, K>(grouped.key, {...(groupedCtlOptionsFn ? groupedCtlOptionsFn(grouped.key) : {}), autoConnect: false});\n\n        // connect to source actionUpstream only when it is subscribed\n        rx.concat(\n          groupedRxCtl.core.actionSubscribed$.pipe(\n            rx.tap(() => {\n              groupedRxCtl.connect();\n            }),\n            rx.take(1)\n          ),\n          // Then dispatch source action to grouped controller\n          grouped.pipe(\n            rx.tap(action => deserializeAction(action, groupedRxCtl))\n          )\n        ).pipe(\n          rx.takeUntil(groupedRxCtl.core.actionUnsubscribed$)\n        ).subscribe();\n\n        return groupedRxCtl;\n      }),\n      rx.scan<\n      GroupedRxController<I, K>,\n      [newGroup: GroupedRxController<I, K>, allGroups: Map<K, GroupedRxController<I, K>>],\n      readonly [null, Map<K, GroupedRxController<I, K>>]\n      >((acc, el) => {\n        const ret = acc as unknown as [GroupedRxController<I, K>, Map<K, GroupedRxController<I, K>>];\n        ret[0] = el;\n        ret[1].set(el.key, el);\n        return ret;\n      }, [null, new Map<K, GroupedRxController<I, K>>()] as const)\n    );\n  }\n\n  /**\n   * create a new RxController whose action$ is filtered for action types which are included in `actionTypes`\n   */\n  subForTypes<KS extends Array<keyof I> | ReadonlyArray<keyof I & string>>(actionTypes: KS, opts?: CoreOptions<Pick<I, KS[number]>>) {\n    const sub = new RxController<Pick<I, KS[number]>>(opts);\n    const typeSet = new Set(actionTypes);\n    this.core.action$.pipe(\n      rx.filter(a => typeSet.has(nameOfAction(a))),\n      rx.tap(value => {\n        sub.core.actionUpstream.next(value);\n      })\n    ).subscribe();\n    return sub;\n  }\n\n  /**\n   * create a new RxController whose action$ is filtered for action types that is included in `actionTypes`\n   */\n  subForExcludeTypes<KS extends Array<keyof I> | ReadonlyArray<keyof I>>(excludeActionTypes: KS, opts?: CoreOptions<Pick<I, KS[number]>>) {\n    const sub = new RxController<Pick<I, KS[number]>>(opts);\n    const typeSet = new Set(excludeActionTypes);\n    this.core.action$.pipe(\n      rx.filter(a => !typeSet.has(nameOfAction(a))),\n      rx.tap(value => {\n        sub.core.actionUpstream.next(value);\n      })\n    ).subscribe();\n    return sub;\n  }\n  /**\n   * Delegate to `this.core.action$.connect()`\n   * \"core.action$\" is a `connectable` observable, under the hood, it is like `action$ = connectable(actionUpstream)`.\n   *\n   * By default `connect()` will be immediately invoked in constructor function, when \"options.autoConnect\" is\n   * `undefined` or `true`, in that case you don't need to call this method manually.\n   *\n   * Refer to [connectable](https://rxjs.dev/api/index/function/connectable)\n   */\n  connect() {\n    this.core.connect();\n  }\n}\n\nexport class GroupedRxController<I, K> extends RxController<I> {\n  constructor(public key: K, opts?: CoreOptions<I>) {\n    super(opts);\n  }\n}\n\n/**\n * If we consider ActionTable a 2-dimentional data structure, this is the infer type of it.\n * Each row is latest action payload of an action type (or name),\n * each column is a element of payload content array.\n *\n * If you use ActionTable as a frontend UI state (like for a UI template), this infer type\n * defines exactly data structure of it.\n * \n */\nexport type ActionTableDataType<I, KS extends ReadonlyArray<keyof I>> = {\n  [P in KS[number]]: InferPayload<I[P]> | []\n};\n\nexport class ActionTable<I, KS extends ReadonlyArray<keyof I>> {\n  actionNames: KS;\n\n  latestPayloads = {} as {[K in KS[number]]: rx.Observable<[ActionMeta, ...InferPayload<I[K]>]>};\n  /** Abbrevation of \"latestPayloads\", pointing to exactly same instance of latestPayloads */\n  l: {[K in KS[number]]: rx.Observable<[ActionMeta, ...InferPayload<I[K]>]>};\n\n  get dataChange$(): rx.Observable<ActionTableDataType<I, KS>> {\n    if (this.#latestPayloadsByName$)\n      return this.#latestPayloadsByName$;\n\n    this.#latestPayloadsByName$ = this.actionNamesAdded$.pipe(\n      rx.switchMap(() => rx.merge(...this.actionNames.map(actionName => this.l[actionName]))),\n      rx.map(() => {\n        this.data = {} as ActionTableDataType<I, KS>;\n        for (const k of this.actionNames) {\n          const v = this.actionSnapshot.get(k);\n          const old = this.data[k];\n\n          if (old === EMPTY_ARRY || old == null)\n            this.data[k] = v ? v.slice(1) as InferPayload<I[keyof I]> : EMPTY_ARRY;\n          else {\n            if (v) {\n              old.splice(0);\n              for (let i = 1, l = v.length; i < l; i++)\n                (old as any[]).push(v[i]);\n            } else\n              this.data[k] = EMPTY_ARRY;\n          }\n        }\n        return this.data;\n      }),\n      rx.share()\n    );\n    return this.#latestPayloadsByName$;\n  }\n\n  private data: ActionTableDataType<I, KS> = {} as ActionTableDataType<I, KS>;\n\n  actionSnapshot = new Map<keyof I, InferMapParam<I, keyof I>>();\n\n  // private\n  #latestPayloadsByName$: rx.Observable<ActionTableDataType<I, KS>> | undefined;\n  // #latestPayloadsSnapshot$: rx.Observable<Map<keyof I, InferMapParam<I, keyof I>>> | undefined;\n  private actionNamesAdded$ = new rx.ReplaySubject<ReadonlyArray<keyof I>>(1);\n\n  constructor(private streamCtl: RxController<I>, actionNames: KS) {\n    this.actionNames = [] as unknown as KS;\n    this.l = this.latestPayloads;\n    this.addActions(...actionNames);\n    this.actionNamesAdded$.pipe(\n      rx.map(actionNames => {\n        this.onAddActions(actionNames);\n      })\n    ).subscribe();\n    this.dataChange$.subscribe(); // to make sure this.data will be fulfilled even when there is no any external observer\n  }\n\n  getData(): ActionTableDataType<I, KS> {\n    return this.data;\n  }\n\n  /** Add actions to be recoreded in table map,\n   * by creating `ReplaySubject(1)` for each action payload stream respectively\n   */\n  addActions<M extends Array<keyof I>>(...actionNames: M) {\n    this.actionNames = this.actionNames.concat(actionNames) as unknown as KS;\n    this.actionNamesAdded$.next(actionNames);\n    return this as unknown as ActionTable<I, Array<KS[number] | M[number]>>;\n  }\n\n  private onAddActions<M extends ReadonlyArray<keyof I>>(actionNames: M) {\n    for (const type of actionNames) {\n      if (this.data[type] == null)\n        this.data[type] = EMPTY_ARRY;\n      if (has.call(this.latestPayloads, type))\n        continue;\n\n      const a$ = new rx.ReplaySubject<InferMapParam<I, M[number]>>(1);\n      this.streamCtl.actionByType[type].pipe(\n        rx.map(a => {\n          const arr = this.actionSnapshot.get(type);\n          if (arr == null) {\n            const mapParam = [{i: a.i, r: a.r}, ...a.p] as InferMapParam<I, M[number]>;\n            this.actionSnapshot.set(type, mapParam);\n            return mapParam;\n          } else {\n            arr[0] = {i: a.i, r: a.r};\n            arr.splice(1, arr.length - 1, ...a.p); // reuse old array\n            return arr;\n          }\n        })\n      ).subscribe(a$);\n\n      this.latestPayloads[type] = this.streamCtl.opts?.debugTableAction ?\n        a$.pipe(\n          this.debugLogLatestActionOperator(type)\n        ) :\n        a$.asObservable();\n    }\n  }\n\n  getLatestActionOf<K extends KS[number]>(actionName: K): InferMapParam<I, K> | undefined {\n    return this.actionSnapshot.get(actionName) as InferMapParam<I, K> | undefined;\n  }\n\n  protected debugLogLatestActionOperator<K extends keyof I, P extends InferMapParam<I, K>>(type: K) {\n    const core = this.streamCtl.core;\n    return this.streamCtl.opts?.log ?\n      rx.map<P, P>((action, idx) => {\n        if (idx === 0 && !core.debugExcludeSet.has(type)) {\n          this.streamCtl.opts!.log!(core.logPrefix + 'rx:latest', type, actionMetaToStr(action[0]));\n        }\n        return action;\n      }) :\n      (typeof window !== 'undefined') || (typeof Worker !== 'undefined') ?\n        rx.map<P, P>((p, idx) => {\n          if (idx === 0 && !core.debugExcludeSet.has(type)) {\n            // eslint-disable-next-line no-console\n            console.log(`%c ${core.logPrefix}rx:latest `, 'color: #f0fe0fe0; background: #8c61dd;', type,\n              actionMetaToStr(p[0]));\n          }\n          return p;\n        }) :\n        rx.map<P, P>((p, idx) => {\n          if (idx > 0 && !core.debugExcludeSet.has(type)) {\n            // eslint-disable-next-line no-console\n            console.log(core.logPrefix + 'latest:', type, actionMetaToStr(p[0]));\n          }\n          return p;\n        });\n  }\n}\n\n/** Rx operator function */\nexport function actionRelatedToAction<T extends [ActionMeta, ...any[]] | Action<any>>(actionOrMeta: {i: ActionMeta['i']}) {\n  return function(up: rx.Observable<T>) {\n    let isPayload: boolean | undefined;\n    return up.pipe(\n      rx.filter(a => {\n        if (isPayload == null)\n          isPayload = Array.isArray(a);\n        const m = isPayload ? (a as [ActionMeta])[0] : a as Action<any>;\n        return (m.r != null && m.r === actionOrMeta.i) || (\n          Array.isArray(m.r) && m.r.some(r => r === actionOrMeta.i));\n      })\n    );\n  };\n}\n\nexport function throwErrorOnRelated<T extends [ActionMeta, ...any[]] | Action<any>>(\n  actionOrMeta: {i: ActionMeta['i']}\n) {\n  return function(up: rx.Observable<T>): rx.Observable<T> {\n    return up.pipe(\n      rx.map(actionOrPayload => {\n        const isPayload = Array.isArray(actionOrPayload);\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n        const m = isPayload ? actionOrPayload[0] : actionOrPayload as Action<any>;\n        if ((m.r != null && m.r === actionOrMeta.i) || (\n          Array.isArray(m.r) && m.r.some(r => r === actionOrMeta.i)\n        )) {\n          throw isPayload ? actionOrPayload[1] : actionOrPayload.p[0];\n        }\n        return actionOrPayload;\n      })\n    );\n  };\n\n}\n\n/** @deprecated use actionRelatedToAction instead */\nexport const payloadRelatedToAction = actionRelatedToAction;\n\nexport function serializeAction<I = any, K extends keyof I = any>(action: Action<I, K>) {\n  const a = {...action, t: nameOfAction(action)};\n  // if (a.r instanceof Set) {\n  //   a.r = [...a.r.values()];\n  // }\n  return a;\n}\n\n/**\n * Create a new Action with same \"p\", \"i\" and \"r\" properties and dispatched to RxController,\n * but changed \"t\" property which comfort to target \"toRxController\"\n * @return that dispatched new action object\n */\nexport function deserializeAction<I>(actionObj: any, toController: RxController<I>) {\n  const newAction = toController.core.createAction(nameOfAction(actionObj) as unknown as keyof I, (actionObj as Action<I>).p);\n  newAction.i = (actionObj as Action<any>).i;\n  if ((actionObj as Action<any>).r)\n    newAction.r = (actionObj as Action<any>).r;\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  toController.core.actionUpstream.next(newAction);\n  return newAction;\n}\n\nexport function mapActionToPayload<I, K extends keyof I>() {\n  return (up: rx.Observable<Action<I, K>>) => up.pipe(\n    rx.map(a => [{i: a.i, r: a.r}, ...a.p] as InferMapParam<I, keyof I>)\n  );\n}\n"]}