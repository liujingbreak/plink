{"version":3,"file":"control.js","sourceRoot":"","sources":["../src/control.ts"],"names":[],"mappings":"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","sourcesContent":["import * as rx from 'rxjs';\n\n// type Mutable<I> = {-readonly [K in keyof I]: I[K]};\nexport type ActionFunctions = {[k: string]: any}; // instead of A indexed access type, since a \"class type\" can not be assigned to \"Indexed access type with function type property\"\n\ntype InferPayload<F> = F extends (...a: infer P) => any ? P : unknown[];\n\nexport type ActionMeta = {\n  /** id */\n  i: number;\n  /** reference to other actions */\n  r?: number | number[];\n};\nexport type Action<I extends ActionFunctions, K extends keyof I = keyof I & string> = {\n  /** type */\n  t: string;\n  /** payload **/\n  p: InferPayload<I[K]>;\n} & ActionMeta;\n\ntype InferMapParam<I extends ActionFunctions, K extends keyof I> = [ActionMeta, ...InferPayload<I[K]>];\n\nexport type PayloadStream<I extends ActionFunctions, K extends keyof I> = rx.Observable<InferMapParam<I, K>>;\n\ntype Dispatch<F> = (...params: InferPayload<F>) => Action<any>['i'];\ntype DispatchFor<F> = (referActions: ActionMeta | ActionMeta[], ...params: InferPayload<F>) => Action<any>['i'];\ntype DispatchAndObserveRes<I extends ActionFunctions, K extends keyof I> = <O extends ActionFunctions, R extends keyof O>(\n  waitForAction$: rx.Observable<Action<O, R>>, ...params: InferPayload<I[K]>\n) => rx.Observable<InferMapParam<O, R>>;\n\nexport type CoreOptions<K extends string[]> = {\n  debug?: string | boolean;\n  debugExcludeTypes?: K;\n  logStyle?: 'full' | 'noParam';\n  log?: (msg: string, ...objs: any[]) => unknown;\n};\n\nlet SEQ = 1;\nlet ACTION_SEQ = Number((Math.random() + '').slice(2, 10)) + 1;\n\nconst has = Object.prototype.hasOwnProperty;\n\nexport class ControllerCore<I extends ActionFunctions = {[k: string]: never}> {\n  actionUpstream = new rx.Subject<Action<I, keyof I>>();\n  interceptor$ = new rx.BehaviorSubject<(up: rx.Observable<Action<I, keyof I>>) => rx.Observable<Action<I, keyof I>>>(a => a);\n  typePrefix = SEQ++ + '/';\n  debugName: string;\n  action$: rx.Observable<Action<I, keyof I>>;\n  debugExcludeSet: Set<string>;\n  protected dispatcher = {} as {[K in keyof I]: Dispatch<I[keyof I]>};\n  protected dispatcherFor = {} as {[K in keyof I]: DispatchFor<I[keyof I]>};\n\n  constructor(public opts?: CoreOptions<(string & keyof I)[]>) {\n    this.debugName = typeof opts?.debug === 'string' ? `[${this.typePrefix}${opts.debug}] ` : this.typePrefix;\n    this.debugExcludeSet = new Set(opts?.debugExcludeTypes ?? []);\n\n    const debuggableAction$ = opts?.debug\n      ? this.actionUpstream.pipe(\n        opts?.log ?\n          rx.tap(action => {\n            const type = nameOfAction(action);\n            if (!this.debugExcludeSet.has(type)) {\n              opts.log!(this.debugName + 'rx:action', type, actionMetaToStr(action), ...(opts.logStyle === 'noParam' ? [] : action.p));\n            }\n          }) :\n          (typeof window !== 'undefined') || (typeof Worker !== 'undefined') ?\n            rx.tap(action => {\n              const type = nameOfAction(action);\n              if (!this.debugExcludeSet.has(type)) {\n                // eslint-disable-next-line no-console\n                console.log(`%c ${this.debugName}rx:action `, 'color: white; background: #8c61ff;',\n                  type, actionMetaToStr(action), ...(opts.logStyle === 'noParam' ? [] : action.p));\n              }\n            }) :\n            rx.tap(action => {\n              const type = nameOfAction(action);\n              if (!this.debugExcludeSet.has(type)) {\n                // eslint-disable-next-line no-console\n                console.log( this.debugName + 'rx:action', type, actionMetaToStr(action), ...(opts.logStyle === 'noParam' ? [] : action.p));\n              }\n            }),\n        rx.share()\n      )\n      : this.actionUpstream;\n\n    this.action$ = this.interceptor$.pipe(\n      rx.switchMap(interceptor => interceptor ?\n        debuggableAction$.pipe(interceptor, rx.share()) :\n        debuggableAction$)\n    );\n  }\n\n  createAction<J extends ActionFunctions = I, K extends keyof J = keyof J>(type: K, params?: InferPayload<J[K]>) {\n    return {\n      t: this.typePrefix + (type as string),\n      i: ACTION_SEQ++,\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      p: params ?? []\n    } as Action<J, K>;\n  }\n\n  dispatchFactory<K extends keyof I>(type: K): Dispatch<I> {\n    if (has.call(this.dispatcher, type)) {\n      return this.dispatcher[type];\n    }\n    const dispatch = (...params: InferPayload<I[keyof I]>) => {\n      const action = this.createAction(type, params);\n      this.actionUpstream.next(action);\n      return action.i;\n    };\n    this.dispatcher[type] = dispatch;\n    return dispatch;\n  }\n\n  dispatchForFactory<K extends keyof I>(type: K): DispatchFor<I> {\n    if (has.call(this.dispatcherFor, type)) {\n      return this.dispatcherFor[type];\n    }\n    const dispatch = (metas: ActionMeta | ActionMeta[], ...params: InferPayload<I[keyof I]>) => {\n      const action = this.createAction(type, params);\n      action.r = Array.isArray(metas) ? metas.map(m => m.i) : metas.i;\n      this.actionUpstream.next(action);\n      return action.i;\n    };\n    this.dispatcherFor[type] = dispatch;\n    return dispatch;\n  }\n\n  replaceActionInterceptor(\n    factory: (\n      origin: (up: rx.Observable<Action<I, keyof I>>) => rx.Observable<Action<I, keyof I>>\n    ) => (up: rx.Observable<Action<I, keyof I>>) => rx.Observable<Action<I, keyof I>>\n  ) {\n    const newInterceptor = factory(this.interceptor$.getValue());\n    this.interceptor$.next(newInterceptor);\n  }\n\n  // eslint-disable-next-line space-before-function-paren\n  ofType<T extends (keyof I)[]>(...types: T) {\n    return (up: rx.Observable<Action<any, any>>) => {\n      const matchTypes = types.map(type => this.typePrefix + (type as string));\n      return up.pipe(\n        rx.filter((a): a is Action<I, T[number]> => matchTypes.some(matchType => a.t === matchType))\n      );\n    };\n  }\n\n  // eslint-disable-next-line space-before-function-paren\n  notOfType<T extends (keyof I)[]>(...types: T) {\n    return (up: rx.Observable<Action<any, any>>) => {\n      const matchTypes = types.map(type => this.typePrefix + (type as string));\n      return up.pipe(\n        rx.filter((a): a is Action<I, Exclude<(keyof I), T[number]>> => matchTypes.every(matchType => a.t !== matchType))\n      );\n    };\n  }\n}\n\nexport class RxController<I extends ActionFunctions> {\n  core: ControllerCore<I>;\n  dispatcher: {[K in keyof I]: Dispatch<I[K]>};\n  dispatcherFor: {[K in keyof I]: DispatchFor<I[K]>};\n  dp: {[K in keyof I]: Dispatch<I[K]>};\n  dpf: {[K in keyof I]: DispatchFor<I[K]>};\n  dispatchAndObserveRes: {[K in keyof I]: DispatchAndObserveRes<I, K>};\n  do: {[K in keyof I]: DispatchAndObserveRes<I, K>};\n  payloadByType: {[K in keyof I]: PayloadStream<I, K>};\n  pt: {[K in keyof I]: PayloadStream<I, K>};\n  actionByType: {[K in keyof I]: rx.Observable<Action<I, K>>};\n  at: {[K in keyof I]: rx.Observable<Action<I, K>>};\n  protected latestActionsCache = {} as {[K in keyof I]?: rx.Observable<Action<I, K>>};\n  protected latestPayloadsCache = {} as {[K in keyof I]?: PayloadStream<I, K>};\n\n  replaceActionInterceptor: ControllerCore<I>['replaceActionInterceptor'];\n\n  constructor(private opts?: CoreOptions<(string & keyof I)[]>) {\n    const core = this.core = new ControllerCore(opts);\n\n    this.dispatcher = this.dp = new Proxy({} as {[K in keyof I]: Dispatch<I[K]>}, {\n      get(_target, key, _rec) {\n        return core.dispatchFactory(key as keyof I);\n      }\n    });\n    this.dispatcherFor = this.dpf = new Proxy({} as {[K in keyof I]: DispatchFor<I[K]>}, {\n      get(_target, key, _rec) {\n        return core.dispatchForFactory(key as keyof I);\n      }\n    });\n\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self = this;\n    this.dispatchAndObserveRes = this.do = new Proxy({} as {[K in keyof I]: DispatchAndObserveRes<I, K>}, {\n      get(_target, key, _rec) {\n\n        return <R extends keyof I>(action$: rx.Observable<Action<I, R>>, ...params: any[]) => {\n          const action = self.core.createAction(key as string, params as InferPayload<I[string]>);\n          return rx.merge(\n            action$.pipe(\n              actionRelatedToAction(action.i),\n              mapActionToPayload()\n            ),\n            new rx.Observable<never>(sub => {\n              self.core.actionUpstream.next(action);\n              sub.complete();\n            })\n          );\n        };\n      }\n    });\n\n    const actionsByType = {} as {[K in keyof I]: rx.Observable<Action<I, K>>};\n    const actionByTypeProxy = new Proxy(\n      {} as typeof actionsByType,\n      {\n        get(_target, type, _rec) {\n          let a$ = actionsByType[type as keyof I];\n          if (a$ == null) {\n            const matchType = core.typePrefix + (type as string);\n            a$ = actionsByType[type as keyof I] = core.action$.pipe(\n              rx.filter(({t}) => t === matchType),\n              rx.share()\n            );\n          }\n          return a$;\n        }\n      });\n\n    const payloadsByType = {} as {[K in keyof I]: rx.Observable<InferMapParam<I, K>>};\n    this.actionByType = this.at = actionByTypeProxy;\n\n    this.payloadByType = this.pt = new Proxy(\n      {} as typeof payloadsByType,\n      {\n        get(_target, key, _rec) {\n          let p$ = payloadsByType[key as keyof I];\n          if (p$ == null) {\n            const a$ = actionByTypeProxy[key as keyof I];\n            p$ = payloadsByType[key as keyof I] = a$.pipe(\n              mapActionToPayload(),\n              rx.share()\n            );\n          }\n          return p$;\n        }\n      });\n    this.replaceActionInterceptor = core.replaceActionInterceptor;\n  }\n\n  createAction<J extends ActionFunctions = I, K extends keyof J = keyof J>(type: K, ...params: InferPayload<J[K]>) {\n    return this.core.createAction(type, params);\n  }\n\n  /**\n   * The function returns a cache which means you may repeatly invoke this method with duplicate parameter\n   * without worrying about memory consumption\n   */\n  // eslint-disable-next-line space-before-function-paren\n  createLatestActionsFor<T extends (keyof I)[]>(...types: T): Pick<{\n    [K in keyof I]: rx.Observable<Action<I, K>>}, T[number]\n  > {\n    for (const type of types) {\n      if (has.call(this.latestActionsCache, type))\n        continue;\n      const a$ = new rx.ReplaySubject<Action<I, T[number]>>(1);\n      this.actionByType[type].subscribe(a$);\n      this.latestActionsCache[type] = this.opts?.debug ?\n        a$.pipe(\n          this.debugLogLatestActionOperator(type as string)\n          // rx.share() DON'T USE share(), SINCE IT WILL TURS ReplaySubject TO A NORMAL Subject\n        ) :\n        a$.asObservable();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return this.latestActionsCache as any;\n  }\n\n  /**\n   * Conceptually, it is a \"state store\" like Apache Kafka's \"table\"\n   * From perspecitve of implementation, a map ReplaySubject which provides similiar function as rx.withLatestFrom() does\n   * @return Pick<...>\n   The reason using `Pick<{[K in keyof I]: PayloadStream<I, K>}, T[number]>` instead of `{[K in T[number]]: PayloadStream<I, K>` is that the former expression\n   makes Typescript to jump to `I` type definition source code when we perform operation like \"Go to definition\" in editor, the latter can't\n   */\n  // eslint-disable-next-line space-before-function-paren\n  createLatestPayloadsFor<T extends (keyof I)[]>(...types: T): Pick<{[K in keyof I]: PayloadStream<I, K>}, T[number]> {\n    const actions = this.createLatestActionsFor(...types);\n\n    for (const key of types) {\n      if (has.call(this.latestPayloadsCache, key))\n        continue;\n      this.latestPayloadsCache[key] = actions[key].pipe(\n        rx.map(a => [{i: a.i, r: a.r}, ...a.p])\n      );\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return this.latestPayloadsCache as any;\n  }\n\n  protected debugLogLatestActionOperator<P extends Action<I>>(type: string) {\n    return this.opts?.log ?\n      rx.map<P, P>((action, idx) => {\n        if (idx === 0 && !this.core.debugExcludeSet.has(type)) {\n          this.opts!.log!(this.core.debugName + 'rx:latest', type, action);\n        }\n        return action;\n      }) :\n      (typeof window !== 'undefined') || (typeof Worker !== 'undefined') ?\n        rx.map<P, P>((action, idx) => {\n          if (idx === 0 && !this.core.debugExcludeSet.has(type)) {\n            // eslint-disable-next-line no-console\n            console.log(`%c ${this.core.debugName}rx:latest `, 'color: #f0fe0fe0; background: #8c61dd;', type,\n              actionMetaToStr(action));\n          }\n          return action;\n        }) :\n        rx.map<P, P>((action, idx) => {\n          if (idx > 0 && !this.core.debugExcludeSet.has(type)) {\n            // eslint-disable-next-line no-console\n            console.log(this.core.debugName + 'latest:', type, actionMetaToStr(action));\n          }\n          return action;\n        });\n  }\n}\n\n/**\n * Get the \"action name\" from payload's \"type\" field,\n * `payload.type`` is actually consist of string like `${Prefix}/${actionName}`,\n * this function returns the `actionName` part\n * @return undefined if current action doesn't have a valid \"type\" field\n */\n// eslint-disable-next-line space-before-function-paren\nexport function nameOfAction<I extends ActionFunctions>(\n  action: Pick<Action<I, keyof I>, 't'>\n) {\n  const elements = action.t.split('/');\n  return (elements.length > 1 ? elements[1] : elements[0]) as keyof I & string;\n}\n\n/** Rx operator function */\nexport function actionRelatedToAction<T extends Action<any>>(id: ActionMeta['i']) {\n  return function(up: rx.Observable<T>) {\n    return up.pipe(\n      rx.filter(\n        m => (m.r != null && m.r === id) || (\n          Array.isArray(m.r) && m.r.some(r => r === id)\n        )\n      )\n    );\n  };\n}\n/** Rx operator function */\nexport function actionRelatedToPayload<T extends [ActionMeta, ...any[]]>(id: ActionMeta['i']) {\n  return function(up: rx.Observable<T>): rx.Observable<T> {\n    return up.pipe(\n      rx.filter(\n        ([m]) => (m.r != null && m.r === id) || (\n          Array.isArray(m.r) && m.r.some(r => r === id)\n        )\n      )\n    );\n  };\n}\n\nexport function serializeAction<I extends ActionFunctions = any, K extends keyof I = string>(action: Action<I, K>) {\n  const a = {...action, t: nameOfAction(action)};\n  // if (a.r instanceof Set) {\n  //   a.r = [...a.r.values()];\n  // }\n  return a;\n}\n\n/**\n * Create a new Action with same \"i\" and \"r\" properties and dispatched to RxController\n * @return that dispatched new action object\n */\nexport function deserializeAction<I extends ActionFunctions>(actionObj: any, toController: RxController<I>) {\n  const newAction = toController.core.createAction(nameOfAction(actionObj) as keyof I, (actionObj as Action<I>).p);\n  newAction.i = (actionObj as Action<any>).i;\n  if ((actionObj as Action<any>).r)\n    newAction.r = (actionObj as Action<any>).r;\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  toController.core.actionUpstream.next(newAction);\n  return newAction;\n}\n\nfunction mapActionToPayload<I extends ActionFunctions, K extends keyof I>() {\n  return (up: rx.Observable<Action<I, K>>) => up.pipe(\n    rx.map(a => [{i: a.i, r: a.r}, ...a.p] as InferMapParam<I, keyof I>)\n  );\n}\n\nfunction actionMetaToStr(action: Action<any>) {\n  const {r, i} = action;\n  return `(i: ${i}${r != null ? `, r: ${Array.isArray(r) ? [...r.values()].toString() : r}` : ''})`;\n}\n"]}