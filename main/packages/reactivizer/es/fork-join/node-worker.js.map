{"version":3,"file":"node-worker.js","sourceRoot":"","sources":["../../src/fork-join/node-worker.ts"],"names":[],"mappings":"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","sourcesContent":["import type {promises as fsPromises} from 'node:fs';\nimport type {X509Certificate} from 'node:crypto';\nimport type {Blob} from 'node:buffer';\nimport {parentPort, MessageChannel as NodeMessagechannel, threadId, isMainThread, MessagePort} from 'worker_threads';\nimport * as rx from 'rxjs';\nimport {Action, ActionFunctions, deserializeAction, serializeAction, RxController,\n  actionRelatedToAction, payloadRelatedToAction, InferPayload, InferMapParam} from '../control';\nimport {ReactorComposite, ReactorCompositeOpt} from '../epic';\nimport {Broker, ForkWorkerInput, ForkWorkerOutput} from './types';\n// import {createBroker} from './node-worker-broker';\n\nconst inputTableFor = ['exit'] as const;\nconst outputTableFor = ['workerInited', 'log', 'warn'] as const;\n\nexport function createWorkerControl<\n  I extends ActionFunctions = Record<string, never>,\n  O extends ActionFunctions = Record<string, never>,\n  LI extends ReadonlyArray<keyof I> = readonly [],\n  LO extends ReadonlyArray<keyof O> = readonly []\n>(\n  opts?: ReactorCompositeOpt<ForkWorkerInput & ForkWorkerOutput & I & O>\n) {\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  const comp = new ReactorComposite<ForkWorkerInput, ForkWorkerOutput, typeof inputTableFor, typeof outputTableFor>({\n    ...(opts ?? {}),\n    inputTableFor: [...(opts?.inputTableFor ?? []), ...inputTableFor],\n    outputTableFor: [...(opts?.outputTableFor ?? []), ...outputTableFor],\n    name: (opts?.name ?? '') + ('[Thread:' + (isMainThread ? 'main]' : threadId + ']')),\n    debug: opts?.debug,\n    log: isMainThread ? opts?.log : (...args) => parentPort?.postMessage({type: 'log', p: args}),\n    debugExcludeTypes: ['log', 'warn'],\n    logStyle: 'noParam'\n  });\n  let broker: Broker | undefined;\n\n  const {r, i, o} = comp;\n  const lo = comp.outputTable.l;\n\n  r('worker$ -> workerInited', new rx.Observable(() => {\n    const handler = (event: {type?: string; workerNo: number}) => {\n      const msg = event;\n      if (msg.type === 'ASSIGN_WORKER_NO') {\n        parentPort!.postMessage({type: 'WORKER_READY'});\n        const workerNo = msg.workerNo;\n        const logPrefix = (opts?.name ?? '') + '[Worker:' + workerNo + ']';\n        o.dp.workerInited(workerNo, logPrefix);\n        comp.setName(logPrefix);\n      } else {\n        const act = event as unknown as Action<any>;\n        deserializeAction(act, i);\n      }\n    };\n    if (parentPort) {\n      /* eslint-disable no-restricted-globals */\n      parentPort.on('message', handler);\n    } else {\n      o.dp.workerInited('main', '[main]');\n    }\n    return () => parentPort?.off('message', handler);\n  }));\n\n\n  if (parentPort) {\n    r('exit', comp.inputTable.l.exit.pipe(\n      rx.switchMap(() => lo.workerInited),\n      rx.take(1),\n      rx.map(() => {\n        comp.destory();\n      })\n    ));\n\n    r('postMessage wait, stopWaiting, returned message to broker', lo.workerInited.pipe(\n      rx.take(1),\n      rx.switchMap(() => rx.merge(\n        o.at.wait,\n        o.at.stopWaiting,\n        o.at.returned\n      )),\n      rx.map(action => {\n        parentPort?.postMessage(serializeAction(action));\n      })\n    ));\n\n    r('postMessage log to broker (parent thread)', lo.workerInited.pipe(\n      rx.take(1),\n      rx.switchMap(([, , logPrefix]) => lo.log.pipe(\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        rx.map(([, ...p]) => parentPort?.postMessage({type: 'log', p: [logPrefix, ...p]}))\n      ))\n    ));\n  } else {\n    // main thread\n    r('log, warn > console.log', lo.workerInited.pipe(\n      rx.take(1),\n      rx.switchMap(([, , logPrefix]) => rx.merge(lo.log, lo.warn).pipe(\n        // eslint-disable-next-line no-console\n        rx.map(([, ...p]) => (opts?.log ?? console.log)(logPrefix, ...p))\n      ))\n    ));\n  }\n\n  r('On output \"fork\" request message', o.at.fork.pipe(\n    rx.mergeMap(act => {\n      const {p: [wrappedAct]} = act;\n      const chan = new NodeMessagechannel();\n      const error$ = rx.fromEventPattern(\n        h => chan.port1.on('messageerror', h),\n        h => chan.port1.off('messageerror', h)\n      );\n      const close$ = rx.fromEventPattern(\n        h => chan.port1.on('close', h),\n        h => chan.port1.off('close', h)\n      );\n      return rx.merge(\n        rx.fromEventPattern(\n          h => chan.port1.on('message', h),\n          h => {\n            chan.port1.off('message', h);\n            chan.port1.close();\n          }\n        ).pipe(\n          rx.map(event => deserializeAction(event, i)),\n          rx.take(1),\n          rx.takeUntil(rx.merge(error$, close$))\n        ),\n        new rx.Observable<void>(_sub => {\n          if (parentPort) {\n            const forkByBroker = o.createAction('forkByBroker', wrappedAct, chan.port2);\n            parentPort.postMessage(serializeAction(forkByBroker), [chan.port2]);\n          } else {\n            o.dp.forkByBroker(wrappedAct, chan.port2);\n          }\n        })\n      );\n    })\n  ));\n\n  r('onFork -> wait for fork action returns, postMessage to forking parent thread', i.pt.onFork.pipe(\n    rx.mergeMap(([, origAct, port]) => {\n      deserializeAction(origAct, i);\n      return o.core.action$.pipe(\n        actionRelatedToAction(origAct),\n        rx.take(1),\n        rx.map(action => {\n          const {p} = action;\n          if (hasReturnTransferable(p)) {\n            const [{transferList}] = p;\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            (p[0] as any).transferList = null;\n            port.postMessage(serializeAction(action), transferList);\n          } else {\n            port.postMessage(serializeAction(action));\n          }\n          o.dp.returned();\n        })\n      );\n    })\n  ));\n\n  r('Pass error to broker', comp.error$.pipe(\n    rx.map(([label, err]) => {\n      if (parentPort) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        parentPort.postMessage({error: {label, detail: err}});\n      } else if (broker) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        broker.o.dp.onWorkerError(-1, {label, detail: err}, 'customized error');\n      }\n    })\n  ));\n\n  return comp as unknown as ReactorComposite<ForkWorkerInput & I, ForkWorkerOutput & O,\n  ReadonlyArray<typeof inputTableFor[number] | LI[number]>, ReadonlyArray<typeof outputTableFor[number] | LO[number]>>;\n}\n\nexport function fork<I extends ActionFunctions, O extends ForkWorkerOutput, K extends string & keyof I, R extends string & keyof I = `${K}Resolved`>(\n  comp: ReactorComposite<I, O, any, any>,\n  actionName: K & string,\n  params: InferPayload<I[K]>,\n  responseAction$?: rx.Observable<InferMapParam<I, R>>\n): Promise<[...InferPayload<I[R]>]> {\n  const forkedAction = comp.o.createAction(actionName, ...params);\n  const forkDone = rx.firstValueFrom((responseAction$ ?? comp.i.pt[actionName + 'Resolved']).pipe(\n    payloadRelatedToAction(forkedAction),\n    rx.map(([, ...p]) => p)\n  ));\n  (comp.o as unknown as RxController<ForkWorkerOutput>).dp.fork(forkedAction);\n  return forkDone;\n}\n\nexport type ForkTransferablePayload<T = unknown> = {\n  content: T;\n  transferList: (ArrayBuffer | MessagePort | fsPromises.FileHandle | X509Certificate | Blob)[];\n};\n\nfunction hasReturnTransferable(payload: Action<any>['p']): payload is [ForkTransferablePayload, ...unknown[]] {\n  return Array.isArray((payload[0] as ForkTransferablePayload | undefined)?.transferList);\n}\n"]}