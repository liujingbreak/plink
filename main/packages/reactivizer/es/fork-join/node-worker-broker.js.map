{"version":3,"file":"node-worker-broker.js","sourceRoot":"","sources":["../../src/fork-join/node-worker-broker.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/indent */\nimport {Worker, MessagePort, MessageChannel} from 'worker_threads';\nimport * as rx from 'rxjs';\nimport {ReactorComposite, ReactorCompositeOpt} from '../epic';\n// import {timeoutLog} from '../utils';\nimport {Action, ActionFunctions, serializeAction, deserializeAction, RxController} from '../control';\nimport {Broker, BrokerInput, BrokerEvent, brokerOutputTableFor as outputTableFor, ForkWorkerInput, ForkWorkerOutput, WorkerControl} from './types';\nimport {applyScheduler} from './worker-scheduler';\nexport * from './types';\n\n/** Broker manages worker threads, create message channels between child worker threads and main thread, transmits actions\n*/\nexport function createBroker<\n  I extends ActionFunctions = Record<string, never>,\n  O extends ActionFunctions = Record<string, never>,\n  LI extends ReadonlyArray<keyof I> = readonly [],\n  LO extends ReadonlyArray<keyof O> = readonly []\n>(\n  workerController: ReactorComposite<ForkWorkerInput & I, ForkWorkerOutput & O, LI, LO>,\n  opts?: ReactorCompositeOpt<BrokerInput & O & BrokerEvent<ReactorComposite<ForkWorkerInput & I, ForkWorkerOutput & O, any, any>> & ForkWorkerOutput>\n) {\n  const options = opts ? {...opts, outputTableFor} : {outputTableFor};\n  const mainWorkerComp = workerController as unknown as ReactorComposite<ForkWorkerInput, ForkWorkerOutput>;\n\n  const broker = new ReactorComposite<\n    BrokerInput & ForkWorkerOutput,\n    BrokerEvent<WorkerControl<I, O, LI, LO>>,\n    [],\n    typeof outputTableFor\n  >(options as any);\n\n  const workerInitState = new Map<number, 'DONE' | 'WIP'>();\n\n  const {r, i, o, outputTable} = broker;\n  const workerOutputs = new Map<number, RxController<ForkWorkerOutput & O>>();\n\n  o.dp.portOfWorker(new Map());\n  r('workerInited -> newWorkerReady', o.pt.workerInited.pipe(\n    rx.filter(([, , , , skipped]) => !skipped),\n    rx.switchMap(a => outputTable.l.workerInputs.pipe(\n      rx.map(([, map]) => map.get(a[1])),\n      rx.filter(b => b != null),\n      rx.take(1),\n      rx.map(b => [a, b] as const)\n    )),\n    rx.tap(([[meta, workerNo, , outputCtrl], inputRx]) => o.dpf.newWorkerReady(meta, workerNo, outputCtrl, inputRx!))\n  ));\n\n  r('ensureInitWorker, message channel -> workerInited, onWorkerExit, onWorkerError', i.pt.ensureInitWorker.pipe(\n    rx.withLatestFrom(outputTable.l.portOfWorker, outputTable.l.workerInputs),\n    rx.mergeMap(([[meta, workerNo, worker], [, portOfWorker], [, wiByWorkerNo]]) => {\n      if (workerInitState.get(workerNo) === 'DONE') {\n        o.dpf.workerInited(meta, workerNo, null, workerOutputs.get(workerNo)!, true);\n        return rx.EMPTY;\n      } else if (workerInitState.get(workerNo) === 'WIP') {\n        return o.pt.workerInited.pipe(\n          rx.filter(() => workerInitState.get(workerNo) === 'DONE'),\n          rx.take(1),\n          rx.tap(() => o.dpf.workerInited(meta, workerNo, null, workerOutputs.get(workerNo)!, true))\n        );\n      }\n\n      workerInitState.set(workerNo, 'WIP');\n      const chan = new MessageChannel();\n      portOfWorker.set(worker, chan.port1);\n      o.dp.portOfWorker(portOfWorker);\n      const wo = new RxController<ForkWorkerOutput & O>({name: '#' + workerNo + ' worker output', debug: opts?.debug, log: opts?.log});\n      workerOutputs.set(workerNo, wo);\n      const wi = new RxController<ForkWorkerInput & I>({name: '#' + workerNo + ' worker input', debug: opts?.debug, log: opts?.log});\n      wiByWorkerNo.set(workerNo, wi);\n      o.dp.workerInputs(wiByWorkerNo);\n\n      chan.port1.on('message', (event: Action<any> | {type: string}) => {\n        if ((event as {type: string}).type === 'WORKER_READY') {\n          workerInitState.set(workerNo, 'DONE');\n          o.dpf.workerInited(meta, workerNo, null, wo, false);\n        } else if ((event as {type: string}).type === 'log') {\n          // eslint-disable-next-line no-console\n          (opts?.log ?? console.log)(...(event as unknown as {p: [any, ...any[]]}).p);\n        } else if ((event as {error?: any}).error) {\n          o.dp.onWorkerError(\n            workerNo,\n            (event as {error?: any}).error,\n            'customized error'\n          );\n        } else {\n          const data = event as MessageEvent<Action<any, keyof any>>;\n          deserializeAction(data, wo);\n        }\n      });\n\n      (worker as Worker).on('error', event => {\n        o.dp.onWorkerError(workerNo, event, 'Node.js error');\n      });\n\n      chan.port1.on('messageerror', event => {\n        o.dp.onWorkerError(workerNo, event, 'message errror');\n      });\n\n      (worker as Worker).on('exit', code => {\n        o.dp.onWorkerExit(workerNo, code);\n      });\n\n      (worker as Worker).postMessage({type: 'ASSIGN_WORKER_NO', workerNo, mainPort: chan.port2}, [chan.port2]);\n      return wi.core.action$.pipe(\n        rx.tap(action => chan.port1.postMessage(serializeAction(action)))\n      );\n    })\n    // rx.takeUntil(o.pt.onWorkerExit.pipe(rx.filter(([id]) => id === )))\n  ));\n\n  r('(newWorkerReady) forkByBroker, workerInited -> ensureInitWorker, worker chan postMessage()', outputTable.l.newWorkerReady.pipe(\n    rx.mergeMap(([, , workerOutput]) => (workerOutput as unknown as RxController<ForkWorkerOutput>).pt.forkByBroker),\n    rx.switchMap(a => outputTable.l.portOfWorker.pipe(rx.take(1), rx.map(b => [a, b] as const))),\n    rx.mergeMap(async ([[, targetAction, port], [, portOfWorker]]) => {\n      const [, assignedWorkerNo, worker] = await rx.firstValueFrom(o.do.assignWorker(i.at.workerAssigned\n        // timeoutLog<typeof i.at.workerAssigned extends rx.Observable<infer T> ? T : never>(3000, () => console.log('worker assignment timeout'))\n      ));\n      const fa = mainWorkerComp.i.createAction('onFork', targetAction, port);\n\n      if (worker === 'main') {\n        deserializeAction(fa, mainWorkerComp.i);\n      } else {\n        await rx.firstValueFrom(i.do.ensureInitWorker(o.at.workerInited, assignedWorkerNo, worker));\n        portOfWorker.get(worker)!.postMessage(serializeAction(fa), [port as MessagePort]);\n      }\n    })\n  ));\n\n  r('letWorkerExit -> postMessage to thread worker', i.pt.letWorkerExit.pipe(\n    rx.switchMap(a => outputTable.l.portOfWorker.pipe(rx.take(1), rx.map(b => [a, b] as const))),\n    rx.map(([[, worker], [, portOfWorker]]) => {\n      // eslint-disable-next-line @typescript-eslint/ban-types\n      (portOfWorker.get(worker) as MessagePort).postMessage(serializeAction(\n        (o as unknown as RxController<ForkWorkerInput>).core.createAction('exit')\n      ));\n    })\n  ));\n\n\n  const workerInputMap = new Map<number, RxController<ForkWorkerInput & I>>();\n  workerInputMap.set(0, workerController.i);\n  o.dp.workerInputs(workerInputMap);\n  o.dp.newWorkerReady(0, workerController.o, workerController.i);\n  return broker as unknown as Broker<WorkerControl<I, O, LI, LO>>;\n}\n\ntype ScheduleOptions = typeof applyScheduler extends (c: any, o: infer O) => any ? O : unknown;\n\nexport function setupForMainWorker<\n  I extends ActionFunctions = Record<string, never>,\n  O extends ActionFunctions = Record<string, never>,\n  LI extends ReadonlyArray<keyof I> = readonly [],\n  LO extends ReadonlyArray<keyof O> = readonly []\n>(workerContoller: WorkerControl<I, O, LI, LO>,\n  opts: ScheduleOptions & ReactorCompositeOpt<BrokerInput & O &\n    BrokerEvent<ReactorComposite<ForkWorkerInput & I, ForkWorkerOutput & O, any, any>> &\n    ForkWorkerInput & ForkWorkerOutput>\n ): Broker<WorkerControl<I, O, LI, LO>> {\n\n  const broker = createBroker(workerContoller, opts);\n  applyScheduler(broker, opts);\n  return broker;\n}\n"]}