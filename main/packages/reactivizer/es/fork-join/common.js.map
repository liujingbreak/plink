{"version":3,"file":"common.js","sourceRoot":"","sources":["../../src/fork-join/common.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,MAAM,MAAM,CAAC;AAC3B,OAAO,EACL,qBAAqB,EAAe,MAAM,YAAY,CAAC;AAIzD;;GAEG;AACH,MAAM,UAAU,IAAI,CAClB,IAAwC,EACxC,UAAsB,EACtB,MAA0B,EAC1B,kBAAsB,EACtB,eAA4B;IAE5B,MAAM,YAAY,GAAG,IAAI,CAAC,CAAC,CAAC,YAAY,CAAC,UAAU,EAAE,GAAG,MAAM,CAAC,CAAC;IAChE,IAAI,eAAe;QACjB,YAAY,CAAC,CAAC,GAAG,eAAe,CAAC,CAAC,CAAC;IAErC,MAAM,QAAQ,GAAG,EAAE,CAAC,cAAc,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,UAAU,GAAG,UAAU,CAAC,CAAC,CAAC,IAAI,CAC/H,qBAAqB,CAAC,YAAY,CAAC,EACnC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CACjB,CAAC,CAAC;IACH,IAAI,eAAe;QAChB,IAAI,CAAC,CAA+C,CAAC,GAAG,CAAC,IAAI,CAAC,eAAe,EAAE,YAAY,CAAC,CAAC;;QAE7F,IAAI,CAAC,CAA+C,CAAC,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAC9E,OAAO,QAAQ,CAAC;AAClB,CAAC","sourcesContent":["import * as rx from 'rxjs';\nimport {ActionMeta, ActionFunctions, RxController,\n  actionRelatedToAction, InferPayload} from '../control';\nimport {ReactorComposite} from '../epic';\nimport {ForkWorkerOutput} from './types';\n\n/**\n * @param returnedActionName the name of action that is observed as \"returned\" message from forked worker, default is `${actionName}Resolved`\n */\nexport function fork<I extends ActionFunctions, K extends string & keyof I, R extends string & keyof I = `${K}Resolved`>(\n  comp: ReactorComposite<I, any, any, any>,\n  actionName: K & string,\n  params: InferPayload<I[K]>,\n  returnedActionName?: R,\n  relatedToAction?: ActionMeta\n): Promise<[...InferPayload<I[R]>]> {\n  const forkedAction = comp.o.createAction(actionName, ...params);\n  if (relatedToAction)\n    forkedAction.r = relatedToAction.i;\n\n  const forkDone = rx.firstValueFrom((returnedActionName ? comp.i.at[returnedActionName] : comp.i.at[actionName + 'Resolved']).pipe(\n    actionRelatedToAction(forkedAction),\n    rx.map(a => a.p)\n  ));\n  if (relatedToAction)\n    (comp.o as unknown as RxController<ForkWorkerOutput>).dpf.fork(relatedToAction, forkedAction);\n  else\n    (comp.o as unknown as RxController<ForkWorkerOutput>).dp.fork(forkedAction);\n  return forkDone;\n}\n\n"]}