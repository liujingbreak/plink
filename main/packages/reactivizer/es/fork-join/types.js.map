{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/fork-join/types.ts"],"names":[],"mappings":"AAIA,MAAM,CAAC,MAAM,oBAAoB,GAAG,CAAC,gBAAgB,EAAE,cAAc,EAAE,cAAc,CAAU,CAAC","sourcesContent":["import type {Worker as NodeWorker, MessagePort as NodeMessagePort} from 'worker_threads';\nimport {ReactorComposite} from '../epic';\nimport {Action, ActionFunctions, RxController} from '../control';\n\nexport const brokerOutputTableFor = ['newWorkerReady', 'assignWorker', 'portOfWorker'] as const;\nexport type Broker<WA extends ActionFunctions = Record<string, never>> = ReactorComposite<BrokerInput, BrokerEvent & WA, [], typeof brokerOutputTableFor>;\n\nexport type ForkWorkerInput = {\n  exit(): void;\n  onFork(targetAction: Action<any>, port: NodeMessagePort | MessagePort): void;\n};\n\nexport type ForkWorkerOutput = {\n  workerInited(workerNo: string | number, logPrefix: string, mainWorkerPort: MessagePort | NodeMessagePort | null): void;\n  // inited(workerNo: number): void;\n  fork(targetAction: Action<any>): void;\n  /** Informs broker that current step is waiting on forked function returns*/\n  wait(): void;\n  /** Informs broker that current function step is be awake and continue on other instructions */\n  stopWaiting(): void;\n  returned(): void;\n  log(...obj: any[]): void;\n  warn(...obj: any[]): void;\n\n  /** broker implementation should react to this event*/\n  forkByBroker(targetAction: Action<any>, messagePort: NodeMessagePort | MessagePort): void;\n};\n\nexport type BrokerInput = {\n  ensureInitWorker(workerNo: number, worker: Worker | NodeWorker): void;\n  /** Send message to worker to stop all event listerners on it */\n  letWorkerExit(worker: Worker | NodeWorker): void;\n  /** Since Web worker doesn't have \"close\" event, there is no way currently this ca\n   * work in web browser\n   */\n  letAllWorkerExit(): void;\n  workerAssigned(worketNo: number, worker: Worker | NodeWorker | 'main'): void;\n};\n\nexport type BrokerEvent = {\n  workerInited(workerNo: number, newPort: MessagePort | NodeMessagePort | null, action$FromWorker: RxController<ForkWorkerOutput>, skipped: boolean): void;\n  newWorkerReady(workerNo: number, action$FromWorker: RxController<ForkWorkerOutput>): void;\n  onWorkerError(workerNo: number, error: unknown, type?: string): void;\n  onWorkerExit(workerNo: number, exitCode: number): void;\n  onAllWorkerExit(): void;\n  assignWorker(): void;\n  portOfWorker(map: Map<Worker | NodeWorker, MessagePort | NodeMessagePort>): void;\n};\n"]}