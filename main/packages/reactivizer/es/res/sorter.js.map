{"version":3,"file":"sorter.js","sourceRoot":"","sources":["../../src/res/sorter.ts"],"names":[],"mappings":"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","sourcesContent":["import binarySearch from 'lodash/sortedIndex';\nimport {createWorkerControl, ForkTransferablePayload, fork} from '../fork-join/node-worker';\nimport type {ReactorCompositeOpt} from '../epic';\nimport {ForkWorkerInput, ForkWorkerOutput} from '../fork-join/types';\nimport {ForkSortComparator, DefaultComparator, WritableArray} from './sort-comparator-interf';\n\nexport function createSorter<D extends WritableArray>(comparator?: ForkSortComparator<D> | null, opts?: ReactorCompositeOpt<ForkWorkerInput & ForkWorkerOutput>) {\n  const cmp = comparator ?? new DefaultComparator();\n\n  const sortActions = {\n    async sortAllInWorker(buf: SharedArrayBuffer, offset: number, len: number, noForkThreshold: number) {\n      const forkDone = fork(sorter, 'sort', [buf, offset, len, noForkThreshold]);\n      return forkDone;\n    },\n    /**\n     * @param noForkThreshold if `len` is larger than this number, `sort` function should fork half of array to recursive call, otherwise it just go with Array.sort() directly in current worker/thread\n     */\n    async sort(buf: SharedArrayBuffer, offset: number, len: number, noForkThreshold = 50): Promise<[number, number]> {\n      const arr = cmp.createTypedArray(buf, offset, len);\n      if (arr.length > noForkThreshold) {\n        const leftPartLen = arr.length >> 1;\n\n        const rightPartOffset = offset + leftPartLen;\n        const rightpartLen = arr.length - leftPartLen;\n\n        // o.dp.log('create fork sort action for half', rightPartOffset, rightpartLen, `action id: ${sortAction.i}`);\n        const forkDone = fork(sorter, 'sort', [buf, rightPartOffset, rightpartLen, noForkThreshold]);\n\n        // o.dp.log('sort another half in current worker', leftPartOffset, leftPartLen);\n        await sortActions.sort(buf, offset, leftPartLen, noForkThreshold);\n        o.dp.wait();\n        await forkDone;\n        o.dp.stopWaiting();\n        const mergeRes = await sortActions.merge(buf, offset, leftPartLen, rightPartOffset, rightpartLen, noForkThreshold, buf, offset);\n        const mergedBuf = mergeRes?.content;\n        if (mergedBuf != null) {\n          const mergedArr = cmp.createTypedArray(mergedBuf);\n          let i = 0;\n          for (const v of mergedArr) {\n            arr[i++] = v;\n          }\n        }\n        // o.dp.log('return merge-sort', offset, len, [...arr]);\n      } else {\n        arr.sort(cmp.compare);\n        // o.dp.log('return directly sort', offset, len, [...arr]);\n      }\n      return [offset, len];\n    },\n\n    async merge(buf: SharedArrayBuffer, offset1: number, len1: number, offset2: number, len2: number, noForkThreshold = 50, targetBuffer?: SharedArrayBuffer, targetOffset?: number):\n    Promise<null | ForkTransferablePayload<ArrayBuffer | null>> {\n      const destBuf = cmp.createArrayBufferOfSize(len1 + len2);\n      if (len1 < len2) {\n        // Ensure 1st array is longer than 2nd array, because we split 1st array into evenly half to be forked merge, 1st array's length determines how much\n        // the divide level is, not the 2nd array. In extreme case, the \"divide fork\" will be meaningless if the 1st array is empty.\n        const tempOffset = offset1;\n        offset1 = offset2;\n        offset2 = tempOffset;\n\n        const tempLen = len1;\n        len1 = len2;\n        len2 = tempLen;\n      }\n\n      if (len1 === 0) { // both empty, since len2 is always less than len1\n        return null;\n      }\n\n      if (len1 + len2 > noForkThreshold ) {\n        const arr1 = cmp.createTypedArray(buf, offset1, len1);\n        const arr1LeftOffset = offset1;\n        const arr1LeftLen = (len1 >> 1);\n        const arr1RightOffset = arr1LeftOffset + arr1LeftLen;\n        const arr1RightLen = len1 - arr1LeftLen;\n\n        const arr2 = cmp.createTypedArray(buf, offset2, len2);\n        const arr2LeftOffset = offset2;\n        const arr2LeftLen = binarySearch(arr2, arr1[arr1LeftLen - 1]);\n        const arr2RightOffset = arr2LeftOffset + arr2LeftLen;\n        const arr2RightLen = len2 - arr2LeftLen;\n\n        // o.dp.log('merge with fork', offset1, len1, [...arr1], offset2, len2, [...arr2], ', binarySerach pivot value:', arr1[arr1LeftLen - 1], '\\n',\n        //   '1st: left', [...arr1.slice(0, arr1LeftLen)], 'right', [...arr1.slice(arr1LeftLen, arr1LeftLen + arr1RightLen)], '\\n',\n        //   '2nd: left', [...arr2.slice(0, arr2LeftLen)], 'right', [...arr2.slice(arr2LeftLen, arr2LeftLen + arr2RightLen)]);\n\n        const forkDone = fork(sorter, 'merge', [buf, arr1RightOffset, arr1RightLen, arr2RightOffset, arr2RightLen, noForkThreshold]);\n        const leftMerged = (await sortActions.merge(buf, arr1LeftOffset, arr1LeftLen, arr2LeftOffset, arr2LeftLen, noForkThreshold))?.content;\n        o.dp.wait();\n        const rightMerged = (await forkDone)?.content;\n        o.dp.stopWaiting();\n\n        const destArr = targetBuffer ? cmp.createTypedArray(targetBuffer, targetOffset, len1 + len2) : cmp.createTypedArray(destBuf);\n        let i = 0;\n        if (leftMerged) {\n          for (const v of cmp.createTypedArray(leftMerged)) {\n            destArr[i++] = v;\n          }\n        }\n        if (rightMerged) {\n          for (const v of cmp.createTypedArray(rightMerged)) {\n            destArr[i++] = v;\n          }\n        }\n      } else {\n        const destArr = cmp.createTypedArray(destBuf);\n        const arr1 = cmp.createTypedArray(buf, offset1, len1);\n        const arr2 = cmp.createTypedArray(buf, offset2, len2);\n        // o.dp.log('merge directly', offset1, len1, arr1, offset2, len2, arr2);\n        let pos1 = 0, pos2 = 0;\n        for (let i = 0, l = len1 + len2; i < l; i++) {\n          if (pos2 >= arr2.length || arr1[pos1] <= arr2[pos2]) {\n            destArr[i] = arr1[pos1++];\n          } else {\n            destArr[i] = arr2[pos2++];\n          }\n        }\n        if (targetBuffer) {\n          const target = cmp.createTypedArray(targetBuffer, targetOffset, len1 + len2);\n          let i = 0;\n          for (const v of destArr)\n            target[i++] = v;\n        }\n      }\n      // o.dp.log('merge returns', offset1, len1, offset2, len2, destArr);\n      if (targetBuffer)\n        return null;\n      else\n        return {content: destBuf, transferList: [destBuf]};\n    }\n  };\n\n  const sorter = createWorkerControl(opts).reativizeRecursiveFuncs(sortActions);\n  const {o} = sorter;\n  return sorter;\n}\n\n"]}