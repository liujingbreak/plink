{"version":3,"file":"sort-comparator-interf.js","sourceRoot":"","sources":["../../src/res/sort-comparator-interf.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,gBAAgB,EAAC,MAAM,SAAS,CAAC;AAgCzC,MAAM,OAAO,iBAAiB;IAK5B;QAFU,kBAAa,GAAG,IAAI,gBAAgB,EAAqD,CAAC;QAGlG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;QAClC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;QACnC,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC;IAChC,CAAC;IAED,OAAO,CAAC,CAAS,EAAE,CAAS;QAC1B,OAAO,CAAC,GAAG,CAAC,CAAC;IACf,CAAC;IAED,gBAAgB,CAAC,GAAoC,EAAE,MAAe,EAAE,GAAY;QAClF,OAAO,MAAM,IAAI,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC;YACpC,IAAI,WAAW,CAAC,GAAG,EAAE,MAAM,GAAG,WAAW,CAAC,iBAAiB,EAAE,GAAG,CAAC,CAAC,CAAC;YACnE,IAAI,WAAW,CAAC,GAAG,CAAC,CAAC;IACzB,CAAC;IAED,uBAAuB,CAAC,GAAW;QACjC,OAAO,IAAI,WAAW,CAAC,GAAG,GAAG,WAAW,CAAC,iBAAiB,CAAC,CAAC;IAC9D,CAAC;CACF;AAED,4DAA4D","sourcesContent":["import {RxController} from '../control';\r\nimport {ReactorComposite} from '../epic';\r\n\r\ninterface ForkSortComparatorInput {\r\n  /** Tells whether current context is the main worker thread or a forked worker.\r\n  * In case current thread is main, it's comparator's obligation to dispatch `setDataForWorkers` action\r\n  * with proper shared data\r\n  */\r\n  setIsMain(yes: boolean): void;\r\n\r\n  /** If current is in a forked worker, will recieve shared \"workerData\" */\r\n  onWorkerData<T>(key: string, data: T): void;\r\n}\r\n\r\ninterface ForkSortComparatorOutput {\r\n  setDataForWorkers(key: string, data: SharedArrayBuffer): void;\r\n}\r\n\r\nexport type WritableArray = {\r\n  [index: number]: number;\r\n  length: number;\r\n  sort(cmpFn?: (a: number, b: number) => number): WritableArray;\r\n} & Iterable<number>;\r\n\r\nexport interface ForkSortComparator<D extends WritableArray> {\r\n  compare(a: D[number], b: D[number]): number;\r\n  createTypedArray(buf: SharedArrayBuffer | ArrayBuffer, offset?: number, len?: number): D;\r\n  createArrayBufferOfSize(numOfElement: number): ArrayBuffer;\r\n\r\n  input: RxController<ForkSortComparatorInput>;\r\n  output: RxController<ForkSortComparatorOutput>;\r\n}\r\n\r\nexport class DefaultComparator implements ForkSortComparator<Uint32Array> {\r\n  input: RxController<ForkSortComparatorInput>;\r\n  output: RxController<ForkSortComparatorOutput>;\r\n  protected compositeCtrl = new ReactorComposite<ForkSortComparatorInput, ForkSortComparatorOutput>();\r\n\r\n  constructor() {\r\n    this.input = this.compositeCtrl.i;\r\n    this.output = this.compositeCtrl.o;\r\n    this.compositeCtrl.startAll();\r\n  }\r\n\r\n  compare(a: number, b: number): number {\r\n    return a - b;\r\n  }\r\n\r\n  createTypedArray(buf: SharedArrayBuffer | ArrayBuffer, offset?: number, len?: number): Uint32Array {\r\n    return offset != null && len != null ?\r\n      new Uint32Array(buf, offset * Uint32Array.BYTES_PER_ELEMENT, len) :\r\n      new Uint32Array(buf);\r\n  }\r\n\r\n  createArrayBufferOfSize(num: number) {\r\n    return new ArrayBuffer(num * Uint32Array.BYTES_PER_ELEMENT);\r\n  }\r\n}\r\n\r\n// export const defaultComparator = new DefaultComparator();\r\n"]}