{"version":3,"file":"structure-array.js","sourceRoot":"","sources":["../src/structure-array.ts"],"names":[],"mappings":"AAuBA,MAAM,OAAO,cAAc;IAKzB,YAAsB,UAAkE,EAC/E,mBAA+D;QADlD,eAAU,GAAV,UAAU,CAAwD;QAC/E,wBAAmB,GAAnB,mBAAmB,CAA4C;QALhE,kBAAa,GAAG,IAAI,GAAG,EAA0B,CAAC;QAClD,eAAU,GAAG,IAAI,GAAG,EAAqB,CAAC;QAC1C,gBAAW,GAAG,IAAI,GAAG,EAAuD,CAAC;QAKnF,KAAK,MAAM,CAAC,KAAK,EAAE,GAAG,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;YACrD,IAAI,IAAgC,CAAC;YACrC,QAAQ,GAAG,CAAC,IAAI,EAAE;gBAChB,KAAK,KAAK,CAAC;gBACX,KAAK,WAAW,CAAC;gBACjB,KAAK,UAAU,CAAC;gBAChB,KAAK,YAAY;oBACf,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;oBAC7D,IAAI,IAAI,IAAI,IAAI,EAAE;wBAChB,IAAI,GAAG;4BACL,UAAU,EAAE,CAAC;yBACI,CAAC;wBACpB,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,WAAW,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC;qBAC7D;oBACD,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,EAAE,EAAC,MAAM,EAAE,IAAI,CAAC,UAAU,EAAE,SAAS,EAAE,WAAW,CAAC,iBAAiB,EAAc,CAAC,CAAC;oBAC7G,IAAI,CAAC,UAAU,IAAI,GAAG,CAAC,GAAG,CAAC;oBAC3B,MAAM;gBACR,KAAK,UAAU,CAAC;gBAChB,KAAK,SAAS;oBACZ,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,UAAU,CAAC,iBAAiB,CAAC,CAAC;oBAC5D,IAAI,IAAI,IAAI,IAAI,EAAE;wBAChB,IAAI,GAAG;4BACL,UAAU,EAAE,CAAC;yBACI,CAAC;wBACpB,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,UAAU,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC;qBAC5D;oBACD,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,EAAE,EAAC,MAAM,EAAE,IAAI,CAAC,UAAU,EAAE,SAAS,EAAE,UAAU,CAAC,iBAAiB,EAAc,CAAC,CAAC;oBAC5G,IAAI,CAAC,UAAU,IAAI,GAAG,CAAC,GAAG,CAAC;oBAC3B,MAAM;gBACR,KAAK,WAAW,CAAC;gBACjB,KAAK,UAAU;oBACb,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;oBAC7D,IAAI,IAAI,IAAI,IAAI,EAAE;wBAChB,IAAI,GAAG;4BACL,UAAU,EAAE,CAAC;yBACI,CAAC;wBACpB,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,WAAW,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC;qBAC7D;oBACD,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,EAAE,EAAC,MAAM,EAAE,IAAI,CAAC,UAAU,EAAE,SAAS,EAAE,WAAW,CAAC,iBAAiB,EAAc,CAAC,CAAC;oBAC7G,IAAI,CAAC,UAAU,IAAI,GAAG,CAAC,GAAG,CAAC;oBAC3B,MAAM;gBACR,KAAK,YAAY,CAAC;gBAClB,KAAK,aAAa,CAAC;gBACnB,KAAK,cAAc;oBACjB,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,YAAY,CAAC,iBAAiB,CAAC,CAAC;oBAC9D,IAAI,IAAI,IAAI,IAAI,EAAE;wBAChB,IAAI,GAAG;4BACL,UAAU,EAAE,CAAC;yBACI,CAAC;wBACpB,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,YAAY,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC;qBAC9D;oBACD,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,EAAE,EAAC,MAAM,EAAE,IAAI,CAAC,UAAU,EAAE,SAAS,EAAE,YAAY,CAAC,iBAAiB,EAAc,CAAC,CAAC;oBAC9G,IAAI,CAAC,UAAU,IAAI,GAAG,CAAC,GAAG,CAAC;oBAC3B,MAAM;aACT;SACF;IACH,CAAC;IAED,QAAQ,CAAC,MAAc,EAAE,mBAA+D;QACtF,uBAAuB;QACvB,MAAM,UAAU,GAAG,mBAAmB,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,WAAW,CAAC;QACzE,MAAM,OAAO,GAAG,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,EAAE,IAAI,CAAC,EAAE,EAAE,CACzE,IAAI,UAAU,CAAC,IAAI,CAAC,UAAU,GAAG,QAAQ,GAAG,MAAM,CAAC,CAAC,CAAC;QACvD,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;IACjC,CAAC;IAED,gBAAgB,CAAC,OAA+C;QAC9D,KAAK,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,EAAE;YACxD,mDAAmD;YACnD,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC,KAAK,GAAG,CAAC,CAAM,CAAC;SACpC;QAED,iCAAiC;QACjC,KAAK,MAAM,CAAC,KAAK,EAAE,GAAG,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;YAC1D,MAAM,WAAW,GAAG,GAAG,CAAC,IAAI,KAAK,KAAK,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC;YAChE,IAAI,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;YAC7C,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,WAAW,CAAC,EAAE;gBACtC,IAAI,GAAG,IAAI,WAAW,CAAC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,WAAW,CAAC,iBAAiB,CAAE,CAAC,GAAG,CAAC,CAAC;gBACnF,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;aACtC;YACD,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,CAAE,CAAC,IAAI,GAAG,IAAK,CAAC;SAC1C;IACH,CAAC;IAED,cAAc;QACZ,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;YAC9B,MAAM,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YAC3C,OAAO,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC;QAChC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,IAAI,CAAQ,CAAC;IACnC,CAAC;IAED,cAAc,CAAC,KAAa;QAC1B,4DAA4D;QAC5D,MAAM,SAAS,GAAG,IAAI,CAAC;QACvB,MAAM,WAAW,GAAG,IAAI,KAAK,CAAC,EAAE,EAAE;YAChC,GAAG,CAAC,OAAO,EAAE,IAAI;gBACf,OAAO,SAAS,CAAC,aAAa,CAAC,KAAK,EAAE,IAAc,CAAC,CAAC;YACxD,CAAC;YACD,GAAG,CAAC,OAAO,EAAE,IAAI,EAAE,KAAK;gBACtB,SAAS,CAAC,aAAa,CAAC,KAAK,EAAE,IAAc,EAAE,KAAK,CAAC,CAAC;gBACtD,OAAO,IAAI,CAAC;YACd,CAAC;SACF,CAAC,CAAC;QACH,OAAO,WAAW,CAAC;IACrB,CAAC;IAED,aAAa,CAAC,KAAa,EAAE,KAAa;QACxC,MAAM,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAC7C,IAAI,SAAS,IAAI,IAAI;YACnB,MAAM,IAAI,KAAK,CAAC,YAAY,KAAK,sCAAsC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;QAE5G,MAAM,EAAC,UAAU,EAAC,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,SAAS,CAAC,SAAS,CAAE,CAAC;QAClE,OAAO,SAAS,CAAC,IAAI,CAAC,KAAK,GAAG,UAAU,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC;IAC/D,CAAC;IAED,aAAa,CAAC,KAAa,EAAE,KAAa,EAAE,GAAG,KAAY;QACzD,MAAM,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAC7C,IAAI,SAAS,IAAI,IAAI;YACnB,MAAM,IAAI,KAAK,CAAC,YAAY,KAAK,sCAAsC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;QAC5G,MAAM,EAAC,UAAU,EAAC,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,SAAS,CAAC,SAAS,CAAE,CAAC;QAClE,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,KAAK,GAAG,UAAU,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC;IACnE,CAAC;CACF","sourcesContent":["type TypedArrayType = Float32Array | Float64Array | Uint8Array | Uint16Array | Uint32Array | Int8Array | Int16Array | Int32Array | BigInt64Array | BigUint64Array;\n\ninterface TypedArrayConstructor<T extends TypedArrayType> {\n  new (buffer: ArrayBufferLike, byteOffset?: number, length?: number): T;\n  BYTES_PER_ELEMENT: number;\n}\n\nexport type StructureArrayEntryDef<T extends TypedArrayType> = {\n  type: TypedArrayConstructor<T> | 'ref';\n  len: number;\n};\n\ntype MetaOfBytes<S extends SharedArrayBuffer | ArrayBuffer> = {\n  lenOfEntry: number;\n  buf: S;\n};\n\ntype FieldMeta = {\n  offset: number;\n  bitLength: number;\n  view: TypedArrayType;\n};\n\nexport class ArrayBufferMgr<S extends SharedArrayBuffer | ArrayBuffer> {\n  private metaByNumByte = new Map<number, MetaOfBytes<S>>();\n  private fieldMetas = new Map<string, FieldMeta>();\n  private typedArrays = new Map<StructureArrayEntryDef<any>['type'], TypedArrayType>();\n\n  constructor(protected definition: Record<string, StructureArrayEntryDef<TypedArrayType>>,\n    public isSharedArrayBuffer: S extends SharedArrayBuffer ? true : false\n  ) {\n    for (const [field, def] of Object.entries(definition)) {\n      let meta: MetaOfBytes<S> | undefined;\n      switch (def.type) {\n        case 'ref':\n        case Uint32Array:\n        case Int32Array:\n        case Float32Array:\n          meta = this.metaByNumByte.get(Uint32Array.BYTES_PER_ELEMENT);\n          if (meta == null) {\n            meta = {\n              lenOfEntry: 0\n            } as MetaOfBytes<S>;\n            this.metaByNumByte.set(Uint32Array.BYTES_PER_ELEMENT, meta);\n          }\n          this.fieldMetas.set(field, {offset: meta.lenOfEntry, bitLength: Uint32Array.BYTES_PER_ELEMENT} as FieldMeta);\n          meta.lenOfEntry += def.len;\n          break;\n        case Uint8Array:\n        case Int8Array:\n          meta = this.metaByNumByte.get(Uint8Array.BYTES_PER_ELEMENT);\n          if (meta == null) {\n            meta = {\n              lenOfEntry: 0\n            } as MetaOfBytes<S>;\n            this.metaByNumByte.set(Uint8Array.BYTES_PER_ELEMENT, meta);\n          }\n          this.fieldMetas.set(field, {offset: meta.lenOfEntry, bitLength: Uint8Array.BYTES_PER_ELEMENT} as FieldMeta);\n          meta.lenOfEntry += def.len;\n          break;\n        case Uint16Array:\n        case Int16Array:\n          meta = this.metaByNumByte.get(Uint16Array.BYTES_PER_ELEMENT);\n          if (meta == null) {\n            meta = {\n              lenOfEntry: 0\n            } as MetaOfBytes<S>;\n            this.metaByNumByte.set(Uint16Array.BYTES_PER_ELEMENT, meta);\n          }\n          this.fieldMetas.set(field, {offset: meta.lenOfEntry, bitLength: Uint16Array.BYTES_PER_ELEMENT} as FieldMeta);\n          meta.lenOfEntry += def.len;\n          break;\n        case Float64Array:\n        case BigInt64Array:\n        case BigUint64Array:\n          meta = this.metaByNumByte.get(Float64Array.BYTES_PER_ELEMENT);\n          if (meta == null) {\n            meta = {\n              lenOfEntry: 0\n            } as MetaOfBytes<S>;\n            this.metaByNumByte.set(Float64Array.BYTES_PER_ELEMENT, meta);\n          }\n          this.fieldMetas.set(field, {offset: meta.lenOfEntry, bitLength: Float64Array.BYTES_PER_ELEMENT} as FieldMeta);\n          meta.lenOfEntry += def.len;\n          break;\n      }\n    }\n  }\n\n  allocate(length: number, isSharedArrayBuffer: S extends SharedArrayBuffer ? true : false) {\n    // allocate ArrayBuffer\n    const bufferCons = isSharedArrayBuffer ? SharedArrayBuffer : ArrayBuffer;\n    const buffers = [...this.metaByNumByte.entries()].map(([numBytes, meta]) =>\n      new bufferCons(meta.lenOfEntry * numBytes * length));\n    this.fromArrayBuffers(buffers);\n  }\n\n  fromArrayBuffers(buffers: Array<ArrayBuffer | SharedArrayBuffer>) {\n    for (const [bytes, meta] of this.metaByNumByte.entries()) {\n      // meta.lenOfEntry = this.bytesPerEntry[bytes - 1];\n      meta.buf = buffers[bytes - 1] as S;\n    }\n\n    // create buffer view: TypedArray\n    for (const [field, def] of Object.entries(this.definition)) {\n      const constructor = def.type === 'ref' ? Uint32Array : def.type;\n      let view = this.typedArrays.get(constructor);\n      if (!this.typedArrays.has(constructor)) {\n        view = new constructor(this.metaByNumByte.get(constructor.BYTES_PER_ELEMENT)!.buf);\n        this.typedArrays.set(def.type, view);\n      }\n      this.fieldMetas.get(field)!.view = view!;\n    }\n  }\n\n  toArrayBuffers(): S[] {\n    return [1, 2, 4, 8].map(bytes => {\n      const meta = this.metaByNumByte.get(bytes);\n      return meta ? meta.buf : null;\n    }).filter(a => a != null) as S[];\n  }\n\n  getStructureAt(index: number) {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const outerSelf = this;\n    const objectProxy = new Proxy({}, {\n      get(_target, prop) {\n        return outerSelf.getFieldValue(index, prop as string);\n      },\n      set(_target, prop, value) {\n        outerSelf.setFieldValue(index, prop as string, value);\n        return true;\n      }\n    });\n    return objectProxy;\n  }\n\n  getFieldValue(index: number, field: string) {\n    const fieldMeta = this.fieldMetas.get(field);\n    if (fieldMeta == null)\n      throw new Error(`Property ${field} is not defined, check definition: ${JSON.stringify(this.definition)}`);\n\n    const {lenOfEntry} = this.metaByNumByte.get(fieldMeta.bitLength)!;\n    return fieldMeta.view[index * lenOfEntry + fieldMeta.offset];\n  }\n\n  setFieldValue(index: number, field: string, ...value: any[]) {\n    const fieldMeta = this.fieldMetas.get(field);\n    if (fieldMeta == null)\n      throw new Error(`Property ${field} is not defined, check definition: ${JSON.stringify(this.definition)}`);\n    const {lenOfEntry} = this.metaByNumByte.get(fieldMeta.bitLength)!;\n    fieldMeta.view.set(value, index * lenOfEntry + fieldMeta.offset);\n  }\n}\n\n"]}