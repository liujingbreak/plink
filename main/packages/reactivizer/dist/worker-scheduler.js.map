{"version":3,"file":"worker-scheduler.js","sourceRoot":"","sources":["../src/worker-scheduler.ts"],"names":[],"mappings":"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","sourcesContent":["import type {Worker as NodeWorker} from 'node:worker_threads';\nimport {RedBlackTree} from '@wfh/algorithms';\nimport * as rx from 'rxjs';\nimport {Broker} from './types';\n\nlet SEQ = 0;\n\nexport function apply(broker: Broker, opts: {\n  maxNumOfWorker: number;\n  workerFactory(): Worker | NodeWorker;\n}) {\n  const {r, o, i} = broker;\n  const workerRankTree = new RedBlackTree<number, number[]>();\n  const ranksByWorkerNo = new Map<number, [worker: Worker | NodeWorker, rank: number]>();\n\n  r(o.pt.assignWorker.pipe(\n    rx.map(([m]) => {\n      if (ranksByWorkerNo.size < opts.maxNumOfWorker) {\n        const newWorker = opts.workerFactory();\n        ranksByWorkerNo.set(SEQ, [newWorker, 0]);\n        const tnode = workerRankTree.insert(1);\n        if (tnode.value) {\n          tnode.value.push(SEQ);\n        } else {\n          tnode.value = [SEQ];\n        }\n        i.dpf.workerAssigned(m, SEQ, newWorker);\n        SEQ++;\n      } else {\n        const treeNode = workerRankTree.minimum()!;\n        if (treeNode == null)\n          throw new Error('minimum node is null');\n        const workerNo = treeNode.value[0];\n        if (ranksByWorkerNo.get(workerNo) == null)\n          throw new Error('ranksByWorkerNo has null for ' + workerNo);\n        const [worker] = ranksByWorkerNo.get(workerNo)!;\n        i.dpf.workerAssigned(m, treeNode.value[0], worker);\n      }\n    })\n  ));\n\n  r(i.pt.workerAssigned.pipe(\n    rx.map(([, workerNo]) => {\n      changeWorkerRank(workerNo, 1);\n    })\n  ));\n\n  r(o.pt.newWorkerReady.pipe(\n    rx.mergeMap(([, workerNo,  workerOutputCtl]) => rx.merge(\n      workerOutputCtl.pt.stopWaiting.pipe(\n        rx.tap(() => changeWorkerRank(workerNo, 1))\n      ),\n      rx.merge(workerOutputCtl.pt.wait, workerOutputCtl.pt.returned).pipe(\n        rx.tap(() => changeWorkerRank(workerNo, -1))\n      )\n    ))\n  ));\n\n  // r(rx.merge(i.pt.onWorkerWait, i.pt.onWorkerReturned).pipe(\n  //   rx.map(([, workerNo]) => changeWorkerRank(workerNo, -1))\n  // ));\n\n  r(o.pt.onWorkerExit.pipe(\n    rx.tap(([, workerNo]) => {\n      if (ranksByWorkerNo.has(workerNo)) {\n        const [, rank] = ranksByWorkerNo.get(workerNo)!;\n        ranksByWorkerNo.delete(workerNo);\n        const tnode = workerRankTree.search(rank);\n        if (tnode) {\n          const idx = tnode.value.indexOf(workerNo);\n          if (idx >= 0) {\n            tnode.value.splice(idx, 1);\n          }\n        }\n      }\n    })\n  ));\n\n  r(i.at.letAllWorkerExit.pipe(\n    rx.exhaustMap(a => {\n      const num = ranksByWorkerNo.size;\n      for (const [worker] of ranksByWorkerNo.values())\n        i.dp.letWorkerExit(worker);\n      return rx.concat(\n        o.at.onWorkerExit.pipe(\n          rx.take(num)\n        ),\n        new rx.Observable((sub) => {\n          o.dpf.onAllWorkerExit(a);\n          sub.complete();\n        })\n      );\n    })\n  ));\n\n  function changeWorkerRank(workerNo: number, changeValue: number) {\n    const entry = ranksByWorkerNo.get(workerNo)!;\n    const [, rank] = entry;\n    const newRank = rank + changeValue;\n    entry[1] = newRank;\n\n    const node = workerRankTree.search(rank);\n    if (node) {\n      const idx = node.value.indexOf(workerNo);\n      node.value.splice(idx, 1);\n      if (node.value.length === 0)\n        workerRankTree.deleteNode(node);\n      const tnode = workerRankTree.insert(newRank);\n      if (tnode.value)\n        tnode.value.push(workerNo);\n      else\n        tnode.value = [workerNo];\n    }\n  }\n\n  return ranksByWorkerNo;\n}\n\n"]}