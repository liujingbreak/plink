{"version":3,"file":"control.js","sourceRoot":"","sources":["../src/control.ts"],"names":[],"mappings":"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","sourcesContent":["import * as rx from 'rxjs';\nimport {Action, ActionFunctions, InferMapParam, InferPayload, ActionMeta,\n  ArrayOrTuple, ControllerCore, Dispatch, DispatchFor, PayloadStream, CoreOptions,\n  has, nameOfAction, actionMetaToStr\n} from './stream-core';\n\nexport * from './stream-core';\n\ntype DispatchAndObserveRes<I extends ActionFunctions, K extends keyof I> = <O extends ActionFunctions, R extends keyof O>(\n  waitForAction$: rx.Observable<Action<O, R>>, ...params: InferPayload<I[K]>\n) => rx.Observable<InferMapParam<O, R>>;\n\ntype DispatchForAndObserveRes<I extends ActionFunctions, K extends keyof I> = <O extends ActionFunctions, R extends keyof O>(\n  waitForAction$: rx.Observable<Action<O, R>>, origActionMeta: ActionMeta | ArrayOrTuple<ActionMeta> | null, ...params: InferPayload<I[K]>\n) => rx.Observable<InferMapParam<O, R>>;\n\nexport class RxController<I extends ActionFunctions> {\n  core: ControllerCore<I>;\n  dispatcher: {[K in keyof I]: Dispatch<I[K]>};\n  dispatcherFor: {[K in keyof I]: DispatchFor<I[K]>};\n  /** abbrevation of property \"dispatcher\", exactly same instance of dispatcher */\n  dp: {[K in keyof I]: Dispatch<I[K]>};\n  /** abbrevation of property \"dispatcherFor\", exactly same instance of dispatcherFor */\n  dpf: {[K in keyof I]: DispatchFor<I[K]>};\n  dispatchAndObserveRes: {[K in keyof I]: DispatchAndObserveRes<I, K>};\n  /** abbrevation of property \"dispatchAndObserveRes\", exactly same instance of dispatchAndObserveRes */\n  do: {[K in keyof I]: DispatchAndObserveRes<I, K>};\n  dispatchForAndObserveRes: {[K in keyof I]: DispatchForAndObserveRes<I, K>};\n  /** abbrevation of dispatchForAndObserveRes */\n  dfo: {[K in keyof I]: DispatchForAndObserveRes<I, K>};\n  payloadByType: {[K in keyof I]: PayloadStream<I, K>};\n  /** abbrevation of payloadByType */\n  pt: {[K in keyof I]: PayloadStream<I, K>};\n  actionByType: {[K in keyof I]: rx.Observable<Action<I, K>>};\n  /** abbrevation of actionByType */\n  at: {[K in keyof I]: rx.Observable<Action<I, K>>};\n\n  updateInterceptor: ControllerCore<I>['updateInterceptor'];\n\n  constructor(public opts?: CoreOptions<(string & keyof I)[]>) {\n    const core = this.core = new ControllerCore(opts);\n\n    this.dispatcher = this.dp = new Proxy({} as {[K in keyof I]: Dispatch<I[K]>}, {\n      get(_target, key, _rec) {\n        return core.dispatchFactory(key as keyof I);\n      }\n    });\n    this.dispatcherFor = this.dpf = new Proxy({} as {[K in keyof I]: DispatchFor<I[K]>}, {\n      get(_target, key, _rec) {\n        return core.dispatchForFactory(key as keyof I);\n      }\n    });\n\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self = this;\n    this.dispatchForAndObserveRes = this.dfo = new Proxy({} as {[K in keyof I]: DispatchForAndObserveRes<I, K>}, {\n      get(_target, key, _rec) {\n\n        return <R extends keyof I>(action$: rx.Observable<Action<I, R>>, referActions: ActionMeta | ArrayOrTuple<ActionMeta> | null, ...params: any[]) => {\n          const action = self.core.createAction(key as string, params as InferPayload<I[string]>);\n          if (referActions)\n            action.r = Array.isArray(referActions) ? referActions.map(m => m.i) : (referActions as ActionMeta).i;\n          const r$ = new rx.ReplaySubject<InferMapParam<I, R>>(1);\n          rx.merge(\n            action$.pipe(\n              actionRelatedToAction(action.i),\n              mapActionToPayload()\n            ),\n            new rx.Observable<never>(sub => {\n              self.core.actionUpstream.next(action);\n              sub.complete();\n            })\n          ).subscribe(r$);\n          return r$.asObservable();\n        };\n      }\n    });\n\n    this.dispatchAndObserveRes = this.do = new Proxy({} as {[K in keyof I]: DispatchAndObserveRes<I, K>}, {\n      get(_target, key, _rec) {\n\n        return <R extends keyof I>(action$: rx.Observable<Action<I, R>>, ...params: any[]) => {\n          return self.dfo[key as keyof I](action$, null, ...(params as any));\n        };\n      }\n    });\n\n    const actionsByType = {} as {[K in keyof I]: rx.Observable<Action<I, K>>};\n    const actionByTypeProxy = new Proxy(\n      {} as typeof actionsByType,\n      {\n        get(_target, type, _rec) {\n          let a$ = actionsByType[type as keyof I];\n          if (a$ == null) {\n            const matchType = core.typePrefix + (type as string);\n            a$ = actionsByType[type as keyof I] = core.action$.pipe(\n              rx.filter(({t}) => t === matchType),\n              rx.share()\n            );\n          }\n          return a$;\n        }\n      });\n\n    const payloadsByType = {} as {[K in keyof I]: rx.Observable<InferMapParam<I, K>>};\n    this.actionByType = this.at = actionByTypeProxy;\n\n    this.payloadByType = this.pt = new Proxy(\n      {} as typeof payloadsByType,\n      {\n        get(_target, key, _rec) {\n          let p$ = payloadsByType[key as keyof I];\n          if (p$ == null) {\n            const a$ = actionByTypeProxy[key as keyof I];\n            p$ = payloadsByType[key as keyof I] = a$.pipe(\n              mapActionToPayload(),\n              rx.share()\n            );\n          }\n          return p$;\n        }\n      });\n    this.updateInterceptor = core.updateInterceptor;\n  }\n\n  /** create state of actions, you can consider it like a map of BehaviorSubject of actions */\n  // withTableFor<MS extends Array<keyof I>>(...actionNames: MS) {\n  //   if (this.table == null)\n  //     this.table = new ActionTable(this, actionNames) as TB;\n  //   else\n  //     this.table.addActions(...actionNames);\n  //   return this as RxController<I, (KS[number] | MS[number])[], ActionTable<I, (KS[number] | MS[number])[]>>;\n  // }\n\n  createAction<J extends ActionFunctions = I, K extends keyof J = keyof J>(type: K, ...params: InferPayload<J[K]>) {\n    return this.core.createAction(type, params);\n  }\n}\n\nexport class ActionTable<I extends ActionFunctions, KS extends ReadonlyArray<keyof I>> {\n  latestPayloads = {} as {[K in KS[number]]: PayloadStream<I, K>};\n  /** Abbrevation of latestPayloads, pointing to exactly same instance of latestPayloads */\n  l: {[K in KS[number]]: PayloadStream<I, K>};\n\n  actionSnapshot = new Map<keyof I, InferMapParam<I, keyof I>>();\n\n  constructor(private streamCtl: RxController<I>, actionNames: KS) {\n    this.l = this.latestPayloads;\n    this.addActions(...actionNames);\n  }\n\n  addActions<M extends Array<keyof I>>(...actionNames: M) {\n    for (const type of actionNames) {\n      if (has.call(this.latestPayloads, type))\n        continue;\n\n      const a$ = new rx.ReplaySubject<InferMapParam<I, M[number]>>(1);\n      this.streamCtl.actionByType[type].pipe(\n        rx.map(a => {\n          const mapParam = [{i: a.i, r: a.r}, ...a.p] as InferMapParam<I, M[number]>;\n          this.actionSnapshot.set(type, mapParam);\n          return mapParam;\n        })\n      ).subscribe(a$);\n\n      this.latestPayloads[type] = this.streamCtl.opts?.debug ?\n        a$.pipe(\n          this.debugLogLatestActionOperator(type as string)\n        ) :\n        a$.asObservable();\n\n    }\n    return this as ActionTable<I, Array<KS[number] | M[number]>>;\n  }\n\n  getLatestActionOf<K extends KS[number]>(actionName: K) {\n    return this.actionSnapshot.get(actionName) as InferMapParam<I, K> | undefined;\n  }\n\n  protected debugLogLatestActionOperator<K extends string & keyof I, P extends InferMapParam<I, K>>(type: K) {\n    const core = this.streamCtl.core;\n    return this.streamCtl.opts?.log ?\n      rx.map<P, P>((action, idx) => {\n        if (idx === 0 && !core.debugExcludeSet.has(type)) {\n          this.streamCtl.opts!.log!(core.logPrefix + 'rx:latest', type, action);\n        }\n        return action;\n      }) :\n      (typeof window !== 'undefined') || (typeof Worker !== 'undefined') ?\n        rx.map<P, P>((p, idx) => {\n          if (idx === 0 && !core.debugExcludeSet.has(type)) {\n            // eslint-disable-next-line no-console\n            console.log(`%c ${core.logPrefix}rx:latest `, 'color: #f0fe0fe0; background: #8c61dd;', type,\n              actionMetaToStr(p[0]));\n          }\n          return p;\n        }) :\n        rx.map<P, P>((p, idx) => {\n          if (idx > 0 && !core.debugExcludeSet.has(type)) {\n            // eslint-disable-next-line no-console\n            console.log(core.logPrefix + 'latest:', type, actionMetaToStr(p[0]));\n          }\n          return p;\n        });\n  }\n}\n\n/** Rx operator function */\nexport function actionRelatedToAction<T extends Action<any>>(id: ActionMeta['i']) {\n  return function(up: rx.Observable<T>) {\n    return up.pipe(\n      rx.filter(\n        m => (m.r != null && m.r === id) || (\n          Array.isArray(m.r) && m.r.some(r => r === id)\n        )\n      )\n    );\n  };\n}\n/** Rx operator function */\nexport function actionRelatedToPayload<T extends [ActionMeta, ...any[]]>(id: ActionMeta['i']) {\n  return function(up: rx.Observable<T>): rx.Observable<T> {\n    return up.pipe(\n      rx.filter(\n        ([m]) => (m.r != null && m.r === id) || (\n          Array.isArray(m.r) && m.r.some(r => r === id)\n        )\n      )\n    );\n  };\n}\n\nexport function serializeAction<I extends ActionFunctions = any, K extends keyof I = string>(action: Action<I, K>) {\n  const a = {...action, t: nameOfAction(action)};\n  // if (a.r instanceof Set) {\n  //   a.r = [...a.r.values()];\n  // }\n  return a;\n}\n\n/**\n * Create a new Action with same \"i\" and \"r\" properties and dispatched to RxController\n * @return that dispatched new action object\n */\nexport function deserializeAction<I extends ActionFunctions>(actionObj: any, toController: RxController<I>) {\n  const newAction = toController.core.createAction(nameOfAction(actionObj) as keyof I, (actionObj as Action<I>).p);\n  newAction.i = (actionObj as Action<any>).i;\n  if ((actionObj as Action<any>).r)\n    newAction.r = (actionObj as Action<any>).r;\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  toController.core.actionUpstream.next(newAction);\n  return newAction;\n}\n\nfunction mapActionToPayload<I extends ActionFunctions, K extends keyof I>() {\n  return (up: rx.Observable<Action<I, K>>) => up.pipe(\n    rx.map(a => [{i: a.i, r: a.r}, ...a.p] as InferMapParam<I, keyof I>)\n  );\n}\n"]}