{"version":3,"file":"common.js","sourceRoot":"","sources":["../../src/fork-join/common.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,yCAA2B;AAC3B,wCACyD;AAIzD;;GAEG;AACH,SAAgB,IAAI,CAClB,IAAwC,EACxC,UAAsB,EACtB,MAA0B,EAC1B,kBAAsB,EACtB,eAA4B;IAE5B,MAAM,YAAY,GAAG,IAAI,CAAC,CAAC,CAAC,YAAY,CAAC,UAAU,EAAE,GAAG,MAAM,CAAC,CAAC;IAChE,IAAI,eAAe;QACjB,YAAY,CAAC,CAAC,GAAG,eAAe,CAAC,CAAC,CAAC;IAErC,MAAM,QAAQ,GAAG,EAAE,CAAC,cAAc,CAChC,EAAE,CAAC,KAAK,CACN,CAAC,kBAAkB,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,UAAU,GAAG,UAAU,CAAC,CAAC,CAAC,IAAI,CAC5F,IAAA,+BAAqB,EAAC,YAAY,CAAC,EACnC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CACjB,EACA,IAA6D,CAAC,CAAC,CAAC,EAAE,CAAC,WAAW,CAAC,IAAI,CAClF,IAAA,+BAAqB,EAAC,YAAY,CAAC;IACnC,4CAA4C;IAC5C,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAE,MAAO,GAAa,CAAC,CAAC,CAAC,CAAC,CAC9C,CACF,CAAC,CAAC;IACL,IAAI,eAAe;QAChB,IAAI,CAAC,CAA+C,CAAC,GAAG,CAAC,IAAI,CAAC,eAAe,EAAE,YAAY,CAAC,CAAC;;QAE7F,IAAI,CAAC,CAA+C,CAAC,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAC9E,OAAO,QAAQ,CAAC;AAClB,CAAC;AA5BD,oBA4BC;AAED;;;;;;GAMG;AACH,SAAgB,aAAa,CAAgC,SAA6C,EAAE,YAAmC;IAC7I,MAAM,MAAM,GAAG,SAA+D,CAAC;IAC/E,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC;IACnB,OAAO,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,IAAI,CAC/B,EAAE,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,WAAW,EAAE,CAAC,CAC7C,CAAC;AACJ,CAAC;AAND,sCAMC;AAED;;;;;;GAMG;AACH,WAAiB,aAAa;IAC5B,SAAgB,SAAS,CAAgC,GAAG,IAA0F;QACpJ,OAAO,EAAE,CAAC,aAAa,CAAC,aAAa,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;IAClD,CAAC;IAFe,uBAAS,YAExB,CAAA;AACH,CAAC,EAJgB,aAAa,6BAAb,aAAa,QAI7B","sourcesContent":["import * as rx from 'rxjs';\nimport {ActionMeta, ActionFunctions, RxController,\n  actionRelatedToAction, InferPayload} from '../control';\nimport {ReactorComposite} from '../epic';\nimport {ForkWorkerOutput} from './types';\n\n/**\n * @param returnedActionName the name of action that is observed as \"returned\" message from forked worker, default is `${actionName}Resolved`\n */\nexport function fork<I extends ActionFunctions, K extends string & keyof I, R extends string & keyof I = `${K}Resolved`>(\n  comp: ReactorComposite<I, any, any, any>,\n  actionName: K & string,\n  params: InferPayload<I[K]>,\n  returnedActionName?: R,\n  relatedToAction?: ActionMeta\n): Promise<[...InferPayload<I[R]>]> {\n  const forkedAction = comp.o.createAction(actionName, ...params);\n  if (relatedToAction)\n    forkedAction.r = relatedToAction.i;\n\n  const forkDone = rx.firstValueFrom(\n    rx.merge(\n      (returnedActionName ? comp.i.at[returnedActionName] : comp.i.at[actionName + 'Resolved']).pipe(\n        actionRelatedToAction(forkedAction),\n        rx.map(a => a.p)\n      ),\n      (comp as ReactorComposite<I, Record<string, never>, any, any>).o.pt._onErrorFor.pipe(\n        actionRelatedToAction(forkedAction),\n        // eslint-disable-next-line no-throw-literal\n        rx.map(([, err]) => {throw (err as Error); })\n      )\n    ));\n  if (relatedToAction)\n    (comp.o as unknown as RxController<ForkWorkerOutput>).dpf.fork(relatedToAction, forkedAction);\n  else\n    (comp.o as unknown as RxController<ForkWorkerOutput>).dp.fork(forkedAction);\n  return forkDone;\n}\n\n/**\n * Informs broker that current step is waiting on forked function returns or any other outside asynchronous operation,\n * so that broker can rank current thread worker as \"less busy\" and schedule more forked\n * task probably\n * @return {Observable} which should `complete`, so that it notifies scheduler to demote current thread\n * worker as current thread will be back to continue previous task.\n */\nexport function setIdleDuring<T, O extends ForkWorkerOutput>(workerCtl: ReactorComposite<any, O, any, any>, waitingTask$: rx.ObservableInput<T>): rx.Observable<T> {\n  const worker = workerCtl as unknown as ReactorComposite<any, ForkWorkerOutput>;\n  worker.o.dp.wait();\n  return rx.from(waitingTask$).pipe(\n    rx.finalize(() => worker.o.dp.stopWaiting())\n  );\n}\n\n/**\n * Informs broker that current step is waiting on forked function returns or any other outside asynchronous operation,\n * so that broker can rank current thread worker as \"less busy\" and schedule more forked\n * task probably\n * @return {Promise} when it is resolved, scheduler will be notified to demote current thread\n * worker as current thread will be back to continue previous task.\n */\nexport namespace setIdleDuring {\n  export function asPromise<T, O extends ForkWorkerOutput>(...args: [workerCtl: ReactorComposite<any, O, any, any>, waitingTask$: rx.ObservableInput<T>]) {\n    return rx.lastValueFrom(setIdleDuring(...args));\n  }\n}\n"]}