{"version":3,"file":"web-worker-broker.js","sourceRoot":"","sources":["../../src/fork-join/web-worker-broker.ts"],"names":[],"mappings":"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","sourcesContent":["import * as rx from 'rxjs';\nimport {ReactorComposite, ReactorCompositeOpt} from '../epic';\n// import {timeoutLog} from '../utils';\nimport {Action, serializeAction, deserializeAction, RxController} from '../control';\nimport {Broker, BrokerInput, BrokerEvent, brokerOutputTableFor as outputTableFor, ForkWorkerInput, ForkWorkerOutput, WorkerControl, ThreadExpirationEvents} from './types';\nimport {applyScheduler} from './worker-scheduler';\nexport * from './types';\n\ninterface WorkerProperties {\n  no: number;\n  worker: Worker;\n  port: MessagePort;\n  input: ReactorComposite<any, any, any, any>['i'];\n  output: ReactorComposite<any, any, any, any>['o'];\n  state: 'inited' | 'init' | 'exit';\n}\n/** Broker manages worker threads, create message channels between child worker threads and main thread, transmits actions\n*/\nexport function createBroker<\n  I = Record<never, never>,\n  O = Record<never, never>\n>(\n  workerController: WorkerControl<I, O, any, any>,\n  opts?: ReactorCompositeOpt<BrokerInput & ForkWorkerInput, BrokerEvent<I, O> & ForkWorkerOutput & ThreadExpirationEvents>\n) {\n  const options = opts ? {...opts, outputTableFor} : {outputTableFor};\n  const mainWorkerComp = workerController as unknown as ReactorComposite<ForkWorkerInput, ForkWorkerOutput>;\n\n  const broker = new ReactorComposite<\n  BrokerInput & ForkWorkerOutput,\n  BrokerEvent<I, O>,\n  [],\n    typeof outputTableFor\n  >(options as any);\n\n  const workerProps = new Map<number, WorkerProperties>();\n\n  const {r, i, o} = broker;\n\n  r('workerInited -> newWorkerReady', o.pt.workerInited.pipe(\n    rx.filter(([, , , , skipped]) => !skipped),\n    rx.tap(([meta, workerNo, , outputCtrl]) => o.dpf.newWorkerReady(meta, workerNo, outputCtrl, workerProps.get(workerNo)!.input))\n  ));\n\n  r('ensureInitWorker, message channel -> workerInited, onWorkerExit, onWorkerError', i.pt.ensureInitWorker.pipe(\n    rx.mergeMap(([meta, workerNo, worker]) => {\n      let props = workerProps.get(workerNo);\n      if (props?.state === 'inited') {\n        o.dpf.workerInited(meta, workerNo, null, workerProps.get(workerNo)!.output, true);\n        return rx.EMPTY;\n      } else if (props?.state === 'init') {\n        return o.pt.workerInited.pipe(\n          rx.filter(() => props?.state === 'inited'),\n          rx.take(1),\n          rx.tap(() => o.dpf.workerInited(meta, workerNo, null, workerProps.get(workerNo)!.output, true))\n        );\n      }\n      if (props == null) {\n        props = {state: 'init'} as WorkerProperties;\n        workerProps.set(workerNo, props);\n      }\n      const chan = new MessageChannel();\n      props.port = chan.port1;\n      const wo = new RxController<ReactorComposite<any, ForkWorkerOutput & O>['o'] extends RxController<infer T> ? T : unknown>({\n        name: '#' + workerNo + ' worker output',\n        debugExcludeTypes: (opts as ReactorCompositeOpt<ForkWorkerOutput> | undefined)?.debugExcludeTypes\n      });\n      const wi = new RxController<ForkWorkerInput & I>({\n        name: '#' + workerNo + ' worker input',\n        debugExcludeTypes: (opts as ReactorCompositeOpt<ForkWorkerInput> | undefined)?.debugExcludeTypes\n      });\n      props.input = wi;\n      props.output = wo;\n\n      chan.port1.onmessage = ({data: event}: MessageEvent<Action<any> | {type: string}>) => {\n        if ((event as {type: string}).type === 'WORKER_READY') {\n          props!.state = 'inited';\n          o.dpf.workerInited(meta, workerNo, null, wo, false);\n        } else if ((event as {type: string}).type === 'log') {\n          // eslint-disable-next-line no-console\n          (opts?.log ?? console.log)(...(event as unknown as {p: [any, ...any[]]}).p);\n        } else if ((event as {error?: any}).error) {\n          o.dp.onWorkerError(\n            workerNo,\n            (event as {error?: any}).error,\n            'customized error'\n          );\n        } else {\n          const data = event as MessageEvent<Action<any, keyof any>>;\n          deserializeAction(data, wo);\n        }\n      };\n\n      (worker as Worker).onerror = event => {\n        o.dp.onWorkerError(workerNo, event, 'web worker error');\n      };\n\n      chan.port1.onmessageerror = event => {\n        o.dp.onWorkerError(workerNo, event, 'message error');\n      };\n\n      // TODO: web worker does not have 'close' event, I need\n      // to.find a way resolve this worker exit notification\n      // (worker as Worker).on('exit', code => {\n      //   o.dp.onWorkerExit(workerNo, code);\n      // });\n\n      (worker as Worker).postMessage({type: 'ASSIGN_WORKER_NO', workerNo, mainPort: chan.port2}, [chan.port2]);\n      return wi.core.action$.pipe(\n        rx.tap(action => chan.port1.postMessage(serializeAction(action)))\n      );\n    })\n    // rx.takeUntil(o.pt.onWorkerExit.pipe(rx.filter(([id]) => id === )))\n  ));\n\n  r('(newWorkerReady) forkByBroker, workerInited -> ensureInitWorker, worker chan postMessage()', o.pt.newWorkerReady.pipe(\n    rx.mergeMap(([, fromWorkerNo, workerOutput]) => (workerOutput as unknown as RxController<ForkWorkerOutput>).pt.forkByBroker.pipe(\n      rx.mergeMap(async ([, targetAction, port]) => {\n        let assignedWorkerNo: number | undefined;\n        try {\n          const [, assignedWorkerNo_, worker] = await rx.firstValueFrom(o.do.assignWorker(i.at.workerAssigned\n            // timeoutLog<typeof i.at.workerAssigned extends rx.Observable<infer T> ? T : never>(3000, () => console.log('worker assignment timeout'))\n          ));\n          assignedWorkerNo = assignedWorkerNo_;\n          const fa = mainWorkerComp.i.createAction('onFork', targetAction, port);\n\n          if (worker === 'main') {\n            deserializeAction(fa, mainWorkerComp.i);\n          } else {\n            await rx.firstValueFrom(i.do.ensureInitWorker(o.at.workerInited, assignedWorkerNo, worker));\n            workerProps.get(assignedWorkerNo)!.port.postMessage(serializeAction(fa), [port as MessagePort]);\n          }\n        } catch (e) {\n          if (opts?.log)\n            opts.log(`Error encountered when forked by worker #${fromWorkerNo}, to #${assignedWorkerNo ?? ''}`);\n          const errorFor = broker.o.createAction('_onErrorFor', e);\n          errorFor.r = targetAction.i;\n          port.postMessage(serializeAction(errorFor));\n          throw e;\n        }\n      })\n    ))\n  ));\n\n  r('letWorkerExit -> postMessage to thread worker', i.pt.letWorkerExit.pipe(\n    rx.map(([, workerNo]) => {\n      const prop = workerProps.get(workerNo)!;\n      // eslint-disable-next-line @typescript-eslint/ban-types\n      prop.port.postMessage(serializeAction(\n        (o as unknown as RxController<ForkWorkerInput>).core.createAction('exit')\n      ));\n      prop.state = 'exit';\n    })\n  ));\n\n  o.dp.newWorkerReady(0, workerController.o, workerController.i);\n  return broker as unknown as Broker<I, O>;\n}\n\ntype ScheduleOptions = typeof applyScheduler extends (c: any, o: infer O) => any ? O : unknown;\n\nexport function setupForMainWorker<\n  I = Record<never, never>,\n  O = Record<never, never>\n>(workerContoller: WorkerControl<I, O, any, any>,\n  opts: ScheduleOptions & ReactorCompositeOpt<BrokerInput & ForkWorkerInput, BrokerEvent<I, O> & ForkWorkerOutput & ThreadExpirationEvents>\n): Broker<I, O> {\n  const broker = createBroker(workerContoller, opts);\n  applyScheduler(broker, opts);\n  return broker;\n}\n"]}