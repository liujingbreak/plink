{"version":3,"file":"epic.js","sourceRoot":"","sources":["../src/epic.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,yCAA2B;AAE3B,qCAAyD;AAoBzD,MAAa,gBAAgB;IAK3B,YAAoB,IAAoB;QAApB,SAAI,GAAJ,IAAI,CAAgB;QACtC,IAAI,CAAC,OAAO,GAAG,IAAI,yBAAgB,CAAC,IAAI,CAAC,CAAC;QAC1C,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,uBAAuB,CAAC,aAAa,CAAC,CAAC;IACvF,CAAC;IAED,QAAQ;QACN,OAAO,EAAE,CAAC,KAAK,CACb,IAAI,CAAC,CAAC,CAAC,WAAW,CAAC,IAAI,CACrB,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,EAAE,UAAU,EAAE,OAAO,EAAE,KAAK,CAAC,EAAE,EAAE;YAChD,IAAI,OAAO,IAAI,IAAI,IAAI,CAAC,OAAO,EAAE;gBAC/B,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;aAClD;YACD,OAAO,UAAU,CAAC;QACpB,CAAC,CAAC,CACH,CACF,CAAC,IAAI,CACJ,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,EACvC,EAAE,CAAC,UAAU,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;;YACzB,IAAI,MAAA,IAAI,CAAC,IAAI,0CAAE,GAAG;gBAChB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;;gBAEnB,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACrB,OAAO,GAAG,CAAC;QACb,CAAC,CAAC,CACH,CAAC,SAAS,EAAE,CAAC;IAChB,CAAC;IAED,UAAU;QACR,OAAO,IAAI,CAAC,OAAoF,CAAC;IACnG,CAAC;IAES,WAAW,CAAC,QAA4B,EAAE,KAAc;QAChE,OAAO,QAAQ,CAAC,IAAI,CAClB,EAAE,CAAC,UAAU,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;YACzB,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;YAC9C,OAAO,GAAG,CAAC;QACb,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;CACF;AA5CD,4CA4CC","sourcesContent":["import * as rx from 'rxjs';\r\nimport {RxController, ActionFunctions, PayloadStream} from './control';\r\nimport {DuplexController, DuplexOptions} from './duplex';\r\n\r\nexport type Reactor<I extends ActionFunctions> = (ctl: RxController<I>) => rx.Observable<any>;\r\nexport type DuplexReactor<I extends ActionFunctions, O extends ActionFunctions> = (ctl: DuplexController<I, O>) => rx.Observable<any>;\r\n\r\nexport type ReactorCompositeActions = {\r\n  mergeStream(stream: rx.Observable<any>, disableCatchError?: boolean, errorLabel?: string): void;\r\n  // addReactor(epic: Reactor<I>, disableCatchError?: boolean, errorLabel?: string): void;\r\n  // reactor: ReactorCompositeActions<I, O>['addReactor'];\r\n\r\n  // addDuplexReactor(epic: DuplexReactor<I, O>, disableDefaultCatchError?: boolean, errorLabel?: string): void;\r\n  // dReactor: ReactorCompositeActions<I, O>['addDuplexReactor'];\r\n\r\n  stopAll(): void;\r\n};\r\n\r\nexport type ReactorCompositeOutput = {\r\n  onError(label: string, originError: any): void;\r\n};\r\n\r\nexport class ReactorComposite<I extends ActionFunctions = Record<string, never>, O extends ActionFunctions = Record<string, never>> {\r\n  latestPayloads: {[K in 'mergeStream']: PayloadStream<ReactorCompositeActions, K>};\r\n  l: ReactorComposite<I, O>['latestPayloads'];\r\n  protected control: DuplexController<ReactorCompositeActions, ReactorCompositeOutput>;\r\n\r\n  constructor(private opts?: DuplexOptions) {\r\n    this.control = new DuplexController(opts);\r\n    this.l = this.latestPayloads = this.control.i.createLatestPayloadsFor('mergeStream');\r\n  }\r\n\r\n  startAll() {\r\n    return rx.merge(\r\n      this.l.mergeStream.pipe(\r\n        rx.mergeMap(([_id, downStream, noError, label]) => {\r\n          if (noError == null || !noError) {\r\n            downStream = this.handleError(downStream, label);\r\n          }\r\n          return downStream;\r\n        })\r\n      )\r\n    ).pipe(\r\n      rx.takeUntil(this.control.i.pt.stopAll),\r\n      rx.catchError((err, src) => {\r\n        if (this.opts?.log)\r\n          this.opts.log(err);\r\n        else\r\n          console.error(err);\r\n        return src;\r\n      })\r\n    ).subscribe();\r\n  }\r\n\r\n  getControl() {\r\n    return this.control as DuplexController<ReactorCompositeActions & I, ReactorCompositeOutput & O>;\r\n  }\r\n\r\n  protected handleError(upStream: rx.Observable<any>, label?: string) {\r\n    return upStream.pipe(\r\n      rx.catchError((err, src) => {\r\n        this.control.o.dispatcher.onError(err, label);\r\n        return src;\r\n      })\r\n    );\r\n  }\r\n}\r\n"]}