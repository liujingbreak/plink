{"version":3,"file":"node-worker-broker.js","sourceRoot":"","sources":["../src/node-worker-broker.ts"],"names":[],"mappings":"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","sourcesContent":["import {Worker as NodeWorker} from 'worker_threads';\nimport * as rx from 'rxjs';\nimport {DuplexOptions} from './duplex';\nimport {ReactorComposite} from './epic';\n// import {timeoutLog} from './utils';\nimport {Action, ActionFunctions, serializeAction, deserializeAction, RxController} from './control';\nimport {Broker, BrokerInput, BrokerEvent, ForkWorkerInput, ForkWorkerOutput} from './types';\n\n/** WA - Worker output Message\n*/\nexport function createBroker<I extends ActionFunctions = Record<string, never>, O extends ActionFunctions = Record<string, never>, WA extends ActionFunctions = Record<string, never>>(\n  mainWorker: ReactorComposite<ForkWorkerInput & I, ForkWorkerOutput & O>,\n  opts?: DuplexOptions<BrokerInput & O & BrokerEvent & ForkWorkerOutput>\n) {\n  const mainWorkerComp = mainWorker as unknown as ReactorComposite<ForkWorkerInput, ForkWorkerOutput>;\n  const comp = new ReactorComposite<BrokerInput & ForkWorkerOutput, BrokerEvent>(opts as any);\n\n  const workerInitState = new Map<number, 'DONE' | 'WIP'>();\n\n  const {r, i, o} = comp;\n  comp.startAll();\n  const workerOutputs = new Map<number, RxController<ForkWorkerOutput>>();\n\n  r('Emit newWorkerReady event', o.pt.workerInited.pipe(\n    rx.filter(([, , , , skipped]) => !skipped),\n    rx.tap(([meta, workerNo, , outputCtrl]) => o.dpf.newWorkerReady(meta, workerNo, outputCtrl))\n  ));\n\n  r('ensureInitWorker', i.pt.ensureInitWorker.pipe(\n    rx.mergeMap(([meta, workerNo, worker]) => {\n      if (workerInitState.get(workerNo) === 'DONE') {\n        o.dpf.workerInited(meta, workerNo, null, workerOutputs.get(workerNo)!, true);\n        return rx.EMPTY;\n      } else if (workerInitState.get(workerNo) === 'WIP') {\n        return o.pt.workerInited.pipe(\n          rx.filter(() => workerInitState.get(workerNo) === 'DONE'),\n          rx.take(1),\n          rx.tap(() => o.dpf.workerInited(meta, workerNo, null, workerOutputs.get(workerNo)!, true))\n        );\n      }\n\n      workerInitState.set(workerNo, 'WIP');\n\n      (worker as NodeWorker).on('message', (event: Action<WA, keyof WA> | {type: string}) => {\n        if ((event as {type: string}).type === 'WORKER_READY') {\n          workerInitState.set(workerNo, 'DONE');\n          const wo = new RxController<ForkWorkerOutput>();\n          workerOutputs.set(workerNo, wo);\n          o.dpf.workerInited(meta, workerNo, null, wo, false);\n        } else if ((event as {type: string}).type === 'log') {\n          // eslint-disable-next-line no-console\n          (opts?.log ?? console.log)(...(event as unknown as {p: [any, ...any[]]}).p);\n        } else if ((event as {error?: any}).error) {\n          o.dp.onWorkerError(\n            workerNo,\n            (event as {error?: any}).error\n          );\n        } else {\n          const data = event as MessageEvent<Action<any, keyof any>>;\n          let wo = workerOutputs.get(workerNo);\n          if (wo == null) {\n            wo = new RxController<ForkWorkerOutput>();\n            workerOutputs.set(workerNo, wo);\n          }\n          deserializeAction(data, wo);\n        }\n      });\n\n      (worker as NodeWorker).on('error', event => {\n        o.dp.onWorkerError(workerNo, event);\n      });\n\n      (worker as NodeWorker).on('messageerror', event => {\n        o.dp.onWorkerError(workerNo, event);\n      });\n\n      (worker as NodeWorker).on('exit', code => {\n        o.dp.onWorkerExit(workerNo, code);\n      });\n\n      (worker as NodeWorker).postMessage({type: 'ASSIGN_WORKER_NO', workerNo});\n      return rx.EMPTY;\n    })\n    // rx.takeUntil(o.pt.onWorkerExit.pipe(rx.filter(([id]) => id === )))\n  ));\n\n  r('On forkFromWorker', rx.merge(\n    o.pt.newWorkerReady.pipe(\n      rx.mergeMap(([, , workerOutput]) => workerOutput.pt.forkByBroker)\n    ),\n    mainWorkerComp.o.pt.forkByBroker\n  ).pipe(\n    rx.mergeMap(async ([, targetAction, port]) => {\n      const [, assignedWorkerNo, worker] = await rx.firstValueFrom(o.do.assignWorker(i.at.workerAssigned\n        // timeoutLog<typeof i.at.workerAssigned extends rx.Observable<infer T> ? T : never>(3000, () => console.log('worker assignment timeout'))\n      ));\n      const fa = mainWorkerComp.i.createAction('onFork', targetAction, port);\n\n      if (worker === 'main') {\n        deserializeAction(fa, mainWorkerComp.i);\n      } else {\n        await rx.firstValueFrom(i.do.ensureInitWorker(o.at.workerInited, assignedWorkerNo, worker));\n        worker.postMessage(serializeAction(fa), [port]);\n      }\n    })\n  ));\n\n  r(i.pt.letWorkerExit.pipe(\n    rx.map(([, worker]) => {\n      // eslint-disable-next-line @typescript-eslint/ban-types\n      (worker as NodeWorker).postMessage(serializeAction(\n        (o as unknown as RxController<ForkWorkerInput>).core.createAction('exit')\n      ));\n    })\n  ));\n  return comp as unknown as Broker<WA>;\n}\n\n"]}