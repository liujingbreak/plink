{"version":3,"file":"forkJoin-web-worker.js","sourceRoot":"","sources":["../src/forkJoin-web-worker.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable no-restricted-globals */\nimport * as rx from 'rxjs';\nimport {Action, ActionFunctions, deserializeAction, serializeAction, RxController,\n  actionRelatedToAction, InferPayload, actionRelatedToPayload} from './control';\nimport {ReactorComposite, InferFuncReturnEvents} from './epic';\nimport {Broker, ForkWorkerInput, ForkWorkerOutput} from './types';\nimport {DuplexOptions} from './duplex';\n// import {createBroker} from './node-worker-broker';\n\nexport function createWorkerControl<I extends ActionFunctions = Record<string, never>>(isInWorker: boolean, opts?: DuplexOptions<ForkWorkerInput & ForkWorkerOutput>) {\n  const inputTableFor = ['exit'] as const;\n  const outputTableFor = ['log', 'warn'] as const;\n  let broker: Broker | undefined;\n\n  const [workerNo$, actionMsg$, dispatchStop$] = isInWorker ?\n    initWorker() :\n    [rx.of('main') as rx.Observable<string | number>, rx.EMPTY as rx.Observable<Action<any>>, new rx.Subject<void>()] as const;\n\n  return workerNo$.pipe(\n    rx.map(workerNo => {\n      const logPrefix = '[Worker:' + (!isInWorker ? 'main]' : workerNo + ']');\n      const comp = new ReactorComposite<ForkWorkerInput, ForkWorkerOutput, typeof inputTableFor, typeof outputTableFor>({\n        ...opts,\n        name: logPrefix,\n        inputTableFor,\n        outputTableFor,\n        debug: opts?.debug,\n        log: !isInWorker ? opts?.log : (...args) => self.postMessage({type: 'log', p: args}),\n        debugExcludeTypes: ['log', 'warn'],\n        logStyle: 'noParam'\n      });\n      const {r, i, o} = comp;\n      const latest = comp.inputTable;\n      const lo = comp.outputTable.l;\n\n      if (isInWorker) {\n        r('exit', latest.l.exit.pipe(\n          rx.map(() => {\n            comp.destory();\n            dispatchStop$.next();\n          })\n        ));\n\n        r('Pass worker wait and awake message to broker', rx.merge(\n          o.at.wait,\n          o.at.stopWaiting,\n          o.at.returned\n        ).pipe(\n          rx.map(action => {\n            self.postMessage(serializeAction(action));\n          })\n        ));\n\n        r(lo.log.pipe(\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n          rx.map(([, ...p]) => postMessage({type: 'log', p: [logPrefix, ...p]}))\n        ));\n      } else {\n        r(rx.merge(lo.log, lo.warn).pipe(\n          // eslint-disable-next-line no-console\n          rx.map(([, ...p]) => (opts?.log ?? console.log)(logPrefix, ...p))\n        ));\n      }\n      r('On output \"fork\" request message', o.at.fork.pipe(\n        rx.mergeMap(act => {\n          const {p: [wrappedAct]} = act;\n          const chan = new MessageChannel();\n          const error$ = new rx.Observable<any>(sub => {\n            chan.port1.onmessageerror = err => sub.next(err);\n            return () => chan.port1.onmessageerror = null;\n          });\n          return rx.merge(\n            new rx.Observable<MessageEvent<any>['data']>(sub => {\n              chan.port1.onmessage = msg => sub.next(msg.data);\n              return () => chan.port1.onmessage = null;\n            }).pipe(\n              rx.map(event => deserializeAction(event, i)),\n              rx.take(1),\n              rx.takeUntil(rx.merge(error$, error$))\n            ),\n            new rx.Observable<void>(_sub => {\n              if (isInWorker) {\n                const forkByBroker = o.createAction('forkByBroker', wrappedAct, chan.port2);\n                postMessage(serializeAction(forkByBroker), '*', [chan.port2]);\n              } else {\n                o.dp.forkByBroker(wrappedAct, chan.port2);\n              }\n            })\n          );\n        })\n      ));\n\n      r('On recieving \"being forked\" message, wait for fork action returns', i.pt.onFork.pipe(\n        rx.mergeMap(([, origAct, port]) => {\n          const origId = origAct.i;\n          deserializeAction(origAct, i);\n          return o.core.action$.pipe(\n            actionRelatedToAction(origId),\n            rx.take(1),\n            rx.map(action => {\n              const {p} = action;\n              if (hasReturnTransferable(p)) {\n                const [{transferList}] = p;\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                (p[0] as any).transferList = null;\n                (port as MessagePort).postMessage(serializeAction(action), transferList);\n              } else {\n                (port as MessagePort).postMessage(serializeAction(action));\n              }\n              o.dp.returned();\n            })\n          );\n        })\n      ));\n\n      r('Pass error to broker', comp.error$.pipe(\n        rx.map(([label, err]) => {\n          if (isInWorker) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            self.postMessage({error: {label, detail: err}});\n          } else if (broker) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            broker.o.dp.onWorkerError(-1, {label, detail: err});\n          }\n        })\n      ));\n      actionMsg$.pipe(\n        rx.tap(action => deserializeAction(action, i)),\n        rx.takeUntil(dispatchStop$)\n      ).subscribe();\n\n      return comp as unknown as ReactorComposite<ForkWorkerInput & I, ForkWorkerOutput>;\n    })\n  );\n}\n\nfunction initWorker() {\n  const workerNo$ = new rx.ReplaySubject<string | number>(1);\n  const actionMsg$ = new rx.ReplaySubject<Action<any>>(5);\n  const stop$ = new rx.Subject<void>();\n\n  const handler = (event: MessageEvent<{type?: string; data: number}>) => {\n    const msg = event.data;\n    if (msg.type === 'ASSIGN_WORKER_NO') {\n      self.postMessage({type: 'WORKER_READY'});\n      workerNo$.next(msg.data);\n    } else {\n      const act = event as unknown as Action<any>;\n      actionMsg$.next(act);\n    }\n  };\n  /* eslint-disable no-restricted-globals */\n  addEventListener('message', handler);\n  stop$.pipe(\n    rx.map(() => self.removeEventListener('message', handler)),\n    rx.take(1)\n  ).subscribe();\n\n  return [workerNo$.asObservable(), actionMsg$.asObservable(), stop$] as const;\n}\n\nexport function reativizeRecursiveFuncs<\n  I extends ActionFunctions,\n  O extends ActionFunctions,\n  LI extends ReadonlyArray<keyof I>,\n  LO extends ReadonlyArray<keyof O>,\n  // eslint-disable-next-line space-before-function-paren\n  F extends {[s: string]: (...a: any[]) => any}\n>(comp: ReactorComposite<I, O, LI, LO>, fObject: F) {\n  comp.reactivize(fObject);\n  return comp as unknown as ReactorComposite< InferFuncReturnEvents<F> & I & F, InferFuncReturnEvents<F> & O, LI, LO >;\n}\n\nexport function fork< I extends ActionFunctions, O extends ForkWorkerOutput, K extends string & keyof I, R extends keyof I = `${K}Resolved`>(\n  comp: ReactorComposite<I, O>,\n  actionType: K & string, params: InferPayload<I[K]>,\n  resActionType?: R\n): Promise<InferPayload<I[R]>[0]> {\n  const forkedAction = comp.o.createAction(actionType, ...params);\n  const forkDone = rx.firstValueFrom(comp.i.pt[(resActionType ?? (actionType + 'Resolved')) as keyof I].pipe(\n    actionRelatedToPayload(forkedAction.i),\n    rx.map(([, res]) => res)\n  ));\n  (comp.o as unknown as RxController<ForkWorkerOutput>).dp.fork(forkedAction);\n  return forkDone;\n}\n\nexport type WebForkTransferablePayload<T = unknown> = {\n  content: T;\n  transferList: (ArrayBuffer | MessagePort)[];\n};\n\nfunction hasReturnTransferable(payload: Action<any>['p']): payload is [WebForkTransferablePayload, ...unknown[]] {\n  return Array.isArray((payload[0] as WebForkTransferablePayload | undefined)?.transferList);\n}\n"]}