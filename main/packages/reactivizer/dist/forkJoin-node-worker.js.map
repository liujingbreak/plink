{"version":3,"file":"forkJoin-node-worker.js","sourceRoot":"","sources":["../src/forkJoin-node-worker.ts"],"names":[],"mappings":"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","sourcesContent":["import {parentPort, MessageChannel as NodeMessagechannel, threadId, isMainThread} from 'worker_threads';\nimport * as rx from 'rxjs';\nimport {Action, ActionFunctions, deserializeAction, serializeAction, nameOfAction, RxController} from './control';\nimport {ReactorComposite, InferFuncReturnEvents} from './epic';\nimport {ForkWorkerInput, ForkWorkerOutput} from './types';\nimport {Broker, createBroker} from './node-worker-broker';\n\nexport function createWorkerControl<I extends ActionFunctions = Record<string, never>>() {\n  // eslint-disable-next-line no-console\n  console.log('create worker control');\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  const ctx = new ReactorComposite<ForkWorkerInput, ForkWorkerOutput<I>>({debug: '[Thread]' + (isMainThread ? 'main' : threadId)});\n  let broker: Broker<I> | undefined;\n\n  ctx.startAll();\n  const {r, i, o} = ctx;\n  const latest = i.createLatestPayloadsFor('exit');\n\n  if (parentPort) {\n    const handler = (event: {type?: string; data: number}) => {\n      const msg = event;\n      if (msg.type === 'ASSIGN_WORKER_NO') {\n        parentPort!.postMessage({type: 'WORKER_READY'});\n      } else {\n        const act = event as unknown as Action<ForkWorkerInput>;\n        deserializeAction(act, i);\n      }\n    };\n    /* eslint-disable no-restricted-globals */\n    parentPort?.on('message', handler);\n    r('exit', latest.exit.pipe(\n      rx.map(() => {\n        i.dp.stopAll();\n        parentPort?.off('message', handler);\n      })\n    ));\n  }\n  r('On output \"fork\" request message', o.at.fork.pipe(\n    rx.mergeMap(act => {\n      const {p: [wrappedAct]} = act;\n      const wrappedActId = wrappedAct.i;\n      const wrappedActCompletedType = nameOfAction(wrappedAct) + 'Completed';\n      const chan = new NodeMessagechannel();\n      act.p[1] = chan.port2;\n      const error$ = rx.fromEventPattern(\n        h => chan.port1.on('messageerror', h),\n        h => chan.port1.off('messageerror', h)\n      );\n      const close$ = rx.fromEventPattern(\n        h => chan.port1.on('close', h),\n        h => chan.port1.off('close', h)\n      );\n      return rx.merge(\n        rx.fromEventPattern(\n          h => chan.port1.on('message', h),\n          h => chan.port1.off('message', h)\n        ).pipe(\n          rx.map(event => deserializeAction(event, i)),\n          rx.takeUntil(rx.merge(\n            error$,\n            close$,\n            (i as RxController<any>).pt[wrappedActCompletedType].pipe(\n              rx.filter(([, callerId]) => callerId === wrappedActId)\n            )))\n        ),\n        new rx.Observable<void>(_sub => {\n          if (parentPort) {\n            act = serializeAction(act);\n            parentPort.postMessage(act, [chan.port2]);\n          } else {\n            if (broker == null) {\n              broker = createBroker<I>(i, {debug: 'ForkJoin-broker'});\n              o.dp.brokerCreated(broker);\n            }\n            broker.i.dp.fork(wrappedAct);\n          }\n        })\n      );\n    })\n  ));\n\n  r('On recieving \"being forked\" message, wait for fork action returns', i.pt.fork.pipe(\n    rx.mergeMap(([, origAct, port]) => {\n      const origId = origAct.i;\n      deserializeAction(origAct, i);\n      const origType = nameOfAction(origAct);\n      const typeOfResolved = origType + 'Resolved';\n      const typeOfCompleted = origType + 'Completed';\n      return rx.merge(\n        (o as RxController<any>).at[typeOfResolved].pipe(\n          rx.filter(({p: [_ret, callerId]}) => callerId === origId),\n          rx.map(action => [action, false] as const)\n        ),\n        (o as RxController<any>).at[typeOfCompleted].pipe(\n          rx.filter(({p: [callerId]}) => callerId === origId),\n          rx.map(action => [action, true] as const)\n        )\n      ).pipe(\n        rx.map(([action, isCompleted]) => {\n          port!.postMessage(serializeAction(action));\n          if (isCompleted) {\n            port!.close();\n          }\n          return isCompleted;\n        }),\n        rx.takeWhile(isComplete => !isComplete)\n      );\n    })\n  ));\n  return ctx as unknown as ReactorComposite<I & ForkWorkerInput, ForkWorkerOutput<I>>;\n}\n\nexport function reativizeRecursiveFuncs<\n  I extends ActionFunctions,\n  O extends ActionFunctions,\n  // eslint-disable-next-line space-before-function-paren\n  F extends {[s: string]: (...a: any[]) => any}\n>(ctx: ReactorComposite<I, O>, fObject: F) {\n  ctx.reactivize(fObject);\n  return ctx as ReactorComposite<InferFuncReturnEvents<F> & I & F, InferFuncReturnEvents<F> & O>;\n}\n"]}