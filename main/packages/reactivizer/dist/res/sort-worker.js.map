{"version":3,"file":"sort-worker.js","sourceRoot":"","sources":["../../src/res/sort-worker.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,yCAA2B;AAC3B,kEAAqF;AAErF,MAAM,GAAG,GAAG,IAAA,0CAAmB,GAAE,CAAC;AAErB,QAAA,WAAW,GAAG;IACzB,KAAK,CAAC,IAAI,CAAC,GAAsB,EAAE,MAAM,GAAG,CAAC,EAAE,GAAW;QACxD,MAAM,GAAG,GAAG,IAAI,YAAY,CAAC,GAAG,EAAE,MAAM,EAAE,GAAG,CAAC,CAAC;QAC/C,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,MAAM,EAAE,GAAG,CAAC,CAAC;QACjC,IAAI,GAAG,CAAC,MAAM,GAAG,CAAC,EAAE;YAClB,MAAM,cAAc,GAAG,CAAC,CAAC;YACzB,MAAM,WAAW,GAAG,GAAG,CAAC,MAAM,IAAI,CAAC,CAAC;YAEpC,MAAM,eAAe,GAAG,WAAW,CAAC;YACpC,MAAM,YAAY,GAAG,GAAG,CAAC,MAAM,GAAG,WAAW,CAAC;YAE9C,MAAM,UAAU,GAAG,cAAM,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,eAAe,EAAE,YAAY,CAAC,CAAC,CAAC;YAC5F,MAAM,QAAQ,GAAG,EAAE,CAAC,cAAc,CAAC,cAAM,CAAC,CAAC,CAAC,EAAE,CAAC,YAAY,CAAC,IAAI,CAC9D,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,AAAD,EAAG,QAAQ,CAAC,EAAE,EAAE,CAAC,UAAU,CAAC,CAAC,KAAK,QAAQ,CAAC,EACxD,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CACzB,CAAC,CAAC;YACH,cAAM,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAE7B,MAAM,mBAAW,CAAC,IAAI,CAAC,GAAG,EAAE,cAAc,EAAE,WAAW,CAAC,CAAC;YACzD,sDAAsD;YACtD,MAAM,QAAQ,CAAC;YACf,mBAAW,CAAC,KAAK,CAAC,GAAG,EAAE,cAAc,EAAE,WAAW,EAAE,GAAG,EAAE,eAAe,EAAE,YAAY,CAAC,CAAC;YACxF,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,MAAM,EAAE,GAAG,CAAC,CAAC;SAE3C;aAAM;YACL,IAAI,YAAY,CAAC,GAAG,EAAE,MAAM,EAAE,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;YAC1C,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,MAAM,EAAE,GAAG,CAAC,CAAC;SACpC;IACH,CAAC;IAED,KAAK,CAAC,IAAuB,EAAE,OAAO,GAAG,CAAC,EAAE,IAAY,EAAE,KAAwB,EAAE,OAAO,GAAG,CAAC,EAAE,IAAY;QAC3G,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;IACrD,CAAC;CACF,CAAC;AAEW,QAAA,MAAM,GAAG,IAAA,8CAAuB,EAAC,GAAG,EAAE,mBAAW,CAAC,CAAC","sourcesContent":["import * as rx from 'rxjs';\nimport {createWorkerControl, reativizeRecursiveFuncs} from '../forkJoin-node-worker';\n\nconst ctl = createWorkerControl();\n\nexport const sortActions = {\n  async sort(buf: SharedArrayBuffer, offset = 0, len: number): Promise<void> {\n    const arr = new Float32Array(buf, offset, len);\n    console.log('sort', offset, len);\n    if (arr.length > 3) {\n      const leftPartOffset = 0;\n      const leftPartLen = arr.length >> 1;\n\n      const rightPartOffset = leftPartLen;\n      const rightpartLen = arr.length - leftPartLen;\n\n      const sortAction = sorter.i.core.createAction('sort', [buf, rightPartOffset, rightpartLen]);\n      const forkDone = rx.firstValueFrom(sorter.i.pt.sortResolved.pipe(\n        rx.filter(([, , callerId]) => sortAction.i === callerId),\n        rx.map(([, res]) => res)\n      ));\n      sorter.o.dp.fork(sortAction);\n\n      await sortActions.sort(buf, leftPartOffset, leftPartLen);\n      // sorter.i.dp.sort(arr, leftPartOffset, leftPartLen);\n      await forkDone;\n      sortActions.merge(buf, leftPartOffset, leftPartLen, buf, rightPartOffset, rightpartLen);\n      console.log('return merged', offset, len);\n\n    } else {\n      new Float32Array(buf, offset, len).sort();\n      console.log('return', offset, len);\n    }\n  },\n\n  merge(_buf: SharedArrayBuffer, offset1 = 0, len1: number, _arr2: SharedArrayBuffer, offset2 = 0, len2: number) {\n    console.log('merge', offset1, len1, offset2, len2);\n  }\n};\n\nexport const sorter = reativizeRecursiveFuncs(ctl, sortActions);\n\n"]}