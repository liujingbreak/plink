{"version":3,"file":"sort-comparator-interf.js","sourceRoot":"","sources":["../../src/res/sort-comparator-interf.ts"],"names":[],"mappings":";;;AACA,kCAAyC;AAgCzC,MAAa,iBAAiB;IAK5B;QAFU,kBAAa,GAAG,IAAI,uBAAgB,EAAqD,CAAC;QAGlG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;QAClC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;QACnC,iCAAiC;IACnC,CAAC;IAED,OAAO,CAAC,CAAS,EAAE,CAAS;QAC1B,OAAO,CAAC,GAAG,CAAC,CAAC;IACf,CAAC;IAED,gBAAgB,CAAC,GAAoC,EAAE,MAAe,EAAE,GAAY;QAClF,OAAO,MAAM,IAAI,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC;YACpC,IAAI,WAAW,CAAC,GAAG,EAAE,MAAM,GAAG,WAAW,CAAC,iBAAiB,EAAE,GAAG,CAAC,CAAC,CAAC;YACnE,IAAI,WAAW,CAAC,GAAG,CAAC,CAAC;IACzB,CAAC;IAED,uBAAuB,CAAC,GAAW;QACjC,OAAO,IAAI,WAAW,CAAC,GAAG,GAAG,WAAW,CAAC,iBAAiB,CAAC,CAAC;IAC9D,CAAC;CACF;AAxBD,8CAwBC;AAED,4DAA4D","sourcesContent":["import {RxController} from '../control';\nimport {ReactorComposite} from '../epic';\n\ninterface ForkSortComparatorInput {\n  /** Tells whether current context is the main worker thread or a forked worker.\n  * In case current thread is main, it's comparator's obligation to dispatch `setDataForWorkers` action\n  * with proper shared data\n  */\n  setIsMain(yes: boolean): void;\n\n  /** If current is in a forked worker, will recieve shared \"workerData\" */\n  onWorkerData<T>(key: string, data: T): void;\n}\n\ninterface ForkSortComparatorOutput {\n  setDataForWorkers(key: string, data: SharedArrayBuffer): void;\n}\n\nexport type WritableArray = {\n  [index: number]: number;\n  length: number;\n  sort(cmpFn?: (a: number, b: number) => number): WritableArray;\n} & Iterable<number>;\n\nexport interface ForkSortComparator<D extends WritableArray> {\n  compare(a: D[number], b: D[number]): number;\n  createTypedArray(buf: SharedArrayBuffer | ArrayBuffer, offset?: number, len?: number): D;\n  createArrayBufferOfSize(numOfElement: number): ArrayBuffer;\n\n  input: ReactorComposite<ForkSortComparatorInput, ForkSortComparatorOutput>['i'];\n  output: ReactorComposite<ForkSortComparatorInput, ForkSortComparatorOutput>['o'];\n}\n\nexport class DefaultComparator implements ForkSortComparator<Uint32Array> {\n  input: RxController<ForkSortComparatorInput>;\n  output: ReactorComposite<ForkSortComparatorInput, ForkSortComparatorOutput>['o'];\n  protected compositeCtrl = new ReactorComposite<ForkSortComparatorInput, ForkSortComparatorOutput>();\n\n  constructor() {\n    this.input = this.compositeCtrl.i;\n    this.output = this.compositeCtrl.o;\n    // this.compositeCtrl.startAll();\n  }\n\n  compare(a: number, b: number): number {\n    return a - b;\n  }\n\n  createTypedArray(buf: SharedArrayBuffer | ArrayBuffer, offset?: number, len?: number): Uint32Array {\n    return offset != null && len != null ?\n      new Uint32Array(buf, offset * Uint32Array.BYTES_PER_ELEMENT, len) :\n      new Uint32Array(buf);\n  }\n\n  createArrayBufferOfSize(num: number) {\n    return new ArrayBuffer(num * Uint32Array.BYTES_PER_ELEMENT);\n  }\n}\n\n// export const defaultComparator = new DefaultComparator();\n"]}