{"version":3,"file":"rx-utils.js","sourceRoot":"","sources":["../rx-utils.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * redux-observable like async reactive actions, side effect utilities\n * https://redux-observable.js.org/\n */\n\nimport {Observable, Subject} from 'rxjs';\nimport {filter, tap, share} from 'rxjs/operators';\n\ntype Plen<T> = (T extends (...a: infer A) => any ? A : [])['length'];\n\nexport type ActionTypes<AC> = {\n  [K in keyof AC]: {\n    type: K;\n    payload: InferParam<AC[K]>;\n  };\n};\n\n\ntype InferParam<F> = Plen<F> extends 1 | 0 ?\n  (F extends (a: infer A) => any ? A : unknown)\n  :\n  Plen<F> extends 2 ? F extends (...p: infer P) => any ? P : unknown\n    :\n    Plen<F> extends 1 | 2 ?\n      F extends (a: infer A, b: infer B) => any ?\n        A | [A, B]\n        :\n        F extends (...p: infer P) => any ? P : unknown\n      :\n      F extends (...p: infer P) => any ? P : unknown;\n\nlet SEQ = 0;\n/**\n * create Stream of action stream and action dispatcher,\n * similar to redux-observable Epic concept,\n * What you can get from this function are:\n *   1. An action observable (stream),\n *      so that you can subscribe to it and react with fantastic Reactive operators\n *      to handle complex async logic\n *\n *   2. An action dispatcher,\n *      so that you can emit new action along with paramters (payload) back to action observale stream.\n *\n *   3. An RxJs \"filter()\" operator to filter action by its type, it provides better Typescript\n *   type definition for downstream action compare bare \"filter()\"\n */\n// eslint-disable-next-line space-before-function-paren\nexport function createActionStream<AC extends Record<string, ((...payload: any[]) => void)>>(actionCreator: AC, debug?: boolean) {\n  const dispatcher = {} as AC;\n  const actionUpstream = new Subject<ActionTypes<AC>[keyof AC]>();\n  const typePrefix = SEQ++ + '/';\n  for (const type of Object.keys(actionCreator)) {\n    const dispatch = (...params: any[]) => {\n      const action = {\n        type: typePrefix + type,\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        payload: params.length === 1 ? params[0] : params.length === 0 ? undefined : params\n      } as ActionTypes<AC>[keyof AC];\n      actionUpstream.next(action);\n    };\n    dispatcher[type as keyof AC] = dispatch as AC[keyof AC];\n  }\n\n  const action$ = debug\n    ? actionUpstream.pipe(\n      tap(typeof window !== 'undefined'\n        ? action => {\n          // eslint-disable-next-line no-console\n          console.log('%c rx:action ', 'color: white; background: #8c61ff;', action.type);\n        }\n        // eslint-disable-next-line no-console\n        : action => console.log('rx:action', action.type)),\n      share()\n    )\n    : actionUpstream;\n\n  return {\n    dispatcher,\n    action$,\n    ofType: createOfTypeOperator<AC>(typePrefix),\n    isActionType: createIsActionTypeFn<AC>(typePrefix)\n  };\n}\n\ntype SimpleActionDispatchFactory<AC> = <K extends keyof AC>(type: K) => AC[K];\n\n/**\n * Unlike `createActionStream()`, this function only needs an \"Action creator\" type as generic type parameter,\n * instead of an actual empty \"Action creator\" object to be parameter\n *\n * create Stream of action stream and action dispatcher,\n * similar to redux-observable Epic concept,\n * What you can get from this function are:\n *   1. An action observable (stream),\n *      so that you can subscribe to it and react with fantastic Reactive operators\n *      to handle complex async logic\n *                                                                                                      \n *   2. An action dispatcher,\n *      so that you can emit new action along with paramters (payload) back to action observale stream.\n *                                                                                                      \n *   3. An RxJs \"filter()\" operator to filter action by its type, it provides better Typescript\n *   type definition for downstream action compare bare \"filter()\"\n */\n// eslint-disable-next-line space-before-function-paren\nexport function createActionStreamByType<AC extends Record<string, ((...payload: any[]) => void)>>(opt: {\n  debug?: string | boolean;\n  log?: (msg: string, ...objs: any[]) => unknown;\n} = {}) {\n  const actionUpstream = new Subject<ActionTypes<AC>[keyof AC]>();\n  const dispatcher = {} as AC;\n  const typePrefix = SEQ++ + '/';\n\n  function dispatchFactory(type: keyof AC) {\n    if (Object.prototype.hasOwnProperty.call(dispatcher, type)) {\n      return dispatcher[type];\n    }\n    const dispatch = (...params: any[]) => {\n      const action = {\n        type: typePrefix + type,\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        payload: params.length === 1 ? params[0] : params.length === 0 ? undefined : params\n      } as ActionTypes<AC>[keyof AC];\n      actionUpstream.next(action);\n    };\n    dispatcher[type] = dispatch as AC[keyof AC];\n    return dispatch;\n  }\n  const dispatcherProxy = new Proxy<AC>({} as AC, {\n    get(target, key, rec) {\n      return dispatchFactory(key as keyof AC);\n    }\n  });\n\n  const debugName = typeof opt.debug === 'string' ? `[${opt.debug}]` : '';\n  const action$ = opt.debug\n    ? actionUpstream.pipe(\n      opt.log ?\n        tap(action => opt.log!(debugName + 'rx:action', action.type)) :\n        typeof window !== 'undefined' ?\n          tap(action => {\n          // eslint-disable-next-line no-console\n            console.log(`%c ${debugName}rx:action `, 'color: white; background: #8c61ff;', action.type);\n          })\n          :\n          // eslint-disable-next-line no-console\n          tap(action => console.log(debugName + 'rx:action', action.type)),\n      share()\n    )\n    : actionUpstream;\n\n  return {\n    dispatcher: dispatcherProxy,\n    dispatchFactory: dispatchFactory as SimpleActionDispatchFactory<AC>,\n    action$,\n    ofType: createOfTypeOperator<AC>(typePrefix),\n    isActionType: createIsActionTypeFn<AC>(typePrefix)\n  };\n}\n\nexport interface OfTypeFn<AC> {\n  <T extends keyof AC>(type: T): (upstream: Observable<any>) => Observable<ActionTypes<AC>[T]>;\n  <T extends keyof AC, T2 extends keyof AC>(type: T, type2: T2): (\n    upstream: Observable<any>\n  ) => Observable<ActionTypes<AC>[T] | ActionTypes<AC>[T2]>;\n  <T extends keyof AC, T2 extends keyof AC, T3 extends keyof AC>(type: T, type2: T2, type3: T3): (\n    upstream: Observable<any>\n  ) => Observable<ActionTypes<AC>[T] | ActionTypes<AC>[T2] | ActionTypes<AC>[T3]>;\n  <T extends keyof AC>(...types: T[]): (upstream: Observable<any>) => Observable<ActionTypes<AC>[T]>;\n}\n\nfunction createIsActionTypeFn<AC>(prefix: string) {\n  return function isActionType<K extends keyof AC>(action: {type: unknown}, type: K): action is ActionTypes<AC>[K] {\n    return action.type === prefix + type;\n  };\n}\n\n/** create rx a operator to filter action by action.type */\nfunction createOfTypeOperator<AC>(typePrefix = ''): OfTypeFn<AC> {\n  return <T extends keyof AC>(...types: T[]) =>\n    (upstream: Observable<any>) => {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      return upstream.pipe(\n        filter((action) : action is ActionTypes<AC>[T] => types.some((type) => action.type === typePrefix + type)),\n        share()\n      ) ;\n    };\n}\n"]}