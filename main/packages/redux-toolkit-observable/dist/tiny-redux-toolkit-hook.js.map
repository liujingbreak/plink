{"version":3,"file":"tiny-redux-toolkit-hook.js","sourceRoot":"","sources":["../tiny-redux-toolkit-hook.ts"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\nimport * as op from 'rxjs/operators';\nimport * as rx from 'rxjs';\nimport {createSlice, Reducers, Slice, SliceOptions, EpicFactory, OfTypeFn, Epic} from './tiny-redux-toolkit';\nexport * from './tiny-redux-toolkit';\n\nexport interface BaseComponentState<Props> {\n  componentProps?: Props;\n  error?: Error;\n}\n\ntype CompPropsSyncReducer<Props, S extends BaseComponentState<Props>> = {\n  _syncComponentProps(s: S, payload: Props): void;\n  _willUnmount(s: S): void;\n};\n\nfunction withBaseReducers<Props, S extends BaseComponentState<Props>, R extends Reducers<S>>(origReducers: R):\nCompPropsSyncReducer<Props, S> & R {\n  const reducers = {\n    _syncComponentProps(s: S, payload: Props) {\n      s.componentProps = {...payload};\n    },\n    _willUnmount(s: S) {},\n    ...origReducers\n  };\n  return reducers;\n}\n\nexport type EpicFactory4Comp<Props, S extends BaseComponentState<Props>, R extends Reducers<S>> =\n  (slice: Slice<S, R & CompPropsSyncReducer<Props, S>>, ofType: OfTypeFn<S, R & CompPropsSyncReducer<Props, S>>) => Epic<S> | void;\n\n/**\n * Unlike useTinyReduxTookit, useTinyRtk() accepts a State which extends BaseComponentState, \n *  useTinyRtk() will automatically create an extra reducer \"_syncComponentProps\" for shallow coping\n * React component's properties to this internal RTK store\n * @param optsFactory \n * @param props \n * @param epicFactories \n * @returns \n */\nexport function useTinyRtk<Props, S extends BaseComponentState<Props>, R extends Reducers<S>>(\n    optsFactory: () => SliceOptions<S, R>, props: Props, ...epicFactories: Array<EpicFactory4Comp<Props, S, R> | null | undefined>\n  ): [state: S, slice: Slice<S, R & CompPropsSyncReducer<Props, S>>] {\n\n    const extendOptsFactory = React.useCallback(() => {\n      const opts = optsFactory();\n\n      return {\n        ...opts,\n        reducers: withBaseReducers<Props, S, typeof opts.reducers>(opts.reducers)\n      };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    React.useEffect(() => () => {\n      (stateAndSlice[1] as Slice<S, CompPropsSyncReducer<Props, S>>).actionDispatcher._willUnmount();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const stateAndSlice = useTinyReduxTookit(extendOptsFactory, ...epicFactories);\n\n    React.useEffect(() => {\n      stateAndSlice[1].actionDispatcher._syncComponentProps(props);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, Object.values(props));\n\n    return stateAndSlice;\n}\n/**\n * For performance reason, better define opts.reducers outside of component rendering function\n * @param opts \n * @returns \n */\nexport function useTinyReduxTookit<S extends {error?: Error}, R extends Reducers<S>>(\n  optsFactory: () => SliceOptions<S, R>, ...epicFactories: Array<EpicFactory<S, R> | null | undefined>\n): [state: S, slice: Slice<S, R>] {\n\n  // To avoid a mutatable version is passed in\n  // const clonedState = clone(opts.initialState);\n  const willUnmountSub = React.useMemo(() => new rx.ReplaySubject<void>(1), []);\n  const sliceOptions = React.useMemo(optsFactory, [optsFactory]);\n  const epic$s = React.useMemo<rx.BehaviorSubject<EpicFactory<S, R> | null | undefined>[]>(() => {\n    return epicFactories.map(() => new rx.BehaviorSubject<EpicFactory<S, R> | null | undefined>(null));\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const [state, setState] = React.useState<S>(sliceOptions.initialState);\n  // const [slice, setSlice] = React.useState<Slice<S, R>>();\n  const slice = React.useMemo<Slice<S, R>>(() => {\n    const slice = createSlice(sliceOptions);\n    slice.state$.pipe(\n      op.distinctUntilChanged(),\n      // op.observeOn(rx.animationFrameScheduler), // To avoid changes being batched by React setState()\n      op.tap(changed => setState(changed)),\n      op.takeUntil(willUnmountSub)\n    ).subscribe();\n\n    // Important!!\n    // Epic might contain recurive state changing logic, like subscribing on state$ stream and \n    // change state, it turns out any subscriber that subscribe state$ later than\n    // epic will get a state change event in reversed order !! So epic must be the last one to\n    // subscribe state$ stream\n    for (const epicFac$ of epic$s) {\n      slice.addEpic$(epicFac$);\n    }\n    // Let's fun epic factory as earlier as possible, so that it will not missing\n    // any action dispatched from child component, since child component's useEffect()\n    // runs earlier than parent component's\n    epicFactories.forEach((fac, idx) => epic$s[idx].next(fac));\n    return slice;\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  React.useEffect(() => {\n    epicFactories.forEach((fac, idx) => epic$s[idx].next(fac));\n  }, [epic$s, epicFactories]);\n\n  React.useEffect(() => {\n    // const sub = slice.state$.pipe(\n    //   op.distinctUntilChanged(),\n    //   // Important!!! because this stream is subscribed later than Epic,\n    //   // \"changed\" value might\n    //   // come in reversed order in case of recursive state changing in \"Epic\",\n    //   // so always use getValue() to get latest state\n    //   op.tap(() => setState(slice.state$.getValue()))\n    // ).subscribe();\n    return () => {\n      willUnmountSub.next();\n      willUnmountSub.complete();\n      // sub.unsubscribe();\n      slice.destroy();\n    };\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return [state, slice];\n}\n"]}