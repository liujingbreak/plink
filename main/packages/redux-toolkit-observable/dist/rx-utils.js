"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createActionStream = exports.reselect = void 0;
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
function reselect(selectors, combine) {
    return src => {
        return src.pipe(
        // eslint-disable-next-line @typescript-eslint/no-unsafe-return
        (0, operators_1.map)(s => selectors.map(selector => selector(s))), (0, operators_1.distinctUntilChanged)((a, b) => a.every((result, i) => result === b[i])), (0, operators_1.map)(results => combine(...results)));
    };
}
exports.reselect = reselect;
/**
 * create Stream of action stream and action dispatcher,
 * similar to redux-observable Epic concept,
 * What you can get from this function are:
 *   1. An action observable (stream),
 *      so that you can subscribe to it and react with fantastic Reactive operators
 *      to handle complex async logic
 *
 *   2. An action dispatcher,
 *      so that you can emit new action along with paramters (payload) back to action observale stream.
 *
 *   3. An RxJs "filter()" operator to filter action by its type, it provides better Typescript
 *   type definition for downstream action compare bare "filter()"
 */
function createActionStream(actionCreator, debug) {
    const dispatcher = {};
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
    const actionUpstream = new rxjs_1.Subject();
    for (const type of Object.keys(actionCreator)) {
        dispatcher[type] = (...params) => {
            const action = {
                type,
                payload: params.length === 1 ? params[0] : params
            };
            actionUpstream.next(action);
        };
    }
    const action$ = debug
        ? actionUpstream.pipe((0, operators_1.tap)(action => {
            // eslint-disable-next-line no-console
            console.log('%c rx:action ', 'color: white; background: #8c61ff;', action.type);
        }), (0, operators_1.share)())
        : actionUpstream;
    return {
        dispatcher,
        action$,
        ofType: createOfTypeOperator(actionCreator)
    };
}
exports.createActionStream = createActionStream;
/** create rx a operator to filter action by action.type */
function createOfTypeOperator(_actionCreator) {
    return (type) => (upstream) => {
        return upstream.pipe((0, operators_1.filter)(action => action.type === type));
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicngtdXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9yeC11dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwrQkFBMkQ7QUFDM0QsOENBQTZFO0FBRTdFLFNBQWdCLFFBQVEsQ0FBMkIsU0FFbEQsRUFBRSxPQUEwRDtJQUMzRCxPQUFPLEdBQUcsQ0FBQyxFQUFFO1FBQ1gsT0FBTyxHQUFHLENBQUMsSUFBSTtRQUNiLCtEQUErRDtRQUMvRCxJQUFBLGVBQUcsRUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQW1DLENBQUMsRUFDbEYsSUFBQSxnQ0FBb0IsRUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDdkUsSUFBQSxlQUFHLEVBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUNwQyxDQUFDO0lBQ0osQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQVhELDRCQVdDO0FBY0Q7Ozs7Ozs7Ozs7Ozs7R0FhRztBQUNILFNBQWdCLGtCQUFrQixDQUFLLGFBQWlCLEVBQUUsS0FBZTtJQUN2RSxNQUFNLFVBQVUsR0FBRyxFQUFRLENBQUM7SUFDNUIsbUVBQW1FO0lBQ25FLE1BQU0sY0FBYyxHQUFHLElBQUksY0FBTyxFQUEwQyxDQUFDO0lBQzdFLEtBQUssTUFBTSxJQUFJLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRTtRQUM3QyxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQWEsRUFBRSxFQUFFO1lBQ3RDLE1BQU0sTUFBTSxHQUFHO2dCQUNiLElBQUk7Z0JBQ0osT0FBTyxFQUFFLE1BQU0sQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU07YUFDUixDQUFDO1lBQzVDLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDOUIsQ0FBQyxDQUFDO0tBQ0g7SUFFRCxNQUFNLE9BQU8sR0FBRyxLQUFLO1FBQ25CLENBQUMsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUNYLElBQUEsZUFBRyxFQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ1Qsc0NBQXNDO1lBQ3RDLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLG9DQUFvQyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNwRixDQUFDLENBQUMsRUFDRixJQUFBLGlCQUFLLEdBQUUsQ0FDVjtRQUNQLENBQUMsQ0FBQyxjQUFjLENBQUM7SUFFbkIsT0FBTztRQUNMLFVBQVU7UUFDVixPQUFPO1FBQ1AsTUFBTSxFQUFFLG9CQUFvQixDQUFDLGFBQWEsQ0FBQztLQUM1QyxDQUFDO0FBQ0osQ0FBQztBQTdCRCxnREE2QkM7QUFFRCwyREFBMkQ7QUFDM0QsU0FBUyxvQkFBb0IsQ0FBSyxjQUFrQjtJQUNsRCxPQUFPLENBQXFCLElBQU8sRUFBRSxFQUFFLENBQ3JDLENBQUMsUUFBeUIsRUFBRSxFQUFFO1FBQzVCLE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFBLGtCQUFNLEVBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxDQUFtQyxDQUFDO0lBQ2pHLENBQUMsQ0FBQztBQUNOLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge09wZXJhdG9yRnVuY3Rpb24sIFN1YmplY3QsIE9ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtkaXN0aW5jdFVudGlsQ2hhbmdlZCwgbWFwLCBmaWx0ZXIsIHRhcCwgc2hhcmV9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuZXhwb3J0IGZ1bmN0aW9uIHJlc2VsZWN0PFQsIFIsIFIxLCBSMiwgUjMsIFI0LCBSNT4oc2VsZWN0b3JzOiBbXG4gIChjdXJyZW50OiBUKSA9PiBSMSwgKGN1cnJlbnQ6IFQpID0+IFIyLCAoY3VycmVudDogVCkgPT4gUjMsIChjdXJyZW50OiBUKSA9PiBSNCwgKGN1cnJlbnQ6IFQpID0+IFI1LCAuLi4oKGN1cnJlbnQ6IFQpID0+IGFueSlbXVxuXSwgY29tYmluZTogKC4uLnJlc3VsdHM6IFtSMSwgUjIsIFIzLCBSNCwgUjUsIC4uLmFueVtdXSkgPT4gUik6IE9wZXJhdG9yRnVuY3Rpb248VCwgUj4ge1xuICByZXR1cm4gc3JjID0+IHtcbiAgICByZXR1cm4gc3JjLnBpcGUoXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1yZXR1cm5cbiAgICAgIG1hcChzID0+IHNlbGVjdG9ycy5tYXAoc2VsZWN0b3IgPT4gc2VsZWN0b3IocykpIGFzIFtSMSwgUjIsIFIzLCBSNCwgUjUsIC4uLmFueVtdXSksXG4gICAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgoYSwgYikgPT4gYS5ldmVyeSgocmVzdWx0LCBpKSA9PiByZXN1bHQgPT09IGJbaV0pKSxcbiAgICAgIG1hcChyZXN1bHRzID0+IGNvbWJpbmUoLi4ucmVzdWx0cykpXG4gICAgKTtcbiAgfTtcbn1cblxuLyoqXG4gKiByZWR1eC1vYnNlcnZhYmxlIGxpa2UgYXN5bmMgcmVhY3RpdmUgYWN0aW9ucywgc2lkZSBlZmZlY3QgdXRpbGl0aWVzXG4gKiBodHRwczovL3JlZHV4LW9ic2VydmFibGUuanMub3JnL1xuICovXG5cbmV4cG9ydCB0eXBlIEFjdGlvblR5cGVzPEFDPiA9IHtcbiAgW0sgaW4ga2V5b2YgQUNdOiB7XG4gICAgdHlwZTogSztcbiAgICBwYXlsb2FkOiBBQ1tLXSBleHRlbmRzIChwOiBpbmZlciBQKSA9PiBhbnkgPyBQIDogQUNbS10gZXh0ZW5kcyAoLi4ucDogaW5mZXIgUEFycmF5KSA9PiBhbnkgPyBQQXJyYXkgOiB1bmtub3duO1xuICB9O1xufTtcblxuLyoqXG4gKiBjcmVhdGUgU3RyZWFtIG9mIGFjdGlvbiBzdHJlYW0gYW5kIGFjdGlvbiBkaXNwYXRjaGVyLFxuICogc2ltaWxhciB0byByZWR1eC1vYnNlcnZhYmxlIEVwaWMgY29uY2VwdCxcbiAqIFdoYXQgeW91IGNhbiBnZXQgZnJvbSB0aGlzIGZ1bmN0aW9uIGFyZTpcbiAqICAgMS4gQW4gYWN0aW9uIG9ic2VydmFibGUgKHN0cmVhbSksXG4gKiAgICAgIHNvIHRoYXQgeW91IGNhbiBzdWJzY3JpYmUgdG8gaXQgYW5kIHJlYWN0IHdpdGggZmFudGFzdGljIFJlYWN0aXZlIG9wZXJhdG9yc1xuICogICAgICB0byBoYW5kbGUgY29tcGxleCBhc3luYyBsb2dpY1xuICpcbiAqICAgMi4gQW4gYWN0aW9uIGRpc3BhdGNoZXIsXG4gKiAgICAgIHNvIHRoYXQgeW91IGNhbiBlbWl0IG5ldyBhY3Rpb24gYWxvbmcgd2l0aCBwYXJhbXRlcnMgKHBheWxvYWQpIGJhY2sgdG8gYWN0aW9uIG9ic2VydmFsZSBzdHJlYW0uXG4gKlxuICogICAzLiBBbiBSeEpzIFwiZmlsdGVyKClcIiBvcGVyYXRvciB0byBmaWx0ZXIgYWN0aW9uIGJ5IGl0cyB0eXBlLCBpdCBwcm92aWRlcyBiZXR0ZXIgVHlwZXNjcmlwdFxuICogICB0eXBlIGRlZmluaXRpb24gZm9yIGRvd25zdHJlYW0gYWN0aW9uIGNvbXBhcmUgYmFyZSBcImZpbHRlcigpXCJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUFjdGlvblN0cmVhbTxBQz4oYWN0aW9uQ3JlYXRvcjogQUMsIGRlYnVnPzogYm9vbGVhbikge1xuICBjb25zdCBkaXNwYXRjaGVyID0ge30gYXMgQUM7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWFzc2lnbm1lbnRcbiAgY29uc3QgYWN0aW9uVXBzdHJlYW0gPSBuZXcgU3ViamVjdDxBY3Rpb25UeXBlczxBQz5ba2V5b2YgQWN0aW9uVHlwZXM8QUM+XT4oKTtcbiAgZm9yIChjb25zdCB0eXBlIG9mIE9iamVjdC5rZXlzKGFjdGlvbkNyZWF0b3IpKSB7XG4gICAgZGlzcGF0Y2hlclt0eXBlXSA9ICguLi5wYXJhbXM6IGFueVtdKSA9PiB7XG4gICAgICBjb25zdCBhY3Rpb24gPSB7XG4gICAgICAgIHR5cGUsXG4gICAgICAgIHBheWxvYWQ6IHBhcmFtcy5sZW5ndGggPT09IDEgPyBwYXJhbXNbMF0gOiBwYXJhbXNcbiAgICAgIH0gYXMgQWN0aW9uVHlwZXM8QUM+W2tleW9mIEFjdGlvblR5cGVzPEFDPl07XG4gICAgICBhY3Rpb25VcHN0cmVhbS5uZXh0KGFjdGlvbik7XG4gICAgfTtcbiAgfVxuXG4gIGNvbnN0IGFjdGlvbiQgPSBkZWJ1Z1xuICAgID8gYWN0aW9uVXBzdHJlYW0ucGlwZShcbiAgICAgICAgICAgICAgdGFwKGFjdGlvbiA9PiB7XG4gICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJyVjIHJ4OmFjdGlvbiAnLCAnY29sb3I6IHdoaXRlOyBiYWNrZ3JvdW5kOiAjOGM2MWZmOycsIGFjdGlvbi50eXBlKTtcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIHNoYXJlKClcbiAgICAgICAgICApXG4gICAgOiBhY3Rpb25VcHN0cmVhbTtcblxuICByZXR1cm4ge1xuICAgIGRpc3BhdGNoZXIsXG4gICAgYWN0aW9uJCxcbiAgICBvZlR5cGU6IGNyZWF0ZU9mVHlwZU9wZXJhdG9yKGFjdGlvbkNyZWF0b3IpXG4gIH07XG59XG5cbi8qKiBjcmVhdGUgcnggYSBvcGVyYXRvciB0byBmaWx0ZXIgYWN0aW9uIGJ5IGFjdGlvbi50eXBlICovXG5mdW5jdGlvbiBjcmVhdGVPZlR5cGVPcGVyYXRvcjxBQz4oX2FjdGlvbkNyZWF0b3I6IEFDKSB7XG4gIHJldHVybiA8VCBleHRlbmRzIGtleW9mIEFDPih0eXBlOiBUKSA9PlxuICAgICh1cHN0cmVhbTogT2JzZXJ2YWJsZTxhbnk+KSA9PiB7XG4gICAgICByZXR1cm4gdXBzdHJlYW0ucGlwZShmaWx0ZXIoYWN0aW9uID0+IGFjdGlvbi50eXBlID09PSB0eXBlKSkgYXMgT2JzZXJ2YWJsZTxBY3Rpb25UeXBlczxBQz5bVF0+O1xuICAgIH07XG59XG4iXX0=