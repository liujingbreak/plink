"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable no-console
const worker_threads_1 = require("worker_threads");
let verbose = false;
let initialDone = Promise.resolve();
if (worker_threads_1.workerData) {
    verbose = !!worker_threads_1.workerData.verbose;
    if (worker_threads_1.workerData.initializer) {
        const { file, exportFn } = worker_threads_1.workerData.initializer;
        if (exportFn == null)
            initialDone = Promise.resolve(require(file));
        else
            initialDone = Promise.resolve(require(file)[exportFn]());
    }
    else {
        initialDone = Promise.resolve();
    }
}
if (!worker_threads_1.isMainThread) {
    // eslint-disable-next-line @typescript-eslint/no-misused-promises
    worker_threads_1.parentPort.on('message', executeOnEvent);
}
async function executeOnEvent(data) {
    if (data.exit) {
        if (verbose) {
            // eslint-disable-next-line no-console
            console.log(`[thread-pool] worker ${worker_threads_1.workerData === null || worker_threads_1.workerData === void 0 ? void 0 : worker_threads_1.workerData.id} exit`);
        }
        worker_threads_1.parentPort.off('message', executeOnEvent);
        // Don't call process.exit(0), there might be some unfinished output stream still on-going at this moment.
        return;
    }
    await initialDone;
    if (verbose) {
        // eslint-disable-next-line no-console
        console.log(`[thread-pool] worker ${worker_threads_1.workerData === null || worker_threads_1.workerData === void 0 ? void 0 : worker_threads_1.workerData.id} run`);
    }
    if (data.type !== 'plink:threadPool:task') {
        return;
    }
    try {
        const result = await Promise.resolve(require(data.file)[data.exportFn](...(data.args || [])));
        if (verbose) {
            // eslint-disable-next-line no-console
            console.log(`[thread-pool] worker ${worker_threads_1.workerData === null || worker_threads_1.workerData === void 0 ? void 0 : worker_threads_1.workerData.id} wait`);
        }
        if (result != null && result.transferList) {
            const transferList = result.transferList;
            delete result.transferList;
            worker_threads_1.parentPort.postMessage({ type: 'wait', data: result }, transferList);
        }
        else {
            worker_threads_1.parentPort.postMessage({ type: 'wait', data: result });
        }
    }
    catch (ex) {
        // console.log(`[thread-pool] worker ${workerData?.id} error`, ex);
        // debugger;
        try {
            worker_threads_1.parentPort.postMessage({
                type: 'error',
                data: ex.stack
            });
        }
        catch (err) {
            worker_threads_1.parentPort.postMessage({
                type: 'error',
                data: err.stack
            });
        }
    }
}
//# sourceMappingURL=data:application/json;base64,