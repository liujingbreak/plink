{"version":3,"file":"scan-markdown.js","sourceRoot":"","sources":["scan-markdown.ts"],"names":[],"mappings":";;;;AACA,2BAA2B;AAC3B,wDAAwB;AACxB,oDAAoB;AACpB,+BAA+B;AAE/B,MAAM,GAAG,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,YAAY,GAAG,cAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC;AAE3E,KAAK,UAAU,IAAI,CAAC,GAAW;IACpC,iDAAiD;IACjD,IAAI,CAAC,GAAG;QACN,GAAG,GAAG,cAAI,CAAC,OAAO,EAAE,CAAC;IAEvB,MAAM,MAAM,GAA8B,EAAE,CAAC;IAC7C,MAAM,QAAQ,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;IAE5B,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AACnB,CAAC;AATD,oBASC;AAED,MAAM,OAAO,GAAG,IAAA,gBAAS,EAAC,YAAE,CAAC,OAAO,CAAC,CAAC;AACtC,MAAM,SAAS,GAAG,IAAA,gBAAS,EAAC,YAAE,CAAC,IAAI,CAAC,CAAC;AAGrC,KAAK,UAAU,QAAQ,CAAC,GAAW,EAAE,UAAqC;IACxE,MAAM,WAAW,GAAG,cAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;IACvC,IAAI,WAAW,KAAK,cAAc,IAAI,WAAW,CAAC,UAAU,CAAC,GAAG,CAAC;QAC/D,OAAO,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;IAErC,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;IAEtB,MAAM,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC;SAC9B,IAAI,CAAC,KAAK,EAAC,IAAI,EAAC,EAAE;QACjB,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,EAAC,UAAU,EAAC,EAAE;YAC5D,MAAM,MAAM,GAAG,cAAI,CAAC,OAAO,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;YAC7C,MAAM,IAAI,GAAG,MAAM,SAAS,CAAC,MAAM,CAAC,CAAC;YACrC,IAAI,IAAI,CAAC,MAAM,EAAE,IAAI,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;gBAC3C,IAAI,GAAG,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC;gBAC1B,IAAI,CAAC,GAAG;oBACN,GAAG,GAAG,UAAU,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;gBAC7B,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;aACtB;YACD,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC;QAC5C,CAAC,CAAC,CAAC,CAAC;QACJ,OAAO,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;YAC/D,OAAO,QAAQ,CAAC,MAAO,EAAE,UAAU,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC,CAAC;IACN,CAAC,CAAC,CAAC;IACH,MAAM,UAAU,CAAC;IACjB,OAAO,UAAU,CAAC;AACpB,CAAC","sourcesContent":["\n// import api from '__api';\nimport Path from 'path';\nimport fs from 'fs';\nimport {promisify} from 'util';\nimport _ from 'lodash';\nconst log = require('log4js').getLogger('tool-misc.' + Path.basename(__filename));\n\nexport async function scan(dir: string) {\n  // let globExcludes: string[] = ['node_modules'];\n  if (!dir)\n    dir = Path.resolve();\n\n  const result: {[dir: string]: string[]} = {};\n  await globDirs(dir, result);\n\n  log.info(result);\n}\n\nconst readdir = promisify(fs.readdir);\nconst statAsync = promisify(fs.stat);\n\n\nasync function globDirs(dir: string, collection: {[dir: string]: string[]}): Promise<{[dir: string]: string[]}> {\n  const baseDirName = Path.basename(dir);\n  if (baseDirName === 'node_modules' || baseDirName.startsWith('.'))\n    return Promise.resolve(collection);\n\n  log.info('scan', dir);\n\n  const subDirDone = readdir(dir)\n  .then(async dirs => {\n    const subDirs = await Promise.all(dirs.map(async baseSubDir => {\n      const subDir = Path.resolve(dir, baseSubDir);\n      const stat = await statAsync(subDir);\n      if (stat.isFile() && subDir.endsWith('.md')) {\n        let col = collection[dir];\n        if (!col)\n          col = collection[dir] = [];\n        col.push(baseSubDir);\n      }\n      return stat.isDirectory() ? subDir : null;\n    }));\n    return Promise.all(subDirs.filter(subDir => subDir).map(subDir => {\n      return globDirs(subDir!, collection);\n    }));\n  });\n  await subDirDone;\n  return collection;\n}\n"]}