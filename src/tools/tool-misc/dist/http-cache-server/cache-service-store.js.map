{"version":3,"file":"cache-service-store.js","sourceRoot":"","sources":["cache-service-store.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * To support cluster mode, this module should run inside Master process\n */\nimport http from 'node:http';\nimport {promises, Writable} from 'node:stream';\nimport * as rx from 'rxjs';\nimport * as op from 'rxjs/operators';\nimport {log4File} from '@wfh/plink';\nimport {createActionStreamByType} from '@wfh/redux-toolkit-observable/dist/rx-utils';\n\nconst log = log4File(__filename);\n\n// type MemoStore = {\n//   keyMap: Map<string, {expiration: number; data: any}>;\n// };\n\nexport function startStore() {\n  const action$ = new rx.Subject<'listening' | 'shutdown'>();\n  const req$ = new rx.Subject<[http.IncomingMessage, http.OutgoingMessage]>();\n  const server = http.createServer({keepAlive: true});\n  server.keepAliveTimeout = 60000;\n  server.listen(14401);\n  server.once('listening', () => action$.next('listening'));\n  server.on('error', err => action$.error(err));\n  server.on('request', (req, res) => req$.next([req, res]));\n\n  rx.merge(\n    req$.pipe(\n      op.mergeMap(async ([req, res]) => {\n        log.info(req.url, req.method);\n        if (req.url === '/cache' && req.method === 'POST') {\n          let jsonStr = '';\n          const writable = new Writable({\n            write(chunk, _encoding, callback) {\n              jsonStr += (chunk as Buffer).toString('utf-8');\n              callback(null);\n            },\n            final(cb) {\n              cb(null);\n            }\n          });\n          await promises.pipeline(req, writable);\n          log.info('server', jsonStr);\n          res.end('ok');\n        }\n      }))\n  ).pipe(\n    op.takeUntil(action$.pipe(\n      op.filter(ac => ac === 'shutdown'),\n      op.take(1),\n      op.map(() => {\n        log.info('shuting down');\n        server.close();\n      })\n    )),\n    op.catchError((err, src) => {\n      log.error(err);\n      return src;\n    })\n  ).subscribe();\n\n  return {\n    shutdown() {\n      action$.next('shutdown');\n    },\n    started: action$.pipe(\n      op.filter((act): act is 'listening' => act === 'listening'),\n      op.take(1)\n    ).toPromise()\n  };\n  // const store = new rx.BehaviorSubject<MemoStore>({\n  //   keyMap: new Map()\n  // });\n}\n\ntype ClientMessage = {\n  ping(key: string): void;\n  _done(type: string, key: string): void;\n  setForNonexist(key: string): void;\n  subscribeChange(key: string): void;\n  unsubscribe(key: string): void;\n};\n\nexport function createClient() {\n  const agent = new http.Agent({keepAlive: true});\n  const slice = createActionStreamByType<ClientMessage>();\n  rx.merge(\n    slice.actionOfType('subscribeChange').pipe(\n    ),\n    slice.action$.pipe(\n      op.filter(act => typeof act.payload === 'string'),\n      op.mergeMap(act => new rx.Observable(sub => {\n        log.info('client', act.type);\n        const req = http.request('http://localhost:14401/cache', {\n          method: 'POST',\n          agent\n        }, res => {\n          log.info('client recieving');\n          res.on('end', () => {\n            slice.dispatcher._done(act.type, act.payload as string);\n            sub.complete();\n          });\n          res.resume();\n        });\n        if (req.reusedSocket) {\n          log.info('Socket is reused for', act.type, act.payload);\n        }\n        req.on('error', err => {\n          if (req.reusedSocket && (err as unknown as {code: string}).code === 'ECONNRESET') {\n            log.info('Connection closed by server \"ECONNRESET\", retry request');\n            (slice.dispatchFactory(act.type) as any)(act.payload);\n          } else {\n            sub.error(err);\n          }\n        });\n        req.end(JSON.stringify(act));\n      }))\n    )\n  ).pipe(\n    op.catchError((err, src) => {\n      log.error('client error', err);\n      return src;\n    })\n  ).subscribe();\n  return slice;\n}\n\n"]}