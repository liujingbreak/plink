{"version":3,"file":"cache-service-store.js","sourceRoot":"","sources":["cache-service-store.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * To support cluster mode, this module should run inside Master process\n */\nimport http from 'node:http';\nimport {promises, Writable, Readable} from 'node:stream';\nimport * as rx from 'rxjs';\nimport * as op from 'rxjs/operators';\nimport {log4File} from '@wfh/plink';\nimport {createActionStreamByType} from '@wfh/redux-toolkit-observable/dist/rx-utils';\n\nconst log = log4File(__filename);\n\n// type MemoStore = {\n//   keyMap: Map<string, {expiration: number; data: any}>;\n// };\n\ntype ServerActions = {\n  listening(): void;\n  shutdown(): void;\n  request(req: http.IncomingMessage, res: http.OutgoingMessage): void;\n  error(err: Error): void;\n};\n\nexport function startStore() {\n  const slice = createActionStreamByType<ServerActions>();\n  const server = http.createServer({keepAlive: true});\n  server.keepAliveTimeout = 60000;\n  server.listen(14401);\n  server.once('listening', () => slice.dispatcher.listening());\n  server.on('error', err => slice.dispatcher.error(err));\n  server.on('request', (req, res) => slice.dispatcher.request(req, res));\n\n  rx.merge(\n    slice.actionOfType('request').pipe(\n      op.mergeMap(async ({payload: [req, res]}) => {\n        log.info('[server] ' + req.method, req.url);\n        if (req.url === '/cache' && req.method === 'POST') {\n          let jsonStr = '';\n          const writable = new Writable({\n            write(chunk, _encoding, callback) {\n              jsonStr += (chunk as Buffer).toString('utf-8');\n              callback(null);\n            },\n            final(cb) {\n              cb(null);\n            }\n          });\n          await promises.pipeline(req, writable);\n          onMessage(jsonStr, res);\n        }\n      })\n    ),\n    slice.actionOfType('error').pipe(\n      op.map(err => log.warn('[server] runtime error', err))\n    )\n  ).pipe(\n    op.takeUntil(slice.actionOfType('shutdown').pipe(\n      op.take(1),\n      op.map(() => {\n        log.info('[server] shuting down');\n        server.close();\n      })\n    )),\n    op.catchError((err, src) => {\n      log.error('[server]', err);\n      return src;\n    })\n  ).subscribe();\n\n  function onMessage(jsonStr: string, res: http.OutgoingMessage) {\n    log.info('[server] got', jsonStr);\n    res.end('ok');\n  }\n\n  return {\n    shutdown() {\n      slice.dispatcher.shutdown();\n    },\n    started: slice.actionOfType('listening').pipe(\n      op.take(1)\n    ).toPromise()\n  };\n  // const store = new rx.BehaviorSubject<MemoStore>({\n  //   keyMap: new Map()\n  // });\n}\n\ntype ServerResponseMsg = {\n  onRespond(type: keyof ClientMessage, key: string, content: string | Buffer): void;\n  /** subscribed changes */\n  onChange(key: string): void;\n};\n\ntype ClientMessage = {\n  ping(key: string): void;\n  setForNonexist(key: string, value: any): void;\n  subscribeChange(key: string): void;\n  unsubscribe(key: string): void;\n  _reconnectForSubs(): void;\n  _responseEnd(req: http.ClientRequest, resContent: string | Buffer): void;\n} & ServerResponseMsg;\n\nexport function createClient() {\n  const agent = new http.Agent({keepAlive: true});\n  const longPollAgent = new http.Agent({keepAlive: true});\n\n  const slice = createActionStreamByType<ClientMessage>({debug: true});\n  const subscribingKeys$ = new rx.BehaviorSubject<Set<string>>(new Set());\n  rx.merge(\n    slice.actionOfType('subscribeChange').pipe(\n      op.map(act => {\n        subscribingKeys$.getValue().add(act.payload);\n        subscribingKeys$.next(subscribingKeys$.getValue());\n      })\n    ),\n    rx.merge(\n      subscribingKeys$,\n      slice.actionOfType('_reconnectForSubs').pipe(op.subscribeOn(rx.queueScheduler))\n    ).pipe(\n      op.switchMap(() => new rx.Observable<Buffer>(sub => {\n        const req = http.request('http://localhost:14401/cache', {\n          method: 'POST',\n          agent: longPollAgent,\n          headers: {\n            'Transfer-Encoding': 'chunked'\n          }\n        }, res => {\n          log.info('client recieving');\n          res.on('end', () => {\n            // slice.dispatcher._done(, act.payload as string);\n            sub.complete();\n          });\n          res.on('data', (chunk) => sub.next(chunk));\n          res.on('error', err => {\n            req.end();\n            sub.error(err);\n          });\n        });\n        req.on('error', err => {\n          if (req.reusedSocket && (err as unknown as {code: string}).code === 'ECONNRESET') {\n            log.info('Connection closed by server \"ECONNRESET\", create new request');\n            slice.dispatcher._reconnectForSubs();\n          } else {\n            sub.error(err);\n          }\n        });\n        req.write(JSON.stringify({\n          type: 'subscribe',\n          payload: {\n            client: '' + process.pid,\n            keys: [...subscribingKeys$.getValue().keys()]\n          }\n        }));\n\n        return () => {\n          req.end();\n        };\n      }))\n    ),\n    slice.action$.pipe(\n      op.filter(\n        act => !slice.isActionType(act, 'subscribeChange') &&\n         !slice.isActionType(act, '_reconnectForSubs') &&\n         !slice.isActionType(act, '_responseEnd')\n      ),\n      op.mergeMap(act => new rx.Observable<string | Buffer>(sub => {\n        log.info('client', act.type);\n        const req = http.request('http://localhost:14401/cache', {\n          method: 'POST',\n          agent\n        }, res => {\n          log.info('client recieving');\n          void readToBuffer(res).then(content => {\n            sub.next(content);\n            sub.complete();\n            slice.dispatcher._responseEnd(req, content);\n          });\n        });\n        if (req.reusedSocket) {\n          log.info('Socket is reused for', act.type, act.payload);\n        }\n        req.on('error', err => {\n          if (req.reusedSocket && (err as unknown as {code: string}).code === 'ECONNRESET') {\n            log.info('Connection closed by server \"ECONNRESET\", retry request');\n            sub.complete();\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n            (slice.dispatchFactory(act.type as keyof ClientMessage) as any)(act.payload as string);\n          } else {\n            sub.error(err);\n          }\n        });\n        // req.on('close', () => {\n        //   slice.dispatcher._requestClose(req);\n        // });\n        req.end(JSON.stringify({...act, type: slice.nameOfAction(act)}));\n\n      }).pipe(\n        op.take(1),\n        op.map(out => slice.dispatcher.onRespond(slice.nameOfAction(act)!, act.payload as string, out))\n      ))\n    )\n  ).pipe(\n    op.catchError((err, src) => {\n      log.error('[client] error', err);\n      return src;\n    })\n  ).subscribe();\n  return slice;\n}\n\nasync function readToBuffer(input: Readable) {\n  const buf = [] as Array<string | Buffer>;\n  let encoding: string | undefined;\n  const writable = new Writable({\n    write(chunk: Buffer, enc, cb) {\n      encoding = enc;\n      // log.info('[client] recieve', chunk.toString());\n      buf.push(chunk);\n      cb();\n    },\n    final(cb) {\n      cb();\n    }\n  });\n\n  await promises.pipeline(input, writable);\n  if (encoding)\n    return (buf as string[]).join('');\n  else\n    return Buffer.concat(buf as Buffer[]);\n}\n\n"]}