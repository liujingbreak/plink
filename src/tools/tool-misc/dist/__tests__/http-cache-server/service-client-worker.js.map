{"version":3,"file":"service-client-worker.js","sourceRoot":"","sources":["service-client-worker.ts"],"names":[],"mappings":";;;AAAA,2DAAqC;AACrC,iDAA2B;AAC3B,sCAAiD;AAEjD,MAAM,UAAU,GAAG,IAAI,EAAE,CAAC,aAAa,CAAS,CAAC,CAAC,CAAC;AACnD,OAAO,CAAC,EAAE,CAAC,SAAS,EAAE,GAAG,CAAC,EAAE;IAC1B,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;QAC3B,IAAI;YACF,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAA4C,CAAC;YACxE,IAAI,IAAI,CAAC,4BAA4B,IAAI,IAAI,EAAE;gBAC7C,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAC;aACpD;YACH,oCAAoC;SACnC;QAAC,OAAO,CAAC,EAAE,GAAG;KAChB;AACH,CAAC,CAAC,CAAC;AAEH,IAAA,mBAAW,EAAC,MAAM,CAAC,CAAC;AAEpB,KAAK,CAAC,KAAK,IAAI,EAAE;IACf,MAAM,EAAC,YAAY,EAAC,GAAG,gEAAa,8CAA8C,GAAC,CAAC;IACpF,MAAM,GAAG,GAAG,IAAA,gBAAQ,EAAC,UAAU,CAAC,CAAC;IACjC,MAAM,MAAM,GAAG,YAAY,EAAE,CAAC;IAE9B,EAAE,CAAC,MAAM,CACP,EAAE,CAAC,KAAK,CACN,UAAU,CAAC,IAAI,CACb,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;QACX,GAAG,CAAC,IAAI,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC;IAC/B,CAAC,CAAC,EACF,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CACX,EACD,MAAM,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC,IAAI,CACnC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC,EAC5C,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CACX,CACF,EACD,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CACX,EAAE,CAAC,GAAG,CAAC,GAAG,EAAE;QACV,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QAC1B,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAClB,CAAC,CAAC,CACH,CACF,CAAC,SAAS,EAAE,CAAC;IAEd,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC;IACzC,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;IACvD,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC;IAEzC,gDAAgD;IAEhD,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;AACxB,CAAC,CAAC,EAAE,CAAC","sourcesContent":["import * as op from 'rxjs/operators';\nimport * as rx from 'rxjs';\nimport {initProcess, log4File} from '@wfh/plink';\n\nconst masterMsg$ = new rx.ReplaySubject<number>(1);\nprocess.on('message', msg => {\n  if (typeof msg === 'string') {\n    try {\n      const json = JSON.parse(msg) as {__plink_cluster_worker_index?: number};\n      if (json.__plink_cluster_worker_index != null) {\n        masterMsg$.next(json.__plink_cluster_worker_index);\n      }\n    // eslint-disable-next-line no-empty\n    } catch (e) { }\n  }\n});\n\ninitProcess('none');\n\nvoid (async () => {\n  const {createClient} = await import('../../http-cache-server/cache-service-client');\n  const log = log4File(__filename);\n  const client = createClient();\n\n  rx.concat(\n    rx.merge(\n      masterMsg$.pipe(\n        op.map(idx => {\n          log.info('worker idx:', idx);\n        }),\n        op.take(1)\n      ),\n      client.actionOfType('onRespond').pipe(\n        op.map(act => log.info(act.type, 'is done')),\n        op.take(2)\n      )\n    ),\n    rx.of(1).pipe(\n      op.map(() => {\n        log.info('worker exists');\n        process.exit(0);\n      })\n    )\n  ).subscribe();\n\n  client.dispatcher.ping(process.pid + '');\n  await new Promise(resolve => setTimeout(resolve, 500));\n  client.dispatcher.ping(process.pid + '');\n\n  // client.dispatcher.subscribeChange('testkey');\n\n  log.info('ping sent');\n})();\n\n\n"]}