{"version":3,"file":"cache-service-store.test.js","sourceRoot":"","sources":["cache-service-store.test.ts"],"names":[],"mappings":";;;AAAA,wEAAmC;AACnC,2CAAiD;AACjD,sCAAkD;AAIlD,cAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;AACvB,IAAA,kBAAQ,EAAC,mBAAmB,EAAE,GAAG,EAAE;IACjC,iDAAiD;IACjD,8BAA8B;IAC9B,mCAAmC;IACnC,MAAM;IAEN,IAAA,YAAE,EAAC,yEAAyE,EAAE,KAAK,IAAI,EAAE;QACvF,IAAA,mBAAW,EAAC,MAAM,CAAC,CAAC;QACpB,MAAM,EAAC,UAAU,EAAC,GAAG,OAAO,CAAC,6CAA6C,CAA6B,CAAC;QACxG,MAAM,EAAC,YAAY,EAAC,GAAG,OAAO,CAAC,qCAAqC,CAAsB,CAAC;QAE3F,iBAAS,CAAC,IAAI,CAAC,GAAG,EAAE;YAClB,WAAW,CAAC,QAAQ,EAAE,CAAC;QACzB,CAAC,CAAC,CAAC;QAEH,MAAM,WAAW,GAAG,UAAU,EAAE,CAAC;QACjC,MAAM,WAAW,CAAC,OAAO,CAAC;QAE1B,sBAAO,CAAC,WAAW,CAAC;YAClB,IAAI,EAAE,OAAO,CAAC,OAAO,CAAC,iEAAiE,CAAC;YACxF,IAAI,EAAE,EAAE;SACT,CAAC,CAAC;QAEH,YAAY,CAAC,CAAC,CAAC,CAAC;QAChB,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC;QACzD,gDAAgD;QAChD,6DAA6D;QAC7D,WAAW,CAAC,QAAQ,EAAE,CAAC;IACzB,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import cluster from 'node:cluster';\nimport {jest, describe, it} from '@jest/globals';\nimport {initProcess, exitHooks} from '@wfh/plink';\nimport * as cacheServiceStore from '../../http-cache-server/cache-service-store';\nimport * as runCluster from '../../http-cache-server/run-cluster';\n\njest.setTimeout(60000);\ndescribe('http cache server', () => {\n  // it('\"preserve symlinks\" should be on', () => {\n  //   console.log(process.env);\n  //   console.log(process.execArgv);\n  // });\n\n  it('multi-process state server and client uses http \"keep-alive\" connection', async () => {\n    initProcess('none');\n    const {startStore} = require('../../http-cache-server/cache-service-store') as typeof cacheServiceStore;\n    const {startCluster} = require('../../http-cache-server/run-cluster') as typeof runCluster;\n\n    exitHooks.push(() => {\n      storeServer.shutdown();\n    });\n\n    const storeServer = startStore();\n    await storeServer.started;\n\n    cluster.setupMaster({\n      exec: require.resolve('../../../dist/__tests__/http-cache-server/service-client-worker'),\n      args: []\n    });\n\n    startCluster(2);\n    await new Promise(resolve => setTimeout(resolve, 10000));\n    // cluster.workers?.forEach(it => it.destroy());\n    // Object.values(cluster.workers!).forEach(it => it?.kill());\n    storeServer.shutdown();\n  });\n});\n\n"]}