{"version":3,"file":"cli-cra-gen.js","sourceRoot":"","sources":["cli-cra-gen.ts"],"names":[],"mappings":"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","sourcesContent":["// eslint-disable  no-console\nimport fs from 'fs-extra';\nimport Path from 'path';\nimport _ from 'lodash';\n// import chalk from 'chalk';\nimport {boxString} from '@wfh/plink/wfh/dist/utils/misc';\nimport generateStructure from '@wfh/plink/wfh/dist/template-gen';\nimport plink from '__plink';\n\nexport async function genPackage(path: string, compName: string, featureName: string, outputPath?: string,\n  dryrun = false) {\n  compName = compName.charAt(0).toUpperCase() + compName.slice(1);\n  // const sCompName = compName.charAt(0).toLowerCase() + compName.slice(1);\n  const capitalFeatureName = featureName.charAt(0).toUpperCase() + featureName.slice(1);\n  const littleFeatureName = featureName.charAt(0).toLowerCase() + featureName.slice(1);\n\n  if (!path) {\n    throw new Error('Lack of arguments');\n  }\n  const dir = Path.resolve(path);\n  if (dryrun) {\n    // eslint-disable-next-line no-console\n    plink.logger.info('dryrun mode');\n  } else {\n    fs.mkdirpSync(dir);\n  }\n  const ma = /^@[^/]\\/([^]*)$/.exec(path);\n  if (ma) {\n    path = ma[1];\n  }\n  const packageName = Path.basename(path);\n  const featureDir = Path.resolve(dir, littleFeatureName);\n  if (!dryrun) {\n    fs.mkdirpSync( featureDir); // mkdir feature directory\n  }\n\n  if (outputPath == null)\n    outputPath = Path.basename(path);\n  if (outputPath.startsWith('/'))\n    outputPath = _.trimStart(outputPath, '/');\n\n  await generateStructure(Path.resolve(__dirname, '../../template-cra-pkg'), dir, {\n      fileMapping: [\n        [/^my-feature/, littleFeatureName]\n      ],\n      textMapping: {\n        packageName,\n        MyComponentPath: `${littleFeatureName}/${compName}`,\n        appBuild: '/' + outputPath,\n        publicUrlOrPath: '/' + (outputPath.length > 0 ? outputPath + '/' : '')\n      }\n    },\n    {dryrun});\n\n  await generateStructure(Path.resolve(__dirname, '../../template-cra-connected-comp'),  featureDir, {\n      fileMapping: [\n        [/^MyConnectedComp/, compName]\n      ],\n      textMapping: {\n        MyComponent: compName,\n        slice_file: './' + littleFeatureName + 'Slice',\n        withImage: true,\n        isEntry: true,\n        isConnected: true\n      }\n    },\n    {dryrun});\n\n  await generateStructure(Path.resolve(__dirname, '../../template-cra-slice'),  featureDir, {\n      fileMapping: [\n        [/^MyFeatureSlice/, littleFeatureName + 'Slice']\n      ],\n      textMapping: {\n        SliceName: capitalFeatureName,\n        sliceName: littleFeatureName\n      }\n    },\n    {dryrun});\n  // copyTempl(dir, Path.basename(path), dryrun);\n  plink.logger.info('\\n' + boxString(\n    `1. Modify ${Path.resolve(path, 'package.json')} to change current package name \"@wfh/${packageName}\",` +\n    ' if you don\\'t like it.\\n' +\n    '2. Run command: plink sync\\n' +\n    `3. Add \"${packageName}\" as dependency in ${process.cwd()}/package.json.\\n` +\n    `  (Run command: plink add @wfh/${packageName})\\n`));\n}\n\nexport async function genComponents(dir: string, compNames: string[], opts: {connectedToSlice?: string; dryrun: boolean;}) {\n  dir = Path.resolve(dir);\n\n  if (opts.dryrun) {\n    // eslint-disable-next-line no-console\n    plink.logger.info('dryrun mode');\n  } else {\n    fs.mkdirpSync(dir);\n  }\n  for (let compName of compNames) {\n    compName = compName.charAt(0).toUpperCase() + compName.slice(1);\n\n    let sliceFilePath = '<Your Redux Slice Path>';\n    if (opts.connectedToSlice) {\n      sliceFilePath = Path.relative(dir, opts.connectedToSlice).replace(/\\\\/g, '/').replace(/\\.[^.]+$/, '');\n      if (!sliceFilePath.startsWith('.'))\n        sliceFilePath = './' + sliceFilePath;\n    }\n    await generateStructure(Path.resolve(__dirname, '../../template-cra-connected-comp'), dir,\n    {\n      fileMapping: [\n        [/^MyConnectedComp/, compName]\n      ],\n      textMapping: {\n        MyComponent: compName,\n        slice_file: sliceFilePath,\n        withImage: false,\n        isEntry: false,\n        isConnected: !!opts.connectedToSlice\n      }\n    },\n    {dryrun: opts.dryrun});\n  }\n}\n\nexport async function genSlice(dir: string, targetNames: string[], opt: {dryRun?: boolean; tiny: boolean, internal: boolean}) {\n  dir = Path.resolve(dir);\n\n  if (opt.dryRun) {\n    // eslint-disable-next-line no-console\n    plink.logger.info('dryrun mode');\n  } else {\n    fs.mkdirpSync(dir);\n  }\n  for (let targetName of targetNames) {\n    targetName = targetName.charAt(0).toUpperCase() + targetName.slice(1);\n    const smallTargetName = targetName.charAt(0).toLowerCase() + targetName.slice(1);\n    await generateStructure(\n      Path.resolve(__dirname, opt.tiny ? '../../template-cra-tiny-redux' : opt.internal ? '../../template-slice4comp' : '../../template-cra-slice'),\n      dir,\n    {\n      fileMapping: [\n        [/^myFeature/i, smallTargetName],\n        [/^MyComp/, smallTargetName]\n      ],\n      textMapping: {\n        SliceName: targetName,\n        sliceName: smallTargetName,\n        MyComponent: targetName\n      }\n    },\n    {dryrun: opt.dryRun});\n  }\n}\n"]}