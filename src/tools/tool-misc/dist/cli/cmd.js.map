{"version":3,"file":"cmd.js","sourceRoot":"","sources":["cmd.ts"],"names":[],"mappings":"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","sourcesContent":["import {CliExtension, cliPackageArgDesc} from '@wfh/plink';\n// import {cliPackageArgDesc}\nimport {generate} from './cli-gcmd';\n\nconst cliExt: CliExtension = (program) => {\n  // program.command('eslint <dir>')\n  // .description('Run eslint on ts and tsx files (except .d.ts file)', {dir: 'target source code directory'})\n  // .action(async dir => {\n  //   await (await import('../eslint')).eslint(dir);\n  // });\n\n  const cmd = program.command('gcmd <package-name> <command-name>')\n    .alias('gen-command')\n    .description('Bootstrap a Plink command line implementation in specific package')\n  // .option('--for-template <templateName>', 'Create a template generator command', false)\n    .option('-d, --dry-run', 'Dryrun', false)\n    .action(async (packageName: string, cmdName: string) => {\n      await generate(packageName, cmdName, cmd.opts() );\n    });\n  cmd.usage(cmd.usage() + '\\ne.g.\\n  plink gcmd my-package my-command');\n\n  const settingCmd = program.command('gsetting <package-name...>').alias('gen-setting')\n    .option('-d, --dry-run', 'Dryrun', false)\n    .description('Bootstrap a package setting file', {\n      'package-name': cliPackageArgDesc\n    })\n    .action(async (packageNames: string[]) => {\n      await (await import('./cli-gsetting')).generateSetting(packageNames, settingCmd.opts() );\n    });\n\n  const cfgCmd = program.command('gcfg <file>').alias('gen-config')\n    .option('-d, --dry-run', 'Dryrun', false)\n  // .option('-t, --type <file-type>', 'Configuation file type, valid types are \"ts\", \"yaml\", \"json\"', 'ts')\n    .description('Generate a workspace configuration file (Typescript file), used to override package settings', {\n      file: 'Output configuration file path (with or without suffix name \".ts\"), e.g. \"conf/foobar.prod\"'\n    })\n    .action(async (file: string) => {\n      await (await import('./cli-gcfg')).generateConfig(file, cfgCmd.opts() );\n    });\n\n  const genCraCmd = program.command('cra-gen-pkg <path>')\n    .description('For create-react-app project, generate a sample package', {path: 'package directory in relative or absolute path'})\n    .option('--comp <name>', 'Sample component name', 'sample')\n    .option('--feature <name>', 'Sample feature directory and slice name', 'sampleFeature')\n    .option('--output <dir-name>', 'This option changes \"appBuild\" values in config-override.ts,' +\n      ' internally create-react-app changes Webpack configure property `output.path` according to this value (' +\n      ' you may also use environment variable \"BUILD_PATH\" for create-react-app version above 4.0.3)')\n    .option('-d, --dry-run', 'Do not generate files, just list new file names', false)\n    .action(async (dir: string) => {\n      await (await import('./cli-cra-gen')).genPackage(dir, genCraCmd.opts().comp,\n        genCraCmd.opts().feature, genCraCmd.opts().output, genCraCmd.opts().dryRun);\n    });\n\n  const genCraCompCmd = program.command('cra-gen-comp <dir> <componentName...>')\n    .description('For create-react-app project, generate sample components', {\n      dir: 'directory'\n    })\n    .option('-d, --dry-run', 'Do not generate files, just list new file names', false)\n    .option('--conn <Redux-slice-file>', 'Connect component to Redux store via React-redux')\n    // .option('--internal-slice,--is', 'Use a lightweiht Redux-toolkit + redux-observable like tool to manage component internal state,' +\n    //   ' useful for implementing complex component which might have bigc state and async side effects')\n    .action(async (dir: string, compNames: string[]) => {\n      await (await import('./cli-cra-gen')).genComponents(dir, compNames, {\n        connectedToSlice: genCraCompCmd.opts().conn as string,\n        dryrun: genCraCompCmd.opts().dryRun as boolean\n      });\n    });\n  genCraCompCmd.usage(genCraCompCmd.usage() + '\\ne.g.\\n  plink cra-gen-comp --conn ../packages/foobar/components Toolbar Layout Profile');\n\n  const genCraSliceCmd = program.command('cra-gen-slice <dir> <sliceName...>')\n    .description('For create-react-app project, generate a sample Redux-toolkit Slice file (with Redux-observable epic)', {\n      dir: 'directory'\n    })\n    .option('--internal', 'A Redux Slice for managing individual component internal state, useful for complicated component', false)\n    .option('--tiny', 'A RxJS based tiny Slice for managing individual component internal state, useful for complicated component', false)\n    .option('-d, --dry-run', 'Do not generate files, just list new file names', false)\n    .action(async (dir: string, sliceName: string[]) => {\n      await (await import('./cli-cra-gen')).genSlice(dir, sliceName, genCraSliceCmd.opts() );\n    });\n\n  const htCmd = program.command('http-tunnel')\n    .alias('ht')\n    .description('Start forward proxy server')\n    .argument('[port]', 'Port number', 14881)\n    .option('-m <host-map>', '(multiple option) host mapping, e.g. -m www.google.com=localhost:8080',\n      (value, map) => {\n        const [host1, host2] = value.split('=');\n        map.set(host1.trim(), host2.trim());\n        return map;\n      }, new Map<string, string>())\n    .option('-p,--fallback <fallback-proxy>', 'A fallback proxy server e.g. 172.29.8.195:8888')\n    .action(async (port: number) => {\n      const fallbackOpt = htCmd.opts().fallback ? (htCmd.opts().fallback as string).split(':') : undefined;\n      (await import('./cli-forward-proxy')).start(port, htCmd.opts().m, fallbackOpt\n        ? {\n          fallbackProxyHost: fallbackOpt[0],\n          fallbackproxyPort: fallbackOpt[1] != null ? Number(fallbackOpt[1]) : 80\n        }\n        : undefined);\n    });\n  // program.command('install-eslint')\n  // .description('Install eslint to current project')\n  // .action(async () => {\n\n  // });\n\n};\n\nexport default cliExt;\n"]}