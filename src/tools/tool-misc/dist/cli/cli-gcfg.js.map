{"version":3,"file":"cli-gcfg.js","sourceRoot":"","sources":["cli-gcfg.ts"],"names":[],"mappings":"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","sourcesContent":["import generateStructure from '@wfh/plink/wfh/dist/template-gen';\n// import fsex from 'fs-extra';\nimport Path from 'path';\nimport fs from 'fs';\n// import chalk from 'chalk';\nimport plink from '__plink';\nimport _ from 'lodash';\nimport {inspect} from 'util';\nimport {allSrcDirs} from '@wfh/plink/wfh/dist/recipe-manager';\nimport {getProjectList, actionDispatcher as pkgMgrDispatcher} from '@wfh/plink/wfh/dist/package-mgr';\nimport parse, {isArrayAst} from '@wfh/plink/wfh/dist/utils/json-sync-parser';\nimport replaceText from '@wfh/plink/wfh/dist/utils/patch-text';\nimport '@wfh/plink/wfh/dist/editor-helper';\n\n\n// TODO: support file type other than \"ts\"\nexport async function generateConfig(file: string, opt: {dryRun: boolean; type: 'ts' | 'yaml' | 'json'}) {\n  file = Path.resolve(file);\n  if (opt.dryRun) {\n    plink.logger.info('Dryrun mode');\n  }\n  const suffix = Path.extname(file);\n  if (suffix === '')\n    file = file + '.ts';\n  else if (suffix !== '.ts') {\n    file = file.replace(/\\.[^./\\\\]$/, '.ts');\n    plink.logger.warn('We recommend using Typescript file as configuration, which can provide type check in Visual Code editor.');\n  }\n\n  // if (!opt.dryRun) {\n  //   fsex.mkdirpSync(Path.dirname(file));\n  // }\n\n  let isUnderSrcDir = false;\n  const srcDirs = Array.from(allSrcDirs()).map(item => item.srcDir);\n  for (const {srcDir} of allSrcDirs()) {\n    if (file.startsWith(srcDir + Path.sep)) {\n      isUnderSrcDir = true;\n      break;\n    }\n  }\n\n  if (!isUnderSrcDir) {\n    const projDir = getProjectList().find(prj => file.startsWith(Path.resolve(prj) + Path.sep));\n    if (projDir) {\n      let output: string;\n      const projJsonFile = Path.resolve(projDir, 'package.json');\n      const jsonStr = fs.readFileSync(projJsonFile, 'utf8');\n      const ast = parse(jsonStr);\n      const packagesAst = ast.properties.find(item => item.name.text === '\"packages\"');\n      if (packagesAst) {\n        if (!isArrayAst(packagesAst.value)) {\n          throw new Error(`Invalid ${projJsonFile}, property \"packages\" must be Array type`);\n        }\n        const end = packagesAst.value.items[packagesAst.value.items.length - 1].end;\n        output = replaceText(jsonStr, [\n          {\n            start: end, end,\n            text: `,\\n    ${JSON.stringify(Path.relative(projDir, Path.dirname(file)).replace(/\\\\/g, '/'))}`\n          }\n        ]);\n      } else {\n        const end = ast.properties[ast.properties.length - 1].value.end;\n        output = replaceText(jsonStr, [\n          {\n            start: end, end,\n            text: `,\\n  \"packages\": [${JSON.stringify(Path.relative(projDir, Path.dirname(file)).replace(/\\\\/g, '/'))}]`\n          }\n        ]);\n        // plink.logger.info(projJsonFile + ` is changed, you need to run command \"${chalk.green('plink sync')}\" to create a tsconfig file Editor`);\n      }\n\n      if (!opt.dryRun) {\n        fs.writeFileSync(projJsonFile, output);\n        await new Promise(resolve => setImmediate(resolve));\n        // updateTsconfigFileForProjects(workspaceKey(process.cwd()), projDir);\n        pkgMgrDispatcher.scanAndSyncPackages({});\n        plink.logger.info(projJsonFile + ' is updated.');\n      }\n    } else {\n      plink.logger.error(`The target file ${file} is not under any of associated project directories:\\n`\n        + srcDirs.join('\\n')\n        + '\\n  A Typescript file will not get proper type checked in Editor without tsconfig file, Plink \"sync\" command can ' +\n        ' help to generate an Editor friendly tsconfig file, but it must be one of associated project directory');\n      return;\n    }\n  }\n\n  await generateStructure(Path.resolve(__dirname, '../../template-gcfg'), Path.dirname(file), {\n    fileMapping: [ [/foobar\\.ts/, Path.basename(file)] ],\n    textMapping: {\n      settingValue: inspect(plink.config(), false, 5).replace(/(\\r?\\n)([^])/mg, (match, p1, p2) => p1 + '    // ' + p2)\n    }\n  }, {dryrun: opt.dryRun});\n}\n"]}