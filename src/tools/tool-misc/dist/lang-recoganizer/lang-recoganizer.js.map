{"version":3,"file":"lang-recoganizer.js","sourceRoot":"","sources":["lang-recoganizer.ts"],"names":[],"mappings":"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","sourcesContent":["import * as rx from 'rxjs';\nimport * as op from 'rxjs/operators';\nimport {cacheAndReplay} from './lang-reactive-ops';\n\ninterface PositionInfo {\n  start: number;\n  end: number;\n}\n\nconst childStepActions = {\n  process(payload: {d: any; i: number}) {},\n  sucess<R extends PositionInfo>(result: R) {},\n  failed(reason: string[]) {}\n};\n\ntype MarkAndReplay = {\n  mark(laNum: number): void;\n  replay(position: number): void;\n};\n\ntype Action = {\n  type: keyof typeof childStepActions;\n  payload: Parameters<(typeof childStepActions)[keyof typeof childStepActions]>;\n};\n\ntype ActionByType = {\n  [K in keyof typeof childStepActions]: rx.Observable<\n    (typeof childStepActions)[K] extends (payload: infer P) => void ?\n      {payload: P; type: K} :\n      unknown\n    >\n};\n\nfunction createDispatcher(action$: rx.Subject<Action>) {\n  const dispatcher = {} as {[K in keyof typeof childStepActions]: (typeof childStepActions)[K]};\n  for (const type of Object.keys(childStepActions)) {\n    dispatcher[type] = (arg1: any) => {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      action$.next({type: type as keyof typeof childStepActions, payload: arg1});\n    };\n  }\n  return dispatcher;\n}\n\nexport function splitActionByType(action$: rx.Observable<Action>): ActionByType {\n  const source = action$.pipe(op.share());\n  const actionByType = {} as ActionByType;\n  for (const type of Object.keys(childStepActions)) {\n    Object.defineProperty(actionByType, type, {\n      get() {\n        return source.pipe(op.filter(action => action.type === type));\n      }\n    });\n  }\n  return actionByType;\n}\n\nfunction createStep<T>(interceptor?: () => rx.OperatorFunction<Action, Action>) {\n  const source = new rx.Subject<Action>();\n  const dispatcher = createDispatcher(source);\n  const actions = interceptor ? source.pipe(op.observeOn(rx.queueScheduler), interceptor()) :\n      source.pipe(op.observeOn(rx.queueScheduler));\n  return {dispatcher, actions};\n}\n\ntype StepFactory = (mr: MarkAndReplay) => ReturnType<typeof createStep>;\n\n/**\n * simplest comparison step\n * @param expectStr \n * @returns \n */\nexport function cmp<T>(...expectStr: T[]) {\n  return (mr: MarkAndReplay) => {\n    const {dispatcher, actions} = createStep();\n    const actionByType = splitActionByType(actions);\n    let index = 0;\n    let startPosition = -1;\n    if (expectStr.length === 1 && typeof expectStr[0] === 'string' && (expectStr[0] as unknown as string).length > 1 ) {\n      // console.log('here');\n      expectStr = (expectStr[0] as unknown as string).split('') as unknown as T[];\n    }\n\n    let last = expectStr.length - 1;\n    actionByType.process.pipe(\n      op.tap(({payload: {d: input, i: offset}}) => {\n        if (startPosition === -1)\n          startPosition = offset;\n        let expect = expectStr[index];\n        // console.log('compare @' + offset, input, 'with', this.expect);\n        if (input === expect) {\n          if (index < last) {\n            index++;\n          } else {\n            index = 0;\n            dispatcher.sucess({start: startPosition, end: offset + 1});\n          }\n        } else {\n          dispatcher.failed([`at offset ${offset}, expect: ${expect + ''}, got: ${input + ''}`]);\n        }\n      })\n    ).subscribe();\n    return {dispatcher, actions};\n  };\n}\n\ntype ScopeResult = PositionInfo & {name: string; children: PositionInfo[]};\n/** scope step */\nexport function scope<T>(name: string, stepFactories: (StepFactory)[],\n  opts?: {onSuccess(children: PositionInfo[]): any}): StepFactory {\n  return (mr: MarkAndReplay) => {\n    let onSuccessResultTransformer: undefined | ((children: PositionInfo[]) => any);\n    if (opts)\n      onSuccessResultTransformer = opts.onSuccess;\n    const {dispatcher, actions} = createStep();\n    const actionByType = splitActionByType(actions);\n    const steps = stepFactories.map((fac) => fac(mr));\n    let currStepIdx = 0;\n    const last = steps.length - 1;\n    let startPosition = -1;\n    let currPosition = -1;\n    const stepResults = [] as PositionInfo[];\n\n    const subscribeStep = () => {\n      const step = steps[currStepIdx];\n      const childStepActions = splitActionByType(step.actions);\n      rx.merge(\n        rx.merge(\n          childStepActions.sucess.pipe(\n            op.map(({payload}) => {\n              stepResults.push(payload);\n              if (currStepIdx < last) {\n                currStepIdx++;\n                subscribeStep();\n              } else {\n                const result: ScopeResult = {\n                  name,\n                  start: startPosition,\n                  end: currPosition + 1,\n                  children: stepResults\n                };\n                dispatcher.sucess(onSuccessResultTransformer ? onSuccessResultTransformer(result.children) : result);\n                return null;\n              }\n            })\n          ),\n          childStepActions.failed.pipe(\n            op.map(({payload: reason}) => {dispatcher.failed([name, ...reason]); })\n          )\n        ).pipe(op.take(1))\n      ).pipe(\n        op.takeUntil(rx.merge(actionByType.sucess, actionByType.failed))\n      ).subscribe();\n    };\n\n    subscribeStep();\n\n    actionByType.process.pipe(\n      op.map(({payload}) => {\n        if (startPosition === -1)\n          startPosition = payload.i;\n        currPosition = payload.i;\n        steps[currStepIdx].dispatcher.process(payload);\n      })\n    ).pipe(\n      op.takeUntil(rx.merge(actionByType.sucess, actionByType.failed))\n    ).subscribe();\n\n    return {dispatcher, actions};\n  };\n}\n\n\n/** Choice */\nexport function choice(laNum = 2, ...choiceFactories: (StepFactory)[]) {\n  return (mr: MarkAndReplay) => {\n    const {dispatcher, actions} = createStep();\n    const failedChoiceResult = [] as string[][];\n    const choices = choiceFactories.map((fac, idx) => fac(mr));\n    const actionByType = splitActionByType(actions);\n    let currChoiceIdx = 0;\n    let replayPos: number;\n\n    actionByType.process.pipe(\n      op.map(({payload}) => {\n        if (replayPos == null) {\n          replayPos = payload.i;\n          mr.mark(laNum);\n        }\n        choices[currChoiceIdx].dispatcher.process(payload);\n      })\n    ).pipe(\n      op.takeUntil(rx.merge(actionByType.sucess, actionByType.failed))\n    ).subscribe();\n\n    const subscribeCurrentChoice = () => {\n      const choiceActions = splitActionByType(choices[currChoiceIdx].actions);\n\n      rx.merge(\n      ).pipe(\n        op.takeUntil(rx.merge(actionByType.sucess, actionByType.failed))\n      ).subscribe();\n\n      choiceActions.sucess.pipe(\n        op.tap(({payload}) => {\n          dispatcher.sucess(payload);\n        }),\n        op.take(1),\n        op.takeUntil(rx.merge(actionByType.sucess, actionByType.failed))\n      ).subscribe();\n\n      const last = choices.length - 1;\n      choiceActions.failed.pipe(\n        op.tap(({payload}) => {\n          failedChoiceResult.push(payload);\n          if (currChoiceIdx < last) {\n            currChoiceIdx++;\n            subscribeCurrentChoice();\n            mr.replay(replayPos);\n          } else {\n            dispatcher.failed(['None is matched: ' + failedChoiceResult.map(str => str.join(' - ')).join('; ')]);\n          }\n        }),\n        op.take(1),\n        op.takeUntil(rx.merge(actionByType.sucess, actionByType.failed))\n      ).subscribe();\n    };\n\n    subscribeCurrentChoice();\n    return {dispatcher, actions};\n  };\n}\n\nexport function isNotLa(step: StepFactory) {\n  return (mr: MarkAndReplay) => {\n    const {dispatcher, actions} = createStep();\n    const actionByType = splitActionByType(actions);\n    const predicateStep = step(mr);\n    const predActions = splitActionByType(predicateStep.actions);\n    let startPos: number;\n    let currPos: number;\n\n    rx.merge(\n      actionByType.process.pipe(\n        op.take(1),\n        op.map(({payload: {d, i}}) => {\n          startPos = i;\n          mr.mark(Number.MAX_VALUE);\n        })\n      ),\n      actionByType.process.pipe(\n        op.tap(({payload}) => {\n          currPos = payload.i;\n          predicateStep.dispatcher.process(payload);\n        })\n      ),\n      predActions.failed.pipe(\n        op.tap(() => {\n          dispatcher.sucess({start: startPos, end: currPos});\n          mr.replay(startPos);\n        })\n      )\n    ).subscribe();\n    return {dispatcher, actions};\n  };\n}\n\ninterface LoopOptions {\n  laNum?: number;\n  /** default is true */\n  greedy?: boolean;\n  minTimes?: number;\n  maxTimes?: number;\n}\n\nconst defaultLoopOptions = {greedy: true, laNum: 2, minTimes: 0, maxTimes: Number.MAX_VALUE};\n\n/** Loop */\nexport function loop(factory: StepFactory, opts?: LoopOptions) {\n  return (mr: MarkAndReplay) => {\n    const {dispatcher, actions} = createStep();\n    let options: Required<LoopOptions>;\n    if (opts == null) {\n      options = defaultLoopOptions;\n    } else {\n      options = {...defaultLoopOptions, ...opts};\n    }\n    const actionByType = splitActionByType(actions);\n    let loopCount = 0;\n    let currentLoopable: ReturnType<typeof createStep>;\n    let markedPos: number;\n    let startPosition = -1;\n    let currPostion = -1;\n    let loopResults = [] as PositionInfo[];\n\n    const markAtLoopableBegin = () => {\n      actionByType.process.pipe(\n        op.take(1),\n        op.map(({payload}) => {\n          markedPos = payload.i;\n          mr.mark(options.laNum);\n        })\n      ).subscribe();\n    };\n\n    markAtLoopableBegin();\n\n    const createNewLoopable = () => {\n      currentLoopable = factory(mr);\n      const childStepActions = splitActionByType(currentLoopable.actions);\n      rx.merge(\n        rx.merge(\n          childStepActions.sucess.pipe(\n            op.map(loopResult => {\n              loopResults.push(loopResult.payload);\n              loopCount++;\n              if (loopCount < options.maxTimes) {\n                markAtLoopableBegin();\n                createNewLoopable();\n              } else {\n                const result: PositionInfo = {\n                  start: startPosition,\n                  end: currPostion + 1,\n                  children: loopResults\n                } as PositionInfo;\n                dispatcher.sucess(result);\n              }\n            })\n          ),\n          childStepActions.failed.pipe(\n            op.map(({payload: reason}) => {\n              if (loopCount > options.minTimes) {\n                const result: PositionInfo = {\n                  start: startPosition,\n                  end: markedPos,\n                  children: loopResults\n                } as PositionInfo;\n                dispatcher.sucess(result);\n                mr.replay(markedPos);\n              } else {\n                dispatcher.failed(reason);\n              }\n            })\n          )\n        ).pipe(op.take(1))\n      ).pipe(\n        op.takeUntil(rx.merge(actionByType.sucess, actionByType.failed))\n      ).subscribe();\n    };\n\n    createNewLoopable();\n\n    actionByType.process.pipe(\n      op.map(({payload}) => {\n        if (startPosition === -1) {\n          startPosition = payload.i;\n        }\n        currPostion = payload.i;\n        currentLoopable.dispatcher.process(payload);\n      })\n    ).pipe(\n      op.takeUntil(rx.merge(actionByType.sucess, actionByType.failed))\n    ).subscribe();\n    return {dispatcher, actions};\n  };\n}\n\nexport function parse<T>(stateMachine: StepFactory, debug = false) {\n  return (input$: rx.Observable<T>) => {\n    return rx.defer(() => {\n      const mark$ = new rx.Subject<number>();\n      const replay$ = new rx.Subject<number>();\n      const mr: MarkAndReplay = {\n        mark(laNum: number) {\n          mark$.next(laNum);\n        },\n        replay(pos: number) {\n          replay$.next(pos);\n        }\n      };\n\n      const rootStep = stateMachine(mr);\n      const actionByType = splitActionByType(rootStep.actions);\n\n      return rx.merge(\n        rx.merge(actionByType.sucess, actionByType.failed)\n          .pipe(\n            op.take(1)\n        ),\n\n        debug ? rootStep.actions.pipe(\n          // eslint-disable-next-line no-console\n          op.tap(action => console.log('::', action)),\n          op.ignoreElements()\n        ) : rx.EMPTY,\n\n        // input$ must be the last one being subscribed in merge list, otherwise other subscription night don't have change to \n        // observe emitted result after input$.pipe() has completed\n        input$.pipe(\n          cacheAndReplay(mark$, replay$),\n          op.map(({value, idx}, totalIndex) => {\n            if (debug) {\n              // eslint-disable-next-line no-console\n              console.log(`[${totalIndex}] offset:${idx}, value: ${'' + value}`);\n            }\n            rootStep.dispatcher.process({d: value, i: idx});\n          }),\n          op.takeUntil(rx.merge(actionByType.sucess, actionByType.failed)),\n          op.ignoreElements()\n        )\n      );\n    });\n  };\n}\n\nexport function test() {\n  rx.from('abcxdefdef1'.split('')).pipe(\n    parse(scope('hellow', [\n        cmp('ab'),\n        choice(2, cmp('1x'), cmp('cx')),\n        loop(scope('loop de', [cmp('def')])),\n        cmp('1')\n      ]), true\n    ),\n    // eslint-disable-next-line no-console\n    op.tap(r => console.log('---> ', JSON.stringify(r, null, '  ')))\n  ).subscribe();\n}\n"]}