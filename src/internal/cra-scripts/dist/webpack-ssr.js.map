{"version":3,"file":"webpack-ssr.js","sourceRoot":"","sources":["webpack-ssr.ts"],"names":[],"mappings":";;;;AAAA,wDAAwB;AAExB,sCAA4C;AAE5C,MAAM,GAAG,GAAG,cAAM,CAAC,SAAS,CAAC,8BAA8B,CAAC,CAAC;AAG7D;;;;;;;GAOG;AACH,SAAgB,MAAM,CAAC,YAAoB,EAAE,MAAqB,EAAE,QAAkB;IACpF,8CAA8C;IAC9C,+BAA+B;IAC/B,MAAM,CAAC,KAAK,GAAG,CAAC,cAAI,CAAC,OAAO,CAAC,sBAAsB,CAAC,CAAC,CAAC;IACtD,mDAAmD;IACnD,MAAM,CAAC,MAAO,CAAC,IAAI,GAAG,cAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;IAChD,MAAM,CAAC,MAAO,CAAC,QAAQ,GAAG,WAAW,CAAC;IACtC,MAAM,CAAC,MAAO,CAAC,aAAa,GAAG,iBAAiB,CAAC;IACjD,MAAM,CAAC,MAAO,CAAC,aAAa,GAAG,UAAU,CAAC;IAE1C,MAAM,CAAC,OAAQ,CAAC,UAAU,GAAG,CAAC,MAAM,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC;IAC3D,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,MAAM,CAAC,YAAY,GAAG;QACpB,QAAQ,EAAE,KAAK;QACf,0BAA0B;QAC1B,WAAW,EAAE;YACX,MAAM,EAAE,KAAK;YACb,IAAI,EAAE,KAAK;YACX,WAAW,EAAE;gBACX,UAAU,EAAE;oBACV,IAAI,EAAE,aAAa;oBACnB,MAAM,EAAE,OAAO;oBACf,OAAO,EAAE,IAAI;oBACb,IAAI,EAAE,wBAAwB;oBAC9B,QAAQ,EAAE,CAAC;iBACZ;aACF;SACF;KACF,CAAC;IAEF,MAAM,CAAC,SAAS,GAAG;QACjB,iBAAiB;QACjB,mBAAmB;QACnB,kBAAkB;QAClB,sBAAsB;QACtB,cAAc;QACd,eAAe;QACf,CAAC,EAAC,OAAO,EAAC,EAAE,QAAgG,EAAE,EAAE;YAC9G,IAAI,OAAO,IAAI,IAAI;gBACjB,OAAO,QAAQ,EAAE,CAAC;YACpB,8CAA8C;YAC9C,IAAI,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,cAAI,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE;gBAC1D,OAAO,QAAQ,EAAE,CAAC;aACnB;YACD,IAAI;gBACF,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;gBACzB,QAAQ,CAAC,SAAS,EAAE,WAAW,GAAG,OAAO,CAAC,CAAC;aAC5C;YAAC,WAAM;gBACN,GAAG,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;gBAC7B,oDAAoD;gBACpD,QAAQ,EAAE,CAAC;aACZ;QACH,CAAC;KACF,CAAC;IACF,OAAO,MAAM,CAAC;AAChB,CAAC;AAvDD,wBAuDC","sourcesContent":["import Path from 'path';\nimport {Configuration} from 'webpack';\nimport {logger as log4js} from '@wfh/plink';\n\nconst log = log4js.getLogger('@wfh/cra-scripts.webpack-lib');\n\n\n/**\n * process.env.INLINE_RUNTIME_CHUNK = 'false' must be set before goes to react-scripts's webpack configure\n * \n * entry file should be replaced with a server version App.tsx, which using staticRoute\n * @param buildPackage \n * @param config \n * @param nodePath \n */\nexport function change(buildPackage: string, config: Configuration, nodePath: string[]) {\n  // process.env.INLINE_RUNTIME_CHUNK = 'false';\n  // config.mode = 'development';\n  config.entry = [Path.resolve('./src/App.server.tsx')];\n  // config.entry = [Path.resolve('./src/test.tsx')];\n  config.output!.path = Path.resolve('ssr-build');\n  config.output!.filename = '[name].js';\n  config.output!.chunkFilename = '[name].chunk.js';\n  config.output!.libraryTarget = 'commonjs';\n\n  config.resolve!.mainFields = ['main', 'module', 'browser'];\n  config.target = 'node';\n  config.optimization = {\n    minimize: false,\n    // runtimeChunk: 'single',\n    splitChunks: {\n      chunks: 'all',\n      name: false,\n      cacheGroups: {\n        lazyVendor: {\n          name: 'lazy-vendor',\n          chunks: 'async',\n          enforce: true,\n          test: /[\\\\/]node_modules[\\\\/]/,\n          priority: 1\n        }\n      }\n    }\n  };\n\n  config.externals = [\n    /^rxjs($|[/\\\\])/i,\n    /^lodash($|[/\\\\])/i,\n    /^react($|[/\\\\])/i,\n    /^react-dom($|[/\\\\])/i,\n    // externals()\n    // /^@angular/,\n    ({request}, callback: (error?: Error, result?: string | boolean | string[] | {[index: string]: any}) => void) => {\n      if (request == null)\n        return callback();\n      // Absolute & Relative paths are not externals\n      if (/^\\.{0,2}\\//.test(request) || Path.isAbsolute(request)) {\n        return callback();\n      }\n      try {\n        require.resolve(request);\n        callback(undefined, 'commonjs ' + request);\n      } catch {\n        log.info('bundled', request);\n        // Node couldn't find it, so it must be user-aliased\n        callback();\n      }\n    }\n  ];\n  return config;\n}\n"]}