{"version":3,"file":"tsd-generate.js","sourceRoot":"","sources":["tsd-generate.ts"],"names":[],"mappings":";;;;AACA,sCAA+C;AAE/C,4DAAuB;AACvB,oEAA4B;AAC5B,mCAAmD;AACnD,mCAAkE;AAClE,mCAAsC;AAE/B,KAAK,UAAU,QAAQ,CAAC,QAAmB,EAAE,qBAAwD,EAAE;IAE5G,IAAI,QAAQ,IAAI,IAAI,EAAE;QACpB,MAAM,IAAI,GAAG,IAAA,qBAAa,GAAE,CAAC;QAC7B,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,WAAC,OAAA,MAAA,KAAK,CAAC,GAAG,0CAAE,IAAI,CAAA,EAAA,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,IAAI,CAAa,CAAC;KAC/F;IAED,MAAM,IAAI,GAAG,CAAC,GAAG,IAAA,2BAAmB,EAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE;QAC7D,IAAI,GAAG,IAAI,IAAI,EAAE;YACf,MAAM,IAAI,KAAK,CAAC,wBAAwB,QAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;SACzD;QACD,OAAO,GAAG,CAAC;IACb,CAAC,CAAC,CAAC;IAEH,MAAM,mBAAmB,qBAA0C,kBAAkB,CAAC,CAAC;IACvF,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE;QACtB,IAAI,mBAAmB,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,IAAI,EAAE;YACzC,mBAAmB,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG;gBAC9B,OAAO,EAAE,OAAO;gBAChB,MAAM,EAAE,EAAE;gBACV,KAAK,EAAE,CAAC,gBAAC,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,EAAE,0BAAkB,EAAE,6BAAqB,CAAC,CAAC;aACzG,CAAC;SACH;KACF;IACD,kCAAkC;IAClC,MAAM,UAAU,GAAgB;QAC9B,OAAO,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,IAAA,qBAAa,GAAE,CAAC,KAAK;QACrF,UAAU,EAAE,EAAE;QACd,kBAAkB,EAAE,mBAAmB;KACxC,CAAC;IACF,MAAM,EAAC,GAAG,EAAC,GAAG,OAAO,CAAC,4BAA4B,CAAkB,CAAC;IACrE,UAAU,CAAC,eAAe,GAAG,IAAA,kCAA0B,GAAE,CAAC;IAC1D,MAAM,GAAG,CAAC,UAAU,EAAE,oBAAS,CAAC,CAAC;AACnC,CAAC;AAjCD,4BAiCC","sourcesContent":["import {TscCmdParam} from '@wfh/plink/wfh/dist/ts-cmd';\nimport {findPackagesByNames} from '@wfh/plink';\nimport * as _tscmd from '@wfh/plink/wfh/dist/ts-cmd';\nimport _ from 'lodash';\nimport ts from 'typescript';\nimport {runTsConfigHandlers4LibTsd} from './utils';\nimport {PKG_LIB_ENTRY_PROP, PKG_LIB_ENTRY_DEFAULT} from './types';\nimport {getCmdOptions} from './utils';\n\nexport async function buildTsd(packages?: string[], overridePackgeDirs: TscCmdParam['overridePackgeDirs'] = {}) {\n\n  if (packages == null) {\n    const opts = getCmdOptions();\n    packages = opts.buildTargets.map(entry => entry.pkg?.name).filter(n => n != null) as string[];\n  }\n\n  const pkgs = [...findPackagesByNames(packages)].map((pkg, i) => {\n    if (pkg == null) {\n      throw new Error(`Can not find package ${packages![i]}`);\n    }\n    return pkg;\n  });\n\n  const _overridePackgeDirs: TscCmdParam['overridePackgeDirs'] = {...overridePackgeDirs};\n  for (const pkg of pkgs) {\n    if (_overridePackgeDirs[pkg.name] == null) {\n      _overridePackgeDirs[pkg.name] = {\n        destDir: 'build',\n        srcDir: '',\n        files: [_.get(pkg.json.plink ? pkg.json.plink : pkg.json.dr, PKG_LIB_ENTRY_PROP, PKG_LIB_ENTRY_DEFAULT)]\n      };\n    }\n  }\n  // const targetPackage = pkg.name;\n  const workerData: TscCmdParam = {\n    package: pkgs.map(pkg => pkg.name), ed: true, jsx: true, watch: getCmdOptions().watch,\n    pathsJsons: [],\n    overridePackgeDirs: _overridePackgeDirs\n  };\n  const {tsc} = require('@wfh/plink/wfh/dist/ts-cmd') as typeof _tscmd;\n  workerData.compilerOptions = runTsConfigHandlers4LibTsd();\n  await tsc(workerData, ts as any);\n}\n"]}