{"version":3,"file":"webpack-dll.js","sourceRoot":"","sources":["webpack-dll.ts"],"names":[],"mappings":"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","sourcesContent":["import Path from 'path';\nimport {log4File, config as plinkConfig} from '@wfh/plink';\nimport {DllPlugin, DllReferencePlugin, Configuration} from 'webpack';\nimport {CommandOption} from './build-options';\n\nconst log = log4File(__filename);\n\nexport function extractDllName(entries: CommandOption['buildTargets']) {\n  const firstEntryPkg = entries[0].pkg;\n  if (firstEntryPkg == null)\n    throw new Error(`For DLL build, the first entry must be inside a Plink package of current workspace, ${entries[0].file}`);\n\n  const parsed = Path.parse(entries[0].file!);\n  const firstEntryPathWithoutSuffix = Path.resolve(parsed.dir, parsed.name);\n\n  let requirePath = firstEntryPkg.name + '/' +\n    Path.relative(firstEntryPkg.realPath, firstEntryPathWithoutSuffix); // remove optional file extension name\n  if (Path.sep === '\\\\')\n    requirePath = requirePath.replace(/\\\\/g, '/');\n\n  const dllName = /[^/\\\\]+$/.exec(requirePath)![0];\n  return [dllName, requirePath] as const;\n}\n\nexport function setupDllPlugin(entries: CommandOption['buildTargets'], config: Configuration, pluginConstFinder: (moduleName: string) => any) {\n  const [dllName, requirePath] = extractDllName(entries);\n  config.entry = {\n    [dllName]: entries.map(en => {\n      if (en.file == null)\n        log.error(`Invalid entry: ${en.pkg}`);\n      return en.file;\n    }).filter(file => file != null) as string[]\n  };\n\n  log.info('DLL library name:', requirePath);\n\n  config.output!.filename = '[name].js';\n  config.output!.chunkFilename = '[name].chunk.js';\n  config.output!.library = {\n    type: 'global',\n    name: '_dll_' + dllName\n  };\n\n  config.optimization!.runtimeChunk = false;\n  if (config.optimization && config.optimization.splitChunks) {\n    config.optimization.splitChunks = {\n      cacheGroups: {default: false}\n    };\n  }\n\n  // ---- Plugins filter ----\n  const pluginsToRemove = [\n    // require(Path.resolve('node_modules/react-dev-utils/ForkTsCheckerWebpackPlugin')),\n    pluginConstFinder('html-webpack-plugin'),\n    pluginConstFinder('webpack-manifest-plugin').WebpackManifestPlugin,\n    pluginConstFinder('react-dev-utils/InterpolateHtmlPlugin'),\n    pluginConstFinder('react-dev-utils/InlineChunkHtmlPlugin'),\n    pluginConstFinder('webpack').HotModuleReplacementPlugin\n  ];\n  config.plugins = config.plugins!.filter(plugin => {\n    return pluginsToRemove.every(cls => !(plugin instanceof cls));\n  });\n\n  const manifestFile = plinkConfig.resolve('destDir', dllName + '.dll.manifest.json');\n\n  config.plugins.push(\n    new DllPlugin({\n      path: manifestFile,\n      format: true\n      // name: '[name]_[chunkhash]'\n    })\n  );\n  log.info('DLL manifest:', manifestFile);\n}\n\nexport function outputPathForDllName(dllName: string) {\n  return plinkConfig.resolve('staticDir', 'dll', dllName);\n}\n\n/**\n * Refer to https://github.com/webpack/webpack/blob/main/test/configCases/dll-plugin/2-use-dll-without-scope/webpack.config.js\n * @returns DLL js files paths\n */\nexport function setupDllReferencePlugin(manifestFiles: string[], config: Configuration) {\n  if (config.optimization == null)\n    config.optimization = {};\n  config.optimization.moduleIds = 'named';\n\n  return manifestFiles.map(manifestFile => {\n    const m = /([^/\\\\.]+)[^/\\\\]*?$/.exec(manifestFile);\n    if (m == null)\n      return false;\n    const name = '_dll_' + m[1];\n\n    config.plugins!.push(new DllReferencePlugin({\n      manifest: manifestFile,\n      name, // (It must be same as Dll library.name) offical description: The name where the dll is exposed (external name, defaults to manifest.name), In example, it is: dll js file path\n      sourceType: 'global'\n    }));\n    log.info('Dll Reference:', manifestFile);\n\n    let outputPath = Path.relative(plinkConfig.resolve('staticDir'), outputPathForDllName(m[1]));\n    if (Path.sep === '\\\\')\n      outputPath = outputPath.replace(/\\\\/g, '/');\n\n    return outputPath + '/' + m[1] + '.js';\n  }).filter(v => v) as string[];\n}\n"]}