{"version":3,"file":"fork-ts-checker-extend.js","sourceRoot":"","sources":["fork-ts-checker-extend.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * This file is not used actually. This is an attempt to patch Tsconfig file of fock-ts-checker-webpack-plugin 4.1.6.\n * The actual working solution is hack-fork-ts-checker.ts\n */\n\nimport Path from 'path';\nimport fs from 'fs';\nimport ForkTsCheckerWebpackPlugin from 'fork-ts-checker-webpack-plugin';\nimport {closestCommonParentDir} from '@wfh/plink/wfh/dist/utils/misc';\nimport {getState} from '@wfh/plink/wfh/dist/package-mgr';\nimport {setTsCompilerOptForNodePath, plinkEnv} from '@wfh/plink';\nimport ts from 'typescript';\nimport {runTsConfigHandlers} from './utils';\n// const log = log4File(__filename);\n\nexport class ForkTsCheckerExtend extends ForkTsCheckerWebpackPlugin {\n\n  constructor(opts: ConstructorParameters<typeof ForkTsCheckerWebpackPlugin>[0])  {\n    if (opts != null) {\n      const plinkRoot = plinkEnv.rootDir;\n      const rootDir = closestCommonParentDir(Array.from(\n        getState().project2Packages.keys())\n        .map(prjDir => Path.resolve(plinkRoot, prjDir))).replace(/\\\\/g, '/');\n\n      const tsconfigJson: {compilerOptions: any; include?: string[]} =\n        ts.readConfigFile(opts.tsconfig!, (file) => fs.readFileSync(file, 'utf-8')).config;\n      const tsconfigDir = Path.dirname(opts.tsconfig!);\n\n      // CRA does not allow we configure \"compilerOptions.paths\"\n      // (see create-react-app/packages/react-scripts/scripts/utils/verifyTypeScriptSetup.js)\n      // therefore, initial paths is always empty.\n      const pathMapping: {[key: string]: string[]} = tsconfigJson.compilerOptions.paths = {};\n      if (tsconfigJson.compilerOptions.baseUrl == null) {\n        tsconfigJson.compilerOptions.baseUrl = './';\n      }\n      for (const [name, {realPath}] of getState().srcPackages.entries() || []) {\n        const realDir = Path.relative(tsconfigDir, realPath).replace(/\\\\/g, '/');\n        pathMapping[name] = [realDir];\n        pathMapping[name + '/*'] = [realDir + '/*'];\n      }\n\n      if (getState().linkedDrcp) {\n        const drcpDir = Path.relative(tsconfigDir, getState().linkedDrcp!.realPath).replace(/\\\\/g, '/');\n        pathMapping['@wfh/plink'] = [drcpDir];\n        pathMapping['@wfh/plink/*'] = [drcpDir + '/*'];\n      }\n      tsconfigJson.compilerOptions.paths = pathMapping;\n\n      setTsCompilerOptForNodePath(tsconfigDir, './', tsconfigJson.compilerOptions, {\n        workspaceDir: plinkEnv.workDir || process.cwd()\n      });\n      runTsConfigHandlers(tsconfigJson.compilerOptions);\n\n      tsconfigJson.include = [Path.relative(plinkEnv.workDir || process.cwd(), process.env._plink_cra_scripts_indexJs!)];\n      tsconfigJson.compilerOptions.rootDir = rootDir;\n      opts.compilerOptions = tsconfigJson.compilerOptions;\n    }\n    super(opts);\n  }\n}\n"]}