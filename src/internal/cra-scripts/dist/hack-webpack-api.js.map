{"version":3,"file":"hack-webpack-api.js","sourceRoot":"","sources":["hack-webpack-api.ts"],"names":[],"mappings":";;;;AAAA,sDAAsD;AACtD,4DAA4D;AAC5D,wDAAwB;AAExB,0DAA0B;AAC1B,mCAAsC;AACtC,qGAAqG;AACrG,MAAM,sBAAsB,GAAG,OAAO,CAAC,uCAAuC,CAAC,CAAC;AAEhF;;;;GAIG;AACH,SAAgB,oBAAoB;IAClC,MAAM,OAAO,GAAoB,OAAO,CAAC,cAAI,CAAC,OAAO,CAAC,sBAAsB,CAAC,CAAC,CAAC;IAC/E,IAAI,IAAA,qBAAa,GAAE,CAAC,SAAS,KAAK,KAAK,IAAI,CAAC,IAAA,qBAAa,GAAE,CAAC,KAAK,EAAE;QACjE,OAAO,OAAO,CAAC;KAChB;IACD,MAAM,MAAM,GAAG;QACb,MAAM,qBAAqB,GAAkC,OAAO,CAAC,uCAAuC,CAAC,CAAC;QAC9G,8CAA8C;QAC9C,MAAM,QAAQ,GAA+B,OAAO,CAAC,KAAK,CAAC,MAAM,EAAE,SAAgB,CAAC,CAAC;QACrF,gCAAgC;QAChC,QAAQ,CAAC,GAAG,GAAG,CAAC,OAAO,EAAE,EAAE;YACzB,OAAO,QAAQ,CAAC,KAAK,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE;gBACvC,IAAI,QAAmD,CAAC;gBACxD,IAAI,GAAG,EAAE;oBACP,IAAI,UAAU,GAAG,GAAG,CAAC,OAAO,CAAC;oBAE7B,gDAAgD;oBAChD,IAAI,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,EAAE,aAAa,CAAC,EAAE;wBAC5D,UAAU;4BACR,yCAAyC;gCACxC,GAAW,CAAC,WAAW,CAAC,QAAQ,CAAC;qBACrC;oBACD,QAAQ,GAAG,qBAAqB,CAAC;wBAC/B,MAAM,EAAE,CAAC,UAAU,CAAC;wBACpB,QAAQ,EAAE,EAAE;qBACN,CAAC,CAAC;iBACX;qBAAM,IAAI,KAAK,EAAE;oBAChB,QAAQ,GAAG,qBAAqB,CAC9B,KAAK,CAAC,MAAM,CAAC,EAAC,GAAG,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAC,CAAC,CACzD,CAAC;iBACH;gBACD,IAAI,QAAQ,CAAC,MAAM,CAAC,MAAM,EAAE;oBAC1B,yDAAyD;oBACzD,0DAA0D;oBAC1D,IAAI,QAAQ,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;wBAC9B,QAAQ,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;qBAC5B;oBACD,OAAO,CAAC,KAAK,CAAC,eAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;oBACvD,IAAI,QAAQ,CAAC,QAAQ,CAAC,MAAM,EAAE;wBAC5B,sCAAsC;wBACtC,OAAO,CAAC,GAAG,CACT,eAAK,CAAC,MAAM,CACV,gEAAgE;4BAC9D,yCAAyC,CAC5C,CACF,CAAC;qBACH;iBACF;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC;QACF,OAAO,QAAQ,CAAC;IAClB,CAAC,CAAC;IACF,OAAO,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;AACxC,CAAC;AArDD,oDAqDC","sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\nimport Path from 'path';\nimport _webpack from 'webpack';\nimport chalk from 'chalk';\nimport {getCmdOptions} from './utils';\n// Don't install @types/react-dev-utils, it breaks latest html-webpack-plugin's own type definitions \nconst _formatWebpackMessages = require('react-dev-utils/formatWebpackMessages');\n\n/**\n * CRA only has \"build\" command which runs Webpack compiler.run() function, but we want to\n * support \"watch\" function, so hack Webpack's compiler.run() function by replacing it with\n * compiler.watch() function\n */\nexport function hackWebpack4Compiler() {\n  const webpack: typeof _webpack = require(Path.resolve('node_modules/webpack'));\n  if (getCmdOptions().buildType !== 'lib' || !getCmdOptions().watch) {\n    return webpack;\n  }\n  const hacked = function() {\n    const formatWebpackMessages: typeof _formatWebpackMessages = require('react-dev-utils/formatWebpackMessages');\n    // eslint-disable-next-line prefer-rest-params\n    const compiler: ReturnType<typeof webpack> = webpack.apply(global, arguments as any);\n    // const origRun = compiler.run;\n    compiler.run = (handler) => {\n      return compiler.watch({}, (err, stats) => {\n        let messages: ReturnType<typeof _formatWebpackMessages>;\n        if (err) {\n          let errMessage = err.message;\n\n          // Add additional information for postcss errors\n          if (Object.prototype.hasOwnProperty.call(err, 'postcssNode')) {\n            errMessage +=\n              '\\nCompileError: Begins at CSS selector ' +\n              (err as any).postcssNode.selector;\n          }\n          messages = formatWebpackMessages({\n            errors: [errMessage],\n            warnings: []\n          } as any);\n        } else if (stats) {\n          messages = formatWebpackMessages(\n            stats.toJson({all: false, warnings: true, errors: true})\n          );\n        }\n        if (messages.errors.length) {\n          // Only keep the first error. Others are often indicative\n          // of the same problem, but confuse the reader with noise.\n          if (messages.errors.length > 1) {\n            messages.errors.length = 1;\n          }\n          console.error(chalk.red(messages.errors.join('\\n\\n')));\n          if (messages.warnings.length) {\n            // eslint-disable-next-line no-console\n            console.log(\n              chalk.yellow(\n                '\\nTreating warnings as errors because process.env.CI = true.\\n' +\n                  'Most CI servers set it automatically.\\n'\n              )\n            );\n          }\n        }\n      });\n    };\n    return compiler;\n  };\n  return Object.assign(hacked, webpack);\n}\n"]}