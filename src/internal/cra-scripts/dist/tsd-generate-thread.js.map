{"version":3,"file":"tsd-generate-thread.js","sourceRoot":"","sources":["tsd-generate-thread.ts"],"names":[],"mappings":";;AAAA,mDAAwD;AACxD,mFAA2F;AAG3F,CAAC,KAAK;IACJ,IAAI,CAAC,6BAAY,EAAE;QACjB,IAAA,sCAAkB,GAAE,CAAC;QACrB,IAAA,8BAAU,EAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,cAAe,CAAC,CAAC,CAAC;KACrD;IACD,MAAM,EAAC,QAAQ,EAAC,GAAG,OAAO,CAAC,gBAAgB,CAAkB,CAAC;IAC9D,MAAM,QAAQ,EAAE,CAAC;AACnB,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;IACf,IAAI,2BAAU;QACZ,2BAAU,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC","sourcesContent":["import {parentPort, isMainThread} from 'worker_threads';\nimport {initConfig, initAsChildProcess} from '@wfh/plink/wfh/dist/utils/bootstrap-process';\nimport * as tsdGen from './tsd-generate';\n\n(async function() {\n  if (!isMainThread) {\n    initAsChildProcess();\n    initConfig(JSON.parse(process.env.PLINK_CLI_OPTS!));\n  }\n  const {buildTsd} = require('./tsd-generate') as typeof tsdGen;\n  await buildTsd();\n})().catch(err => {\n  if (parentPort)\n    parentPort.postMessage(err);\n});\n"]}