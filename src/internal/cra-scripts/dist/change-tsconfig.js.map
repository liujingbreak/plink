{"version":3,"file":"change-tsconfig.js","sourceRoot":"","sources":["change-tsconfig.ts"],"names":[],"mappings":";;;;AAAA,wDAAwB;AACxB,oDAAoB;AACpB,yDAAsE;AACtE,iEAAyD;AACzD,sCAAgF;AAChF,oEAA4B;AAE5B,mCAA4C;AAC5C,oCAAoC;AAEpC,SAAgB,kBAAkB,CAAC,SAAiB;IAClD,sCAAsC;IACtC,MAAM,OAAO,GAAG,IAAA,6BAAsB,EACpC,KAAK,CAAC,IAAI,CACR,IAAA,sBAAQ,GAAE,CAAC,gBAAgB,CAAC,IAAI,EAAE,CACnC,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,cAAI,CAAC,OAAO,CAAC,gBAAQ,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,CACxD,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;IAEtB,oCAAoC;IAEpC,MAAM,YAAY,GAChB,oBAAE,CAAC,cAAc,CAAC,OAAO,CAAC,GAAG,CAAC,2BAA4B,EACxD,CAAC,IAAI,EAAE,EAAE,CAAC,YAAE,CAAC,YAAY,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC,MAMgC,CAAC;IAC7E,iFAAiF;IACnF,MAAM,WAAW,GAAG,cAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,2BAA4B,CAAC,CAAC;IAE3E,yFAAyF;IACzF,uFAAuF;IACvF,4CAA4C;IAC5C,0FAA0F;IAE1F,IAAI,YAAY,CAAC,eAAe,CAAC,OAAO,IAAI,IAAI,EAAE;QAChD,YAAY,CAAC,eAAe,CAAC,OAAO,GAAG,IAAI,CAAC;KAC7C;IACD,YAAY,CAAC,eAAe,CAAC,gBAAgB,GAAG,KAAK,CAAC;IAEtD,oDAAoD;IAEpD,IAAA,mCAA2B,EAAC,WAAW,EAAE,IAAI,EAAE,YAAY,CAAC,eAAe,EAAE;QAC3E,YAAY,EAAE,gBAAQ,CAAC,OAAO;QAC9B,UAAU,EAAE,IAAI;QAChB,yBAAyB;KAC1B,CAAC,CAAC;IACH,IAAA,2BAAmB,EAAC,YAAY,CAAC,eAAe,CAAC,CAAC;IAElD,YAAY,CAAC,KAAK,GAAG,CAAC,cAAI,CAAC,QAAQ,CAAC,gBAAQ,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC,CAAC;IAClE,YAAY,CAAC,OAAO,GAAG,EAAE,CAAC;IAE1B,YAAY,CAAC,eAAe,CAAC,OAAO,GAAG,OAAO,CAAC;IAC/C,MAAM,EAAE,GAAG,oBAAE,CAAC,0BAA0B,CAAC,YAAY,EAAE,oBAAE,CAAC,GAAG,EAAE,gBAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,EACjG,SAAS,EAAE,OAAO,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC,OAAO,CAAC;IAE9D,OAAO,EAAC,YAAY,EAAE,eAAe,EAAE,EAAE,EAAC,CAAC;AAC7C,CAAC;AAjDD,gDAiDC","sourcesContent":["import Path from 'path';\nimport fs from 'fs';\nimport {closestCommonParentDir} from '@wfh/plink/wfh/dist/utils/misc';\nimport {getState} from '@wfh/plink/wfh/dist/package-mgr';\nimport {setTsCompilerOptForNodePath, plinkEnv/* , log4File*/} from '@wfh/plink';\nimport ts from 'typescript';\nimport {ForkTsCheckerWebpackPluginTypescriptOpts} from './types';\nimport {runTsConfigHandlers} from './utils';\n// const log = log4File(__filename);\n\nexport function changeTsConfigFile(entryFile: string) {\n  // const craOptions = getCmdOptions();\n  const rootDir = closestCommonParentDir(\n    Array.from(\n      getState().project2Packages.keys()\n    ).map(prjDir => Path.resolve(plinkEnv.rootDir, prjDir))\n  ).replace(/\\\\/g, '/');\n\n  // const rootDir = plinkEnv.workDir;\n\n  const tsconfigJson =\n    ts.readConfigFile(process.env._plink_cra_scripts_tsConfig!,\n      (file) => fs.readFileSync(file, 'utf-8')).config as {\n      compilerOptions: {\n        rootDir?: string; baseUrl?: string; paths: {[k: string]: string[]};\n        preserveSymlinks?: boolean;\n      };\n      include?: string[];\n    } & NonNullable<ForkTsCheckerWebpackPluginTypescriptOpts['configOverwrite']>;\n    // JSON.parse(fs.readFileSync(process.env._plink_cra_scripts_tsConfig!, 'utf8'));\n  const tsconfigDir = Path.dirname(process.env._plink_cra_scripts_tsConfig!);\n\n  // CRA does not allow we configure \"compilerOptions.paths\" in _plink_cra_scripts_tsConfig\n  // (see create-react-app/packages/react-scripts/scripts/utils/verifyTypeScriptSetup.js)\n  // therefore, initial paths is always empty.\n  // const pathMapping: {[key: string]: string[]} = tsconfigJson.compilerOptions.paths = {};\n\n  if (tsconfigJson.compilerOptions.baseUrl == null) {\n    tsconfigJson.compilerOptions.baseUrl = './';\n  }\n  tsconfigJson.compilerOptions.preserveSymlinks = false;\n\n  // tsconfigJson.compilerOptions.paths = pathMapping;\n\n  setTsCompilerOptForNodePath(tsconfigDir, './', tsconfigJson.compilerOptions, {\n    workspaceDir: plinkEnv.workDir,\n    noSymlinks: true\n    // realPackagePaths: true\n  });\n  runTsConfigHandlers(tsconfigJson.compilerOptions);\n\n  tsconfigJson.files = [Path.relative(plinkEnv.workDir, entryFile)];\n  tsconfigJson.include = [];\n\n  tsconfigJson.compilerOptions.rootDir = rootDir;\n  const co = ts.parseJsonConfigFileContent(tsconfigJson, ts.sys, plinkEnv.workDir.replace(/\\\\/g, '/'),\n    undefined, process.env._plink_cra_scripts_tsConfig).options;\n\n  return {tsconfigJson, compilerOptions: co};\n}\n"]}