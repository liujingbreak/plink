{"version":3,"file":"hack-fork-ts-checker-worker.js","sourceRoot":"","sources":["hack-fork-ts-checker-worker.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable prefer-rest-params */\n/**\n * @Deprecated\n * For fork-ts-checker-webpack-plugin 4.1.6,\n * patch some dark magic to Typescript compiler\n *  - change ts.compilerHost.readFile()\n *  - change rootNames in parameters of ts.createProgram()\n *  - change compilerOptions.rootDir in parameters of ts.createProgram()\n */\nimport Path from 'path';\nimport {hookCommonJsRequire} from '@wfh/plink/wfh/dist/loaderHooks';\nimport chalk from 'chalk';\nimport ts, {CompilerOptions/* , CompilerHost, CreateProgramOptions*/} from 'typescript';\nimport nodeResolve from 'resolve';\nimport {log4File} from '@wfh/plink';\nimport plink from '__plink';\n\nconst forkTsDir = Path.resolve('node_modules', 'fork-ts-checker-webpack-plugin') + Path.sep;\nconst tsJs = nodeResolve.sync('typescript', {basedir: forkTsDir});\nconst log = log4File(__filename);\n\nlog.info(' fork-ts-checker-webpack-plugin runs, ' + forkTsDir);\n\nconst localTs = require(tsJs) as typeof ts;\nconst cwd = process.cwd();\nconst createWatchCompilerHost = localTs.createWatchCompilerHost;\n\nlocalTs.createWatchCompilerHost = function(this: typeof ts, configFileName: string | string[], optionsToExtend: CompilerOptions | undefined,\n  ...restArgs: unknown[]) {\n\n  // const co = changeTsConfigFile().compilerOptions;\n  // const host: ts.WatchCompilerHost<ts.BuilderProgram> = createWatchCompilerHost.apply(this, [configFileName, co, ...restArgs] as any);\n  // log.info('createWatchCompilerHost:', configFileName);\n  const host: ts.WatchCompilerHost<ts.BuilderProgram> = createWatchCompilerHost.apply(this, [configFileName, optionsToExtend, ...restArgs] as any);\n  const readFile = host.readFile;\n  host.readFile = function(path: string, encoding?: string) {\n    const content = readFile.apply(this, arguments as any);\n    if (!path.endsWith('.d.ts') && !path.endsWith('.json') && content) {\n      log.info('WatchCompilerHost.readFile', path);\n      const changed = plink.browserInjector!.injectToFile(path, content);\n      if (changed !== content) {\n        log.info(Path.relative(cwd, path) + ' is patched');\n        return changed;\n      }\n    }\n    return content;\n  };\n  return host;\n} as typeof createWatchCompilerHost;\n\n// Patch createProgram to change \"rootFiles\"\n// const _createPrm = localTs.createProgram;\n// localTs.createProgram = function(rootNames: readonly string[], options: CompilerOptions, host?: CompilerHost) {\n//   try {\n//     // const co = changeTsConfigFile();\n//     const changedRootNames: string[] = [indexJs.replace(/\\\\/g, '/')];\n//     // Because createProgram() is overloaded, it might accept 1 or 5 parameters\n//     if (arguments.length === 1) {\n//       options = (arguments[0] as CreateProgramOptions).options;\n//       host = (arguments[0] as CreateProgramOptions).host;\n//       (arguments[0] as CreateProgramOptions).rootNames = changedRootNames;\n//     } else {\n//       arguments[0] = changedRootNames;\n//     }\n//     // options.baseUrl = co.baseUrl;\n//     // options.rootDir = co.rootDir;\n//     // options.paths = co.paths;\n//     // options.typeRoots = co.typeRoots;\n\n//     // eslint-disable-next-line no-console\n//     // console.log(chalk.cyan('[hack-for-ts-checker]') + ' ts program \"rootNames\":', (arguments[0] as CreateProgramOptions).rootNames);\n//     // eslint-disable-next-line no-console\n//     // console.log(chalk.cyan('[hack-for-ts-checker]') + ' ts compilerOptions:\\n', options);\n\n//     const program: ts.Program = _createPrm.apply(localTs, arguments as any);\n//     return program;\n//   } catch (ex) {\n//     console.error('[hack-fork-ts-checker-worker] Error', ex);\n//     throw ex;\n//   }\n// } as typeof _createPrm;\n// Object.assign(localTs.createProgram, _createPrm);\n\nhookCommonJsRequire((filename, target, rq, resolve) => {\n  if (filename.startsWith(forkTsDir)) {\n    if (target.indexOf('typescript') >= 0 && resolve(target) === tsJs) {\n      log.info(chalk.cyan('monkey-patch typescript'));\n      return localTs;\n    }\n  }\n});\n"]}