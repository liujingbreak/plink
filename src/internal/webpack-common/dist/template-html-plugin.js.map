{"version":3,"file":"template-html-plugin.js","sourceRoot":"","sources":["template-html-plugin.ts"],"names":[],"mappings":";;;;AAAA;;GAEG;AACH,0CAA0C;AAC1C;;;;;;;GAOG;AACH,kDAA4B;AAE5B,sFAAoD;AACpD,sCAAkC;AAClC,8DAA0B;AAM1B,MAAqB,kBAAkB;IAErC,KAAK,CAAC,QAAkB;QACtB,QAAQ,CAAC,KAAK,CAAC,WAAW,CAAC,GAAG,CAAC,yBAAyB,EAAE,WAAW,CAAC,EAAE;YACtE,6BAAiB;iBACd,QAAQ,CAAC,WAAW,CAAC;iBACrB,sBAAsB,CAAC,GAAG,CAAC,yBAAyB,EAAE,IAAI,CAAC,EAAE;gBAC5D,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBAChC,OAAO,EAAE,IAAA,cAAM,GAAE;oBACjB,KAAK,EAAE,iBAAG;iBACX,CAAC,CAAC;gBACH,OAAO,IAAI,CAAC;YACd,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AAfD,qCAeC;AAED,SAAgB,aAAa,CAAa,IAAY;IACpD,MAAM,OAAO,GAAG,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IAEjC,IAAI,GAAG,OAAO,CAAC;QACb,OAAO,EAAE,IAAA,cAAM,GAAE;QACjB,OAAO;KACR,CAAC,CAAC;IAEH,OAAO,IAAI,CAAC;AACd,CAAC;AATD,sCASC","sourcesContent":["/**\n * @Deprecated not working with Html-webpack-plugin 5.5.x due to it natually supports lodash template\n */\n/* eslint-disable  max-classes-per-file */\n/**\n * For create-react-app, allow lodash template to be used in any \"index.html\" file before it goes to html-webpack-plugin.\n *\n * html-webpack-plugin natually supports template engine like lodash.tempalte, but unfortunately the one in CRA's is not\n * working due to some special configuration from CRA.\n *\n * Support lodash template variable \"_config\" which is a json carries all Plink's configuration properties \n */\nimport * as _ from 'lodash';\nimport { Compiler } from 'webpack';\nimport HtmlWebpackPlugin from 'html-webpack-plugin';\nimport {config} from '@wfh/plink';\nimport api from '__plink';\n\nexport interface TemplateHtmlPluginOptions {\n  htmlFile: string;\n}\n\nexport default class TemplateHtmlPlugin {\n\n  apply(compiler: Compiler) {\n    compiler.hooks.compilation.tap('PlinkTemplateHtmlPlugin', compilation => {\n      HtmlWebpackPlugin\n        .getHooks(compilation)\n        .afterTemplateExecution.tap('PlinkTemplateHtmlPlugin', data => {\n          data.html = _.template(data.html)({\n            _config: config(),\n            __api: api\n          });\n          return data;\n        });\n    });\n  }\n}\n\nexport function transformHtml(this: void, html: string) {\n  const compile = _.template(html);\n\n  html = compile({\n    _config: config(),\n    require\n  });\n\n  return html;\n}\n"]}