{"version":3,"file":"splitChunks.js","sourceRoot":"","sources":["splitChunks.ts"],"names":[],"mappings":";;;;AACA,4DAAuB;AAGvB,MAAM,IAAI,GAAwB;IAChC,YAAY,EAAE,QAAQ;IACtB,WAAW,EAAE;QACX,gBAAgB,EAAE,QAAQ;QAC1B,MAAM,EAAE,KAAK;QACb,WAAW,EAAE;YACX,cAAc,EAAE,KAAK;YACrB,OAAO,EAAE,KAAK;YACd,MAAM,EAAE;gBACN,IAAI,EAAE,QAAQ;gBACd,MAAM,EAAE,SAAS;gBACjB,iBAAiB;gBACjB,IAAI,EAAE,wBAAwB;gBAC9B,QAAQ,EAAE,CAAC;aACZ;YACD,UAAU,EAAE;gBACV,IAAI,EAAE,aAAa;gBACnB,MAAM,EAAE,OAAO;gBACf,iBAAiB;gBACjB,IAAI,EAAE,wBAAwB;gBAC9B,QAAQ,EAAE,CAAC;gBACX,SAAS,EAAE,CAAC;aACb;SACF;KACF;CACF,CAAC;AAUF,SAAwB,gBAAgB,CAAC,MAAwB,EAC/D,gBAAuC;IACvC,IAAI,gBAAgB,EAAE;QACpB,MAAM,EAAE,GAAI,IAAI,CAAC,WAA8C,CAAC,WAAY,CAAC;QAC5E,EAAE,CAAC,UAAyB,CAAC,IAAI,GAAI,EAAE,CAAC,MAAqB,CAAC,IAAI,GAAG,gBAAgB,CAAC;KACxF;IACD,IAAI,MAAM,CAAC,YAAY,IAAI,IAAI;QAC7B,MAAM,CAAC,YAAY,GAAG,EAAE,CAAC;IAC3B,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;AAC3C,CAAC;AATD,mCASC;AAED,SAAgB,2BAA2B,CAAC,MAAwB;IAClE,OAAO,gBAAC,CAAC,GAAG,CAAC,MAAM,EAAE,kDAAkD,CAAiB,CAAC;AAC3F,CAAC;AAFD,kEAEC;AAED,SAAgB,aAAa,CAAC,MAAwB,EAAE,SAAiB,EACvE,IAA2B,EAC3B,SAAmD,OAAO;IAC1D,MAAM,GAAG,GAAG,gBAAC,CAAC,GAAG,CAAC,MAAM,EAAE,sCAAsC,CAA+D,CAAC;IAChI,GAAG,CAAC,SAAS,CAAC,GAAG;QACf,IAAI,EAAE,SAAS;QACf,MAAM;QACN,IAAI;QACJ,OAAO,EAAE,IAAI;QACb,QAAQ,EAAE,CAAC;QACX,SAAS,EAAE,MAAM,KAAK,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;KACtC,CAAC;AACJ,CAAC;AAZD,sCAYC","sourcesContent":["import * as wp from 'webpack';\nimport _ from 'lodash';\nimport {OptimizationOptions, OptimizationSplitChunksOptions} from './webpack-infer-types';\n\nconst base: OptimizationOptions = {\n  runtimeChunk: 'single',\n  splitChunks: {\n    maxAsyncRequests: Infinity,\n    chunks: 'all',\n    cacheGroups: {\n      defaultVendors: false,\n      vendors: false,\n      vendor: {\n        name: 'vendor',\n        chunks: 'initial',\n        // enforce: true,\n        test: /[/\\\\]node_modules[\\\\/]/,\n        priority: 1\n      },\n      lazyVendor: {\n        name: 'lazy-vendor',\n        chunks: 'async',\n        // enforce: true,\n        test: /[/\\\\]node_modules[\\\\/]/,\n        priority: 1,\n        minChunks: 2\n      }\n    }\n  }\n};\n\ntype CacheGroup = Exclude<NonNullable<OptimizationSplitChunksOptions['cacheGroups']> extends\n// eslint-disable-next-line @typescript-eslint/ban-types\nRecord<string, infer K> ? K : unknown, string | Function | RegExp | false>;\n\nexport type ModuleTestFn = (\n  module: wp.NormalModule, graphs: {chunkGraph: unknown; moduleGraph: unknown}\n) => boolean;\n\nexport default function setupSplitChunks(config: wp.Configuration,\n  vendorModuleTest: RegExp | ModuleTestFn) {\n  if (vendorModuleTest) {\n    const cp = (base.splitChunks as OptimizationSplitChunksOptions).cacheGroups!;\n    (cp.lazyVendor as CacheGroup).test = (cp.vendor as CacheGroup).test = vendorModuleTest;\n  }\n  if (config.optimization == null)\n    config.optimization = {};\n  Object.assign(config.optimization, base);\n}\n\nexport function getAngularVendorChunkTestFn(config: wp.Configuration): ModuleTestFn {\n  return _.get(config, 'optimization.splitChunks.cacheGroups.vendor.test') as ModuleTestFn;\n}\n\nexport function addSplitChunk(config: wp.Configuration, chunkName: string,\n  test: RegExp | ModuleTestFn,\n  chunks: OptimizationSplitChunksOptions['chunks'] = 'async') {\n  const cps = _.get(config, 'optimization.splitChunks.cacheGroups') as NonNullable<OptimizationSplitChunksOptions['cacheGroups']>;\n  cps[chunkName] = {\n    name: chunkName,\n    chunks,\n    test,\n    enforce: true,\n    priority: 2,\n    minChunks: chunks === 'async' ? 2 : 1\n  };\n}\n\n"]}