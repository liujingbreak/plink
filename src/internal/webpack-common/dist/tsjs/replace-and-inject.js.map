{"version":3,"file":"replace-and-inject.js","sourceRoot":"","sources":["replace-and-inject.ts"],"names":[],"mappings":";;;AAAA,0DAAwB;AAExB,oEAA4B;AAC5B,mCAAqC;AACrC,kFAA+C;AAE/C,IAAI,aAA4B,CAAC;AAEjC,SAAwB,OAAO,CAAC,IAAY,EAAE,MAAc,EAAE,QAAY,EAAE,YAAoB,EAC9F,gBAA0C;IAE1C,QAAQ,CAAC,gBAAgB,CAAC,oBAAS,CAAC,CAAC;IACrC,wCAAwC;IACxC,IAAI,EAAC,QAAQ,EAAE,GAAG,EAAE,OAAO,EAAC,GAAG,QAAQ,CAAC,yBAAyB,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IAChF,IAAI,aAAa,IAAI,IAAI,EAAE;QACzB,aAAa,GAAG,IAAI,0BAAa,CAAC,YAAY,EAAG,eAAW,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,CAAC,eAAG,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC;KACxG;IAED,IAAI,MAAM,GAAG,CAAC,CAAC;IACf,MAAM,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,EAAE,EAAE,EAAE;QAC7C,MAAM,IAAI,EAAE,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,KAAK,CAAC,CAAC;QACtD,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACrB,OAAO,OAAO,CAAC;IACjB,CAAC,EAAE,EAAc,CAAC,CAAC;IAEnB,QAAQ,GAAG,aAAa,CAAC,KAAK,CAAC,IAAI,EAAE,QAAQ,EAAE,gBAAgB,EAAE,GAAU,EAAE,GAAG,CAAC,EAAE;QACjF,MAAM,GAAG,GAAG,IAAA,sBAAa,EAAC,OAAO,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,WAAW,EAAE,EAAE,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAChG,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,GAAG,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;YACxC,OAAO,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;SAC3B;QACD,OAAO,GAAG,CAAC;IACb,CAAC,CAAC,CAAC;IACH,OAAO,QAAQ,CAAC;AAClB,CAAC;AAzBD,0BAyBC","sourcesContent":["import api from '__api';\nimport RJ from 'require-injector';\nimport ts from 'typescript';\nimport {sortedIndexBy} from 'lodash';\nimport TsPreCompiler from './tsjs-replacement';\n\nlet tsPreCompiler: TsPreCompiler;\n\nexport default function replace(file: string, source: string, injector: RJ, tsConfigFile: string,\n  compileExpContex: {[varName: string]: any}) {\n\n  injector.changeTsCompiler(ts as any);\n  // eslint-disable-next-line prefer-const\n  let {replaced, ast, patches} = injector.injectToFileWithPatchInfo(file, source);\n  if (tsPreCompiler == null) {\n    tsPreCompiler = new TsPreCompiler(tsConfigFile, (api as any).ssr, file => api.findPackageByFile(file));\n  }\n\n  let offset = 0;\n  const offsets = patches.reduce((offsets, el) => {\n    offset += el.replacement.length - (el.end - el.start);\n    offsets.push(offset);\n    return offsets;\n  }, [] as number[]);\n\n  replaced = tsPreCompiler.parse(file, replaced, compileExpContex, ast as any, pos => {\n    const idx = sortedIndexBy(patches, {start: pos, end: pos, replacement: ''}, el => el.start) - 1;\n    if (idx >= 0 && idx < offsets.length - 1) {\n      return pos + offsets[idx];\n    }\n    return pos;\n  });\n  return replaced;\n}\n"]}