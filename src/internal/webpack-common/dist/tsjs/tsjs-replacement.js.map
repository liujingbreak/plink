{"version":3,"file":"tsjs-replacement.js","sourceRoot":"","sources":["tsjs-replacement.ts"],"names":[],"mappings":"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","sourcesContent":["// import * as wp from 'webpack';\nimport * as Path from 'path';\nimport vm from 'vm';\nimport * as ts from 'typescript';\nimport {SyntaxKind as sk, CompilerOptions} from 'typescript';\nimport BrowserPackage from '@wfh/plink/wfh/dist/packageNodeInstance';\nimport {ReplacementInf} from '@wfh/plink/wfh/dist/utils/patch-text';\nimport * as textPatcher from '@wfh/plink/wfh/dist/utils/patch-text';\nimport { readTsConfig, transpileSingleTs } from '@wfh/plink/wfh/dist/ts-compiler';\nimport {log4File} from '@wfh/plink';\nimport chalk from 'chalk';\nimport {has} from 'lodash';\nimport ImportClauseTranspile from './default-import-ts-transpiler';\n\nconst log = log4File(__filename);\nexport {ReplacementInf};\nexport type TsHandler = (ast: ts.SourceFile) => ReplacementInf[];\nexport default class TsPreCompiler {\n  tsCo: CompilerOptions;\n\n\n  importTranspiler: ImportClauseTranspile | undefined;\n\n  constructor(tsConfigFile: string, isServerSide: boolean,\n    private findPackageByFile: (file: string) => BrowserPackage | null | undefined) {\n    this.tsCo = readTsConfig(tsConfigFile, ts as any) as ts.CompilerOptions;\n    if (isServerSide) {\n      this.importTranspiler = new ImportClauseTranspile({\n        modules: [/^lodash(?:\\/|$)/]\n      });\n    }\n  }\n\n  /**\n   * replaceContext can put any Javascript object which contains properties or memember functions\n   * @param file \n   * @param source \n   * @param replaceContext \n   * @param compiledSource \n   * @param astPositionConvert \n   */\n  parse(file: string, source: string, replaceContext: {[key: string]: any}, compiledSource?: ts.SourceFile,\n    astPositionConvert?: (pos: number) => number): string {\n    const pk = this.findPackageByFile(file);\n    if (pk == null)\n      return source;\n\n    const ast = compiledSource || ts.createSourceFile(file, source, ts.ScriptTarget.ESNext,\n      true, ts.ScriptKind.TSX);\n    // this._callTsHandlers(tsHandlers);\n\n    const replacements: ReplacementInf[] = [];\n    for(const stm of ast.statements) {\n      this.traverseTsAst(stm, replaceContext, replacements, astPositionConvert);\n    }\n    textPatcher._sortAndRemoveOverlap(replacements, true, source);\n    // Remove overlaped replacements to avoid them getting into later `vm.runInNewContext()`,\n    // We don't want to single out and evaluate lower level expression like `__api.packageName` from\n    // `__api.config.get(__api.packageName)`, we just evaluate the whole latter expression\n\n\n    const context = vm.createContext(replaceContext);\n\n    for (const repl of replacements) {\n      const origText = repl.text!;\n      let res;\n      try {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        res = vm.runInNewContext(transpileSingleTs(origText, this.tsCo as any, ts as any), context);\n        repl.text = JSON.stringify(res);\n        // To bypass TS error \"Unreachable code detected\" if\n        // compiler option \"allowUnreachableCode: false\"\n        // e.g. if (false) {...} --> if (!!false) {...}\n        if (repl.text === 'true' || repl.text === 'false')\n          repl.text = '!!' + repl.text;\n        else if (repl.text === undefined) {\n          // JSON.stringify(undefined) will not return string of \"undefined\", but actual undefined\n          repl.text = 'undefined';\n        }\n      } catch(ex) {\n        log.error('Evaluate %s, result:', origText, res);\n        throw ex;\n      }\n      log.debug(`Evaluate \"${chalk.yellow(origText)}\" to: ${chalk.cyan(repl.text)} in\\n\\t` +\n        Path.relative(process.cwd(), file));\n    }\n\n    if (this.importTranspiler)\n      this.importTranspiler.parse(ast, replacements);\n\n    if (replacements.length === 0)\n      return source;\n    textPatcher._sortAndRemoveOverlap(replacements, true, source);\n    return textPatcher._replaceSorted(source, replacements);\n  }\n\n  // getApiForFile(file: string) {\n  //   api.findPackageByFile(file);\n  // }\n\n  protected traverseTsAst(ast: ts.Node,\n    replaceContext: {[key: string]: any},\n    replacements: ReplacementInf[],\n    astPositionConvert?: (pos: number) => number,\n    level = 0\n  ) {\n    try {\n      if (ast.kind === sk.PropertyAccessExpression || ast.kind === sk.ElementAccessExpression) {\n        const node = ast as (ts.PropertyAccessExpression | ts.ElementAccessExpression);\n        if (node.expression.kind === sk.Identifier && has(replaceContext, node.expression.getText())) {\n          // keep looking up for parents until it is not CallExpression, ElementAccessExpression or PropertyAccessExpression\n          const evaluateNode = this.goUpToParentExp(node);\n          let start = evaluateNode.getStart();\n          let end = evaluateNode.getEnd();\n          const len = end - start;\n          if (astPositionConvert) {\n            start = astPositionConvert(start);\n            end = start + len;\n          }\n          replacements.push({start, end, text: evaluateNode.getText()});\n          return replacements;\n        }\n      }\n    } catch (e) {\n      log.error('traverseTsAst failure', e);\n      throw e;\n    }\n    ast.forEachChild((sub: ts.Node) => {\n      this.traverseTsAst(sub, replaceContext, replacements, astPositionConvert, level + 1);\n    });\n  }\n\n  /**\n\t * keep looking up for parents until it is not CallExpression, ElementAccessExpression or PropertyAccessExpression\n\t */\n  protected goUpToParentExp(target: ts.Node): ts.Node {\n    let currNode = target;\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      const kind = currNode.parent.kind;\n      if (kind === sk.CallExpression && (currNode.parent as ts.CallExpression).expression === currNode ||\n        kind === sk.PropertyAccessExpression && (currNode.parent as ts.PropertyAccessExpression).expression === currNode ||\n        kind === sk.ElementAccessExpression && (currNode.parent as ts.ElementAccessExpression).expression === currNode) {\n        currNode = currNode.parent;\n      } else {\n        break;\n      }\n    }\n    return currNode;\n  }\n}\n"]}