{"version":3,"file":"default-import-ts-transpiler.js","sourceRoot":"","sources":["default-import-ts-transpiler.ts"],"names":[],"mappings":";;;AACA,2CAA4C;AAE5C;;;;;;GAMG;AACH,kDAA4B;AAC5B,sCAAoC;AACpC,MAAM,GAAG,GAAG,IAAA,gBAAQ,EAAC,UAAU,CAAC,CAAC;AAQjC,MAAqB,qBAAqB;IAKxC,YAAY,OAAO,EAAkC;QAHrD,cAAS,GAAgB,IAAI,GAAG,EAAE,CAAC;QACnC,eAAU,GAAa,EAAE,CAAC;QAGxB,IAAI,CAAC,OAAO,qBAEP,IAAI,CACR,CAAC;QACF,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE;YACxB,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;gBAClC,IAAI,IAAI,YAAY,MAAM;oBACxB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;;oBAE3B,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;SACJ;IACH,CAAC;IAED,KAAK,CAAC,GAAkB,EAAE,YAA8B;QACtD,KAAI,MAAM,GAAG,IAAI,GAAG,CAAC,UAAU,EAAE;YAC/B,IAAI,GAAG,CAAC,IAAI,KAAK,uBAAE,CAAC,iBAAiB,EAAE;gBACrC,MAAM,IAAI,GAAG,GAA2B,CAAC;gBACzC,MAAM,IAAI,GAAI,IAAI,CAAC,eAAoC,CAAC,IAAI,CAAC;gBAC7D,IAAI,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE;oBAC3E,IAAI,CAAC,CAAC,GAAG,CAAC,IAAI,EAAE,mBAAmB,CAAC,EAAE;wBACpC,MAAM,WAAW,GAAG,IAAI,CAAC,YAAa,CAAC,IAAK,CAAC,IAAI,CAAC;wBAClD,GAAG,CAAC,IAAI,CAAC,oBAAoB,WAAW,SAAS,IAAI,OAAO,GAAG,GAAG,CAAC,QAAQ,CAAC,CAAC;wBAC7E,YAAY,CAAC,IAAI,CAAC;4BAChB,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC;4BACxB,GAAG,EAAE,GAAG,CAAC,MAAM,EAAE;4BACjB,IAAI,EAAE,SAAS,WAAW,eAAe,IAAI,KAAK;yBACnD,CAAC,CAAC;qBACJ;iBACF;aACF;SACF;IACH,CAAC;CACF;AAvCD,wCAuCC","sourcesContent":["import * as ts from 'typescript';\nimport {SyntaxKind as sk} from 'typescript';\nimport {ReplacementInf} from '@wfh/plink/wfh/dist/utils/patch-text';\n/**\n * Angular builder has a problem in compile server sider rendering appliaction\n * it uses Webpack to pack TS files, but it does not respect tsconfig.json compiler option:\n *  \"allowSyntheticDefaultImports\",\n * it can not resolve `import get from 'lodash/get';` like import clause.\n * This module helps to replace `lodash` import statement with `require` statement.\n */\nimport * as _ from 'lodash';\nimport {log4File} from '@wfh/plink';\nconst log = log4File(__filename);\n\nexport interface ImportClauseTranspileOptions {\n  // defaultImport2require?: boolean;\n  // file: string;\n  modules: Array<RegExp | string>;\n}\n\nexport default class ImportClauseTranspile {\n  options: ImportClauseTranspileOptions;\n  moduleSet: Set<string> = new Set();\n  moduleRegs: RegExp[] = [];\n\n  constructor(opts = {} as ImportClauseTranspileOptions) {\n    this.options = {\n      // defaultImport2require: true,\n      ...opts\n    };\n    if (this.options.modules) {\n      this.options.modules.forEach(name => {\n        if (name instanceof RegExp)\n          this.moduleRegs.push(name);\n        else\n          this.moduleSet.add(name);\n      });\n    }\n  }\n\n  parse(ast: ts.SourceFile, replacements: ReplacementInf[]) {\n    for(const stm of ast.statements) {\n      if (stm.kind === sk.ImportDeclaration) {\n        const node = stm as ts.ImportDeclaration;\n        const from = (node.moduleSpecifier as ts.StringLiteral).text;\n        if (this.moduleSet.has(from) || this.moduleRegs.some(reg => reg.test(from))) {\n          if (_.get(node, 'importClause.name')) {\n            const defaultName = node.importClause!.name!.text;\n            log.info(`Replace: \"import ${defaultName} from ${from}\" in ` + ast.fileName);\n            replacements.push({\n              start: stm.getStart(ast),\n              end: stm.getEnd(),\n              text: `const ${defaultName} = require('${from}');`\n            });\n          }\n        }\n      }\n    }\n  }\n}\n"]}