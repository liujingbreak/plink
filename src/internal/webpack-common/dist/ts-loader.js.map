{"version":3,"file":"ts-loader.js","sourceRoot":"","sources":["ts-loader.ts"],"names":[],"mappings":";;;AAEA,2FAAyD;AAQzD,MAAM,MAAM,GAAyC,UAAS,MAAM,EAAE,SAAS;IAC7E,MAAM,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC;IAC/B,MAAM,IAAI,GAAG,IAAI,CAAC,KAAgB,CAAC;IACnC,qBAAqB;IACrB,MAAM,EAAE,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;IACxB,IAAI;QACF,MAAM,QAAQ,GAAG,IAAA,4BAAgB,EAAC,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,YAAY,EAC9E,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;QAC9D,EAAE,CAAC,IAAI,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC;KAC/B;IAAC,OAAO,CAAC,EAAE;QACV,IAAI,CAAC,SAAS,CAAC,+BAA+B,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;QAC/D,OAAO,EAAE,CAAC,CAAU,CAAC,CAAC;KACvB;AACH,CAAC,CAAC;AAEF,kBAAe,MAAM,CAAC","sourcesContent":["import * as wp from 'webpack';\nimport RJ from 'require-injector';\nimport replaceAndInject from './tsjs/replace-and-inject';\n\nexport interface Options {\n  tsConfigFile: string;\n  injector: RJ;\n  compileExpContext?: (sourceFile: string) => {[varName: string]: any};\n}\n\nconst loader: wp.LoaderDefinitionFunction<Options> = function(source, sourceMap) {\n  const file = this.resourcePath;\n  const opts = this.query as Options;\n  // console.log(file);\n  const cb = this.async();\n  try {\n    const replaced = replaceAndInject(file, source, opts.injector, opts.tsConfigFile,\n      opts.compileExpContext ? opts.compileExpContext(file) : {});\n    cb(null, replaced, sourceMap);\n  } catch (e) {\n    this.getLogger('@wfh/webpack-common.ts-loader').error(file, e);\n    return cb(e as Error);\n  }\n};\n\nexport default loader;\n"]}