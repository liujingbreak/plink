"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable */
const rxjs_1 = require("rxjs");
describe('rxjs', () => {
    it('new Observable() is cold', () => {
        let obs = new rxjs_1.Observable((subscriber) => {
            console.log('Observable starts');
            subscriber.next(1);
            subscriber.complete();
            return () => console.log('teardown observable');
        });
        console.log('subscribe');
        let sub = obs.subscribe(value => console.log('onNext', value));
        sub.unsubscribe();
    });
    it('Observable.create()', (done) => {
        let obs = rxjs_1.Observable.create((subscriber) => {
            console.log('Observable starts');
            subscriber.next(2);
            subscriber.complete();
            return () => console.log('teardown observable');
        });
        console.log('subscribe');
        setTimeout(() => {
            let sub = obs.subscribe(((value) => console.log('onNext', value)));
            sub.unsubscribe();
            done();
        }, 1000);
    });
    it('Observale keeps state for multiple observers', (done) => {
        let obs = new rxjs_1.Observable((subscriber) => {
            console.log('Observable starts');
            subscriber.next(1);
            subscriber.next(2);
            subscriber.complete();
            return () => console.log('teardown observable');
        });
        console.log('subscribe');
        obs.subscribe(value => console.log('1 onNext', value));
        setTimeout(() => {
            let sub = obs.subscribe(((value) => console.log('2 onNext', value)));
            sub.unsubscribe();
            done();
        }, 1000);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnhqc1NwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJyeGpzU3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG9CQUFvQjtBQUNwQiwrQkFBZ0M7QUFFaEMsUUFBUSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUU7SUFDckIsRUFBRSxDQUFDLDBCQUEwQixFQUFFLEdBQUcsRUFBRTtRQUNuQyxJQUFJLEdBQUcsR0FBRyxJQUFJLGlCQUFVLENBQVMsQ0FBQyxVQUFVLEVBQUUsRUFBRTtZQUMvQyxPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLENBQUM7WUFDakMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNuQixVQUFVLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDdEIsT0FBTyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLHFCQUFxQixDQUFDLENBQUM7UUFDakQsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3pCLElBQUksR0FBRyxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQy9ELEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNuQixDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLElBQWUsRUFBRyxFQUFFO1FBQzlDLElBQUksR0FBRyxHQUFHLGlCQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsVUFBZSxFQUFFLEVBQUU7WUFDL0MsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1lBQ2pDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbkIsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ3RCLE9BQU8sR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1FBQ2pELENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUN6QixVQUFVLENBQUMsR0FBRyxFQUFFO1lBQ2YsSUFBSSxHQUFHLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsS0FBVSxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDeEUsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ2xCLElBQUksRUFBRSxDQUFDO1FBQ1IsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ1YsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsOENBQThDLEVBQUUsQ0FBQyxJQUFTLEVBQUUsRUFBRTtRQUNoRSxJQUFJLEdBQUcsR0FBRyxJQUFJLGlCQUFVLENBQVMsQ0FBQyxVQUFVLEVBQUUsRUFBRTtZQUMvQyxPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLENBQUM7WUFDakMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNuQixVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ25CLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUN0QixPQUFPLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQztRQUNqRCxDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDekIsR0FBRyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDdkQsVUFBVSxDQUFDLEdBQUcsRUFBRTtZQUNmLElBQUksR0FBRyxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEtBQVUsRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzFFLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUNsQixJQUFJLEVBQUUsQ0FBQztRQUNSLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNWLENBQUMsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcblxuZGVzY3JpYmUoJ3J4anMnLCAoKSA9PiB7XG5cdGl0KCduZXcgT2JzZXJ2YWJsZSgpIGlzIGNvbGQnLCAoKSA9PiB7XG5cdFx0bGV0IG9icyA9IG5ldyBPYnNlcnZhYmxlPG51bWJlcj4oKHN1YnNjcmliZXIpID0+IHtcblx0XHRcdGNvbnNvbGUubG9nKCdPYnNlcnZhYmxlIHN0YXJ0cycpO1xuXHRcdFx0c3Vic2NyaWJlci5uZXh0KDEpO1xuXHRcdFx0c3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuXHRcdFx0cmV0dXJuICgpID0+IGNvbnNvbGUubG9nKCd0ZWFyZG93biBvYnNlcnZhYmxlJyk7XG5cdFx0fSk7XG5cdFx0Y29uc29sZS5sb2coJ3N1YnNjcmliZScpO1xuXHRcdGxldCBzdWIgPSBvYnMuc3Vic2NyaWJlKHZhbHVlID0+IGNvbnNvbGUubG9nKCdvbk5leHQnLCB2YWx1ZSkpO1xuXHRcdHN1Yi51bnN1YnNjcmliZSgpO1xuXHR9KTtcblxuXHRpdCgnT2JzZXJ2YWJsZS5jcmVhdGUoKScsIChkb25lOiAoKT0+IHZvaWQgKSA9PiB7XG5cdFx0bGV0IG9icyA9IE9ic2VydmFibGUuY3JlYXRlKChzdWJzY3JpYmVyOiBhbnkpID0+IHtcblx0XHRcdGNvbnNvbGUubG9nKCdPYnNlcnZhYmxlIHN0YXJ0cycpO1xuXHRcdFx0c3Vic2NyaWJlci5uZXh0KDIpO1xuXHRcdFx0c3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuXHRcdFx0cmV0dXJuICgpID0+IGNvbnNvbGUubG9nKCd0ZWFyZG93biBvYnNlcnZhYmxlJyk7XG5cdFx0fSk7XG5cdFx0Y29uc29sZS5sb2coJ3N1YnNjcmliZScpO1xuXHRcdHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0bGV0IHN1YiA9IG9icy5zdWJzY3JpYmUoKCh2YWx1ZTogYW55KSA9PiBjb25zb2xlLmxvZygnb25OZXh0JywgdmFsdWUpKSk7XG5cdFx0XHRzdWIudW5zdWJzY3JpYmUoKTtcblx0XHRcdGRvbmUoKTtcblx0XHR9LCAxMDAwKTtcblx0fSk7XG5cblx0aXQoJ09ic2VydmFsZSBrZWVwcyBzdGF0ZSBmb3IgbXVsdGlwbGUgb2JzZXJ2ZXJzJywgKGRvbmU6IGFueSkgPT4ge1xuXHRcdGxldCBvYnMgPSBuZXcgT2JzZXJ2YWJsZTxudW1iZXI+KChzdWJzY3JpYmVyKSA9PiB7XG5cdFx0XHRjb25zb2xlLmxvZygnT2JzZXJ2YWJsZSBzdGFydHMnKTtcblx0XHRcdHN1YnNjcmliZXIubmV4dCgxKTtcblx0XHRcdHN1YnNjcmliZXIubmV4dCgyKTtcblx0XHRcdHN1YnNjcmliZXIuY29tcGxldGUoKTtcblx0XHRcdHJldHVybiAoKSA9PiBjb25zb2xlLmxvZygndGVhcmRvd24gb2JzZXJ2YWJsZScpO1xuXHRcdH0pO1xuXHRcdGNvbnNvbGUubG9nKCdzdWJzY3JpYmUnKTtcblx0XHRvYnMuc3Vic2NyaWJlKHZhbHVlID0+IGNvbnNvbGUubG9nKCcxIG9uTmV4dCcsIHZhbHVlKSk7XG5cdFx0c2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRsZXQgc3ViID0gb2JzLnN1YnNjcmliZSgoKHZhbHVlOiBhbnkpID0+IGNvbnNvbGUubG9nKCcyIG9uTmV4dCcsIHZhbHVlKSkpO1xuXHRcdFx0c3ViLnVuc3Vic2NyaWJlKCk7XG5cdFx0XHRkb25lKCk7XG5cdFx0fSwgMTAwMCk7XG5cdH0pO1xufSk7XG4iXX0=