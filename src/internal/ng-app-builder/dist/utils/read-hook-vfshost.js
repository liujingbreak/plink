"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable  no-console */
/**
 * TODO: So far Angular TS compiler reads file not in async mode, even return type is an Observable,
 * we probably can pre-read files and cache them to make hooks work in async-like mode.
 */
const core_1 = require("@angular-devkit/core");
const operators_1 = require("rxjs/operators");
const webpack_input_host_1 = require("@ngtools/webpack/src/webpack-input-host");
class ReadHookHost extends webpack_input_host_1.WebpackInputHost {
    constructor(inputFileSystem, func) {
        super(inputFileSystem);
        this._readFunc = func;
    }
    read(path) {
        return super.read(path).pipe(operators_1.concatMap((buffer) => {
            const sPath = core_1.getSystemPath(path);
            return this._hookRead(sPath, buffer);
        }));
    }
    _hookRead(path, buffer) {
        return this._readFunc(path, buffer);
    }
}
exports.default = ReadHookHost;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhZC1ob29rLXZmc2hvc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJyZWFkLWhvb2stdmZzaG9zdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGdDQUFnQztBQUNoQzs7O0dBR0c7QUFDSCwrQ0FBb0U7QUFFcEUsOENBQXlDO0FBQ3pDLGdGQUF5RTtBQWN6RSxNQUFxQixZQUFhLFNBQVEscUNBQWdCO0lBSXhELFlBQVksZUFBZ0MsRUFBRSxJQUFrQjtRQUM5RCxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDdkIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7SUFDeEIsQ0FBQztJQUVELElBQUksQ0FBQyxJQUFVO1FBQ2IsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FDMUIscUJBQVMsQ0FBQyxDQUFDLE1BQWUsRUFBRSxFQUFFO1lBQzVCLE1BQU0sS0FBSyxHQUFXLG9CQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDMUMsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN2QyxDQUFDLENBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQztJQUVTLFNBQVMsQ0FBQyxJQUFZLEVBQUUsTUFBZTtRQUMvQyxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3RDLENBQUM7Q0FDRjtBQXJCRCwrQkFxQkMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSAgbm8tY29uc29sZSAqL1xuLyoqXG4gKiBUT0RPOiBTbyBmYXIgQW5ndWxhciBUUyBjb21waWxlciByZWFkcyBmaWxlIG5vdCBpbiBhc3luYyBtb2RlLCBldmVuIHJldHVybiB0eXBlIGlzIGFuIE9ic2VydmFibGUsXG4gKiB3ZSBwcm9iYWJseSBjYW4gcHJlLXJlYWQgZmlsZXMgYW5kIGNhY2hlIHRoZW0gdG8gbWFrZSBob29rcyB3b3JrIGluIGFzeW5jLWxpa2UgbW9kZS5cbiAqL1xuaW1wb3J0IHt2aXJ0dWFsRnMsIFBhdGggLGdldFN5c3RlbVBhdGh9IGZyb20gJ0Bhbmd1bGFyLWRldmtpdC9jb3JlJztcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge2NvbmNhdE1hcH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHtXZWJwYWNrSW5wdXRIb3N0fSBmcm9tICdAbmd0b29scy93ZWJwYWNrL3NyYy93ZWJwYWNrLWlucHV0LWhvc3QnO1xuaW1wb3J0IHsgSW5wdXRGaWxlU3lzdGVtIH0gZnJvbSAnd2VicGFjayc7XG4vLyBpbXBvcnQge3NlcH0gZnJvbSAncGF0aCc7XG5cbi8vIGNvbnN0IGlzV2luZG93cyA9IHNlcCA9PT0gJ1xcXFwnO1xuZXhwb3J0IHR5cGUgRkJ1ZmZlciA9IHZpcnR1YWxGcy5GaWxlQnVmZmVyO1xuXG5leHBvcnQgaW50ZXJmYWNlIFRzRmlsZSB7XG4gIHBhdGg6IFBhdGg7XG4gIGJ1ZmZlcjogRkJ1ZmZlcjtcbn1cblxuZXhwb3J0IHR5cGUgSG9va1JlYWRGdW5jID0ocGF0aDogc3RyaW5nLCBidWZmZXI6IEZCdWZmZXIpID0+IE9ic2VydmFibGU8RkJ1ZmZlcj47XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlYWRIb29rSG9zdCBleHRlbmRzIFdlYnBhY2tJbnB1dEhvc3Qge1xuICAvKiogc2V0IHRoaXMgcHJvcGVydHkgdG8gYWRkIGEgZmlsZSByZWFkIGhvb2sgKi9cbiAgX3JlYWRGdW5jOiBIb29rUmVhZEZ1bmM7XG5cbiAgY29uc3RydWN0b3IoaW5wdXRGaWxlU3lzdGVtOiBJbnB1dEZpbGVTeXN0ZW0sIGZ1bmM6IEhvb2tSZWFkRnVuYykge1xuICAgIHN1cGVyKGlucHV0RmlsZVN5c3RlbSk7XG4gICAgdGhpcy5fcmVhZEZ1bmMgPSBmdW5jO1xuICB9XG5cbiAgcmVhZChwYXRoOiBQYXRoKTogT2JzZXJ2YWJsZTxGQnVmZmVyPiB7XG4gICAgcmV0dXJuIHN1cGVyLnJlYWQocGF0aCkucGlwZShcbiAgICAgIGNvbmNhdE1hcCgoYnVmZmVyOiBGQnVmZmVyKSA9PiB7XG4gICAgICAgIGNvbnN0IHNQYXRoOiBzdHJpbmcgPSBnZXRTeXN0ZW1QYXRoKHBhdGgpO1xuICAgICAgICByZXR1cm4gdGhpcy5faG9va1JlYWQoc1BhdGgsIGJ1ZmZlcik7XG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBwcm90ZWN0ZWQgX2hvb2tSZWFkKHBhdGg6IHN0cmluZywgYnVmZmVyOiBGQnVmZmVyKTogT2JzZXJ2YWJsZTxGQnVmZmVyPiB7XG4gICAgcmV0dXJuIHRoaXMuX3JlYWRGdW5jKHBhdGgsIGJ1ZmZlcik7XG4gIH1cbn1cbiJdfQ==