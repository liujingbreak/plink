"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSetting = exports.defaultSetting = void 0;
const plink_1 = require("@wfh/plink");
/**
 * Plink run this funtion to get package level setting value
 */
const defaultSetting = (cliOptions) => {
    const defaultValue = {
        fetchUrl: null,
        fetchRetry: 5,
        downloadMode: 'fork',
        fetchLogErrPerTimes: 20,
        fetchIntervalSec: 90,
        cacheControlMaxAge: {
            js: '365 days',
            css: '365 days',
            less: '365 days',
            html: null,
            png: '365 days',
            jpg: '365 days',
            jpeg: '365 days',
            gif: '365 days',
            svg: '365 days',
            eot: '365 days',
            ttf: '365 days',
            woff: '365 days',
            woff2: '365 days'
        },
        fallbackIndexHtml: { '^/[^/?#.]+': '<%=match[0]%>/index.html' },
        httpProxy: {},
        httpProxyWithCache: {},
        fetchMailServer: null,
        serveIndex: false,
        requireToken: false
    };
    if ((0, plink_1.config)().devMode || cliOptions.env === 'local') {
        const devValue = {
            fetchRetry: 0,
            fetchLogErrPerTimes: 1,
            fetchIntervalSec: 60,
            cacheControlMaxAge: {},
            fetchMailServer: null,
            proxyToDevServer: { target: 'http://localhost:4200' }
        };
        return Object.assign(defaultValue, devValue);
    }
    return defaultValue;
};
exports.defaultSetting = defaultSetting;
/**
 * The return setting value is merged with files specified by command line options --prop and -c
 * @return setting of current package
 */
function getSetting() {
    /* eslint-disable dot-notation,@typescript-eslint/dot-notation */
    return (0, plink_1.config)()['@wfh/assets-processer'];
}
exports.getSetting = getSetting;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXRzLXByb2Nlc3Nlci1zZXR0aW5nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXNzZXRzLXByb2Nlc3Nlci1zZXR0aW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHNDQUF3RDtBQTZEeEQ7O0dBRUc7QUFDSSxNQUFNLGNBQWMsR0FBaUQsQ0FBQyxVQUFVLEVBQUUsRUFBRTtJQUN6RixNQUFNLFlBQVksR0FBMkI7UUFDM0MsUUFBUSxFQUFFLElBQUk7UUFDZCxVQUFVLEVBQUUsQ0FBQztRQUNiLFlBQVksRUFBRSxNQUFNO1FBQ3BCLG1CQUFtQixFQUFFLEVBQUU7UUFDdkIsZ0JBQWdCLEVBQUUsRUFBRTtRQUNwQixrQkFBa0IsRUFBRTtZQUNsQixFQUFFLEVBQUUsVUFBVTtZQUNkLEdBQUcsRUFBRSxVQUFVO1lBQ2YsSUFBSSxFQUFFLFVBQVU7WUFDaEIsSUFBSSxFQUFFLElBQUk7WUFDVixHQUFHLEVBQUUsVUFBVTtZQUNmLEdBQUcsRUFBRSxVQUFVO1lBQ2YsSUFBSSxFQUFFLFVBQVU7WUFDaEIsR0FBRyxFQUFFLFVBQVU7WUFDZixHQUFHLEVBQUUsVUFBVTtZQUNmLEdBQUcsRUFBRSxVQUFVO1lBQ2YsR0FBRyxFQUFFLFVBQVU7WUFDZixJQUFJLEVBQUUsVUFBVTtZQUNoQixLQUFLLEVBQUUsVUFBVTtTQUNsQjtRQUNELGlCQUFpQixFQUFFLEVBQUMsWUFBWSxFQUFFLDBCQUEwQixFQUFDO1FBQzdELFNBQVMsRUFBRSxFQUFFO1FBQ2Isa0JBQWtCLEVBQUUsRUFBRTtRQUN0QixlQUFlLEVBQUUsSUFBSTtRQUNyQixVQUFVLEVBQUUsS0FBSztRQUNqQixZQUFZLEVBQUUsS0FBSztLQUNwQixDQUFDO0lBRUYsSUFBSSxJQUFBLGNBQU0sR0FBRSxDQUFDLE9BQU8sSUFBSSxVQUFVLENBQUMsR0FBRyxLQUFLLE9BQU8sRUFBRTtRQUNsRCxNQUFNLFFBQVEsR0FBb0M7WUFDaEQsVUFBVSxFQUFFLENBQUM7WUFDYixtQkFBbUIsRUFBRSxDQUFDO1lBQ3RCLGdCQUFnQixFQUFFLEVBQUU7WUFDcEIsa0JBQWtCLEVBQUUsRUFBRTtZQUN0QixlQUFlLEVBQUUsSUFBSTtZQUNyQixnQkFBZ0IsRUFBRSxFQUFDLE1BQU0sRUFBRSx1QkFBdUIsRUFBQztTQUNwRCxDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxRQUFRLENBQUMsQ0FBQztLQUM5QztJQUNELE9BQU8sWUFBWSxDQUFDO0FBQ3RCLENBQUMsQ0FBQztBQTFDVyxRQUFBLGNBQWMsa0JBMEN6QjtBQUVGOzs7R0FHRztBQUNILFNBQWdCLFVBQVU7SUFDeEIsaUVBQWlFO0lBQ2pFLE9BQU8sSUFBQSxjQUFNLEdBQUUsQ0FBQyx1QkFBdUIsQ0FBRSxDQUFDO0FBQzVDLENBQUM7QUFIRCxnQ0FHQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Y29uZmlnLCBQYWNrYWdlU2V0dGluZ0ludGVyZn0gZnJvbSAnQHdmaC9wbGluayc7XG5pbXBvcnQge09wdGlvbnN9IGZyb20gJ2h0dHAtcHJveHktbWlkZGxld2FyZSc7XG4vKipcbiAqIFBhY2thZ2Ugc2V0dGluZyB0eXBlXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQXNzZXRzUHJvY2Vzc2VyU2V0dGluZyB7XG4gIC8qKiBAZGVwcmVjYXRlZCAqL1xuICBmZXRjaFVybDogc3RyaW5nIHwgbnVsbDtcbiAgLyoqIEBkZXByZWNhdGVkICovXG4gIGZldGNoUmV0cnk6IG51bWJlcjtcbiAgLyoqIEBkZXByZWNhdGVkICovXG4gIGRvd25sb2FkTW9kZTogJ2ZvcmsnO1xuICAvKiogQGRlcHJlY2F0ZWQgKi9cbiAgZmV0Y2hMb2dFcnJQZXJUaW1lczogbnVtYmVyO1xuICAvKiogQGRlcHJlY2F0ZWQgKi9cbiAgZmV0Y2hJbnRlcnZhbFNlYzogbnVtYmVyO1xuICAvKiogUmVzcG9uc2UgbWF4QWdlIGhlYWRlciB2YWx1ZSBhZ2FpbnN0IGRpZmZlcmVudCBtZWRpYSB0eXBlIGZpbGUgKi9cbiAgY2FjaGVDb250cm9sTWF4QWdlOiB7W2tleTogc3RyaW5nXTogc3RyaW5nIHwgbnVsbH07XG4gIC8qKiBGb3IgSFRNTCA1IGhpc3RvcnkgYmFzZWQgY2xpZW50IHNpZGUgcm91dGUsIHNlcnZpbmcgaW5kZXguaHRtbCBmb3IgXG4gICAqIHNwZWNpZmljIHBhdGguXG4gICAqIFxuICAgKiBLZXkgaXMgYSBSZWdFeHAgc3RyaW5nLCB2YWx1ZSBpcyB0YXJnZXQgcGF0aC5cbiAgICogZS5nLiAgeydeL1teLz8jLl0rJzogJzwlPW1hdGNoWzBdJT4vaW5kZXguaHRtbCd9XG4gICAqIFxuICAgKiBJbiBjYXNlIHVzZXIgYWNjZXNzIFwiL2hlbGxvdz91aWQ9MTIzXCIgb3IgXCIvaGVsbG93L3N1YlwiLCB0aGUgYWN0dWFsIEV4cHJlc3MuanNcbiAgICogYHJlcXVlc3QucGF0aGAgd2lsbCBiZSBjaGFuZ2UgdG8gXCIvaW5kZXguaHRtbFwiLCBgcmVxdWVzdC5xdWVyeWAgd2lsbCBiZSBrZXB0XG4gICAqL1xuICBmYWxsYmFja0luZGV4SHRtbDoge1trZXk6IHN0cmluZ106IHN0cmluZ307XG4gIGh0dHBQcm94eToge1twcm94eVBhdGg6IHN0cmluZ106IHN0cmluZ307XG4gIGh0dHBQcm94eVdpdGhDYWNoZToge1twcm94eVBhdGg6IHN0cmluZ106IHN0cmluZ307XG4gIGZldGNoTWFpbFNlcnZlcjoge1xuICAgIGltYXA6IHN0cmluZztcbiAgICBzbXRwOiBzdHJpbmc7XG4gICAgdXNlcjogc3RyaW5nO1xuICAgIGxvZ2luU2VjcmV0OiBzdHJpbmc7XG4gICAgZW52Pzogc3RyaW5nO1xuICB9IHwgbnVsbDtcblxuICAvKiogU2V0dGluZyB0aGlzIHZhbHVlIHRvIHRydWUgd2lsbCBlbmFibGUgc2VydmluZyBJbmRleCBIVE1MIHBhZ2UgZm9yIHN0YXRpYyByZXNvdXJjZSB1bmRlcjpcbiAgICogIDxyb290IGRpcj4vZGlzdC9zdGF0aWMuXG4gICAqIFxuICAgKiBZb3UgbWF5IGFsc28gYXNzaWduIGEgZGlmZmVyZW50IHZhbHVlIHRvIFBsaW5rIHByb3BlcnR5IFwic3RhdGljRGlyXCIgdG8gY2hhbmdlIHN0YXRpYyByZXNvdXJjZSBkaXJlY3RvcnksXG4gICAqIGUuZy4gQnkgY29tbWFuZCBsaW5lIG9wdGlvbiBgLS1wcm9wIHN0YXRpY0Rpcj08ZGlyPmBcbiAgICovXG4gIHNlcnZlSW5kZXg6IGJvb2xlYW47XG4gIHJlcXVpcmVUb2tlbjogYm9vbGVhbjtcbiAgLyoqIFxuICAgKiBAdHlwZSBpbXBvcnQoJ2h0dHAtcHJveHktbWlkZGxld2FyZScpLk9wdGlvbnNcbiAgICogUHJveHkgcmVxdWVzdCB0byBhbm90aGVyIGRldiBzZXJ2ZXIsIGlmIHByb3h5IGdvdCBhbiBlcnJvciByZXNwb25zZSwgdGhlbiBmYWxsYmFjayByZXF1ZXN0IHRvXG4gICAqIGxvY2FsIHN0YXRpYyBmaWxlIHJlc291cmNlXG4gICAqIGUuZy4ge3RhcmdldDogaHR0cDovL2xvY2FsaHNvdDozMDAwfSBmb3IgY3JlYXRlLXJlYWN0LWFwcCBkZXYgc2VydmVyLFxuICAgKiB7dGFyZ2V0OiBodHRwOi8vbG9jYWxob3N0OjQyMDB9IGZvciBBbmd1bGFyIGRldiBzZXJ2ZXJcbiAgICogXG4gICAqIERlZmF1bHQgdmFsdWUgaXMge3RhcmdldDogJ2h0dHA6Ly9sb2NhbGhvc3Q6NDIwMCd9IHdoZW4gXCItLWRldlwiIG1vZGUgaXMgb24uXG4gICAqIFxuICAgKiBDaGFuZ2VPcmlnaW4gYW5kIHdzICh3ZWJzb2NrZXQpIHdpbGwgYmUgZW5hYmxlZCwgc2luY2UgZGV2U2VydmVyIG1vc3QgbGlrZWx5IHdpbGxcbiAgICogZW5hYmxlIFdlYnBhY2sgSE1SIHRocm91Z2ggd2Vic29ja2V0LlxuICAqL1xuICBwcm94eVRvRGV2U2VydmVyPzogT3B0aW9ucztcbn1cblxuLyoqXG4gKiBQbGluayBydW4gdGhpcyBmdW50aW9uIHRvIGdldCBwYWNrYWdlIGxldmVsIHNldHRpbmcgdmFsdWVcbiAqL1xuZXhwb3J0IGNvbnN0IGRlZmF1bHRTZXR0aW5nOiBQYWNrYWdlU2V0dGluZ0ludGVyZjxBc3NldHNQcm9jZXNzZXJTZXR0aW5nPiA9IChjbGlPcHRpb25zKSA9PiB7XG4gIGNvbnN0IGRlZmF1bHRWYWx1ZTogQXNzZXRzUHJvY2Vzc2VyU2V0dGluZyA9IHtcbiAgICBmZXRjaFVybDogbnVsbCxcbiAgICBmZXRjaFJldHJ5OiA1LFxuICAgIGRvd25sb2FkTW9kZTogJ2ZvcmsnLFxuICAgIGZldGNoTG9nRXJyUGVyVGltZXM6IDIwLFxuICAgIGZldGNoSW50ZXJ2YWxTZWM6IDkwLFxuICAgIGNhY2hlQ29udHJvbE1heEFnZToge1xuICAgICAganM6ICczNjUgZGF5cycsXG4gICAgICBjc3M6ICczNjUgZGF5cycsXG4gICAgICBsZXNzOiAnMzY1IGRheXMnLFxuICAgICAgaHRtbDogbnVsbCxcbiAgICAgIHBuZzogJzM2NSBkYXlzJyxcbiAgICAgIGpwZzogJzM2NSBkYXlzJyxcbiAgICAgIGpwZWc6ICczNjUgZGF5cycsXG4gICAgICBnaWY6ICczNjUgZGF5cycsXG4gICAgICBzdmc6ICczNjUgZGF5cycsXG4gICAgICBlb3Q6ICczNjUgZGF5cycsXG4gICAgICB0dGY6ICczNjUgZGF5cycsXG4gICAgICB3b2ZmOiAnMzY1IGRheXMnLFxuICAgICAgd29mZjI6ICczNjUgZGF5cydcbiAgICB9LFxuICAgIGZhbGxiYWNrSW5kZXhIdG1sOiB7J14vW14vPyMuXSsnOiAnPCU9bWF0Y2hbMF0lPi9pbmRleC5odG1sJ30sXG4gICAgaHR0cFByb3h5OiB7fSxcbiAgICBodHRwUHJveHlXaXRoQ2FjaGU6IHt9LFxuICAgIGZldGNoTWFpbFNlcnZlcjogbnVsbCxcbiAgICBzZXJ2ZUluZGV4OiBmYWxzZSxcbiAgICByZXF1aXJlVG9rZW46IGZhbHNlXG4gIH07XG5cbiAgaWYgKGNvbmZpZygpLmRldk1vZGUgfHwgY2xpT3B0aW9ucy5lbnYgPT09ICdsb2NhbCcpIHtcbiAgICBjb25zdCBkZXZWYWx1ZTogUGFydGlhbDxBc3NldHNQcm9jZXNzZXJTZXR0aW5nPiA9IHtcbiAgICAgIGZldGNoUmV0cnk6IDAsXG4gICAgICBmZXRjaExvZ0VyclBlclRpbWVzOiAxLFxuICAgICAgZmV0Y2hJbnRlcnZhbFNlYzogNjAsXG4gICAgICBjYWNoZUNvbnRyb2xNYXhBZ2U6IHt9LFxuICAgICAgZmV0Y2hNYWlsU2VydmVyOiBudWxsLFxuICAgICAgcHJveHlUb0RldlNlcnZlcjoge3RhcmdldDogJ2h0dHA6Ly9sb2NhbGhvc3Q6NDIwMCd9XG4gICAgfTtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihkZWZhdWx0VmFsdWUsIGRldlZhbHVlKTtcbiAgfVxuICByZXR1cm4gZGVmYXVsdFZhbHVlO1xufTtcblxuLyoqXG4gKiBUaGUgcmV0dXJuIHNldHRpbmcgdmFsdWUgaXMgbWVyZ2VkIHdpdGggZmlsZXMgc3BlY2lmaWVkIGJ5IGNvbW1hbmQgbGluZSBvcHRpb25zIC0tcHJvcCBhbmQgLWNcbiAqIEByZXR1cm4gc2V0dGluZyBvZiBjdXJyZW50IHBhY2thZ2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFNldHRpbmcoKTogQXNzZXRzUHJvY2Vzc2VyU2V0dGluZyB7XG4gIC8qIGVzbGludC1kaXNhYmxlIGRvdC1ub3RhdGlvbixAdHlwZXNjcmlwdC1lc2xpbnQvZG90LW5vdGF0aW9uICovXG4gIHJldHVybiBjb25maWcoKVsnQHdmaC9hc3NldHMtcHJvY2Vzc2VyJ10hO1xufVxuIl19