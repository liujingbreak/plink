"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSetting = exports.defaultSetting = void 0;
const plink_1 = require("@wfh/plink");
/**
 * Plink run this funtion to get package level setting value
 */
const defaultSetting = (cliOptions) => {
    const defaultValue = {
        fetchUrl: null,
        fetchRetry: 5,
        downloadMode: 'fork',
        fetchLogErrPerTimes: 20,
        fetchIntervalSec: 90,
        cacheControlMaxAge: {
            js: '365 days',
            css: '365 days',
            less: '365 days',
            html: null,
            png: '365 days',
            jpg: '365 days',
            jpeg: '365 days',
            gif: '365 days',
            svg: '365 days',
            eot: '365 days',
            ttf: '365 days',
            woff: '365 days',
            woff2: '365 days'
        },
        fallbackIndexHtml: { '^/[^/?#.]+': '<%=match[0]%>/index.html' },
        httpProxy: {},
        fetchMailServer: null,
        serveIndex: false,
        requireToken: false
    };
    if ((0, plink_1.config)().devMode || cliOptions.env === 'local') {
        const devValue = {
            fetchRetry: 0,
            fetchLogErrPerTimes: 1,
            fetchIntervalSec: 60,
            cacheControlMaxAge: {},
            fetchMailServer: null,
            proxyToDevServer: { target: 'http://localhost:4200' }
        };
        return Object.assign(defaultValue, devValue);
    }
    return defaultValue;
};
exports.defaultSetting = defaultSetting;
/**
 * The return setting value is merged with files specified by command line options --prop and -c
 * @return setting of current package
 */
function getSetting() {
    /* eslint-disable dot-notation,@typescript-eslint/dot-notation */
    return (0, plink_1.config)()['@wfh/assets-processer'];
}
exports.getSetting = getSetting;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXRzLXByb2Nlc3Nlci1zZXR0aW5nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXNzZXRzLXByb2Nlc3Nlci1zZXR0aW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHNDQUF3RDtBQTJEeEQ7O0dBRUc7QUFDSSxNQUFNLGNBQWMsR0FBaUQsQ0FBQyxVQUFVLEVBQUUsRUFBRTtJQUN6RixNQUFNLFlBQVksR0FBMkI7UUFDM0MsUUFBUSxFQUFFLElBQUk7UUFDZCxVQUFVLEVBQUUsQ0FBQztRQUNiLFlBQVksRUFBRSxNQUFNO1FBQ3BCLG1CQUFtQixFQUFFLEVBQUU7UUFDdkIsZ0JBQWdCLEVBQUUsRUFBRTtRQUNwQixrQkFBa0IsRUFBRTtZQUNsQixFQUFFLEVBQUUsVUFBVTtZQUNkLEdBQUcsRUFBRSxVQUFVO1lBQ2YsSUFBSSxFQUFFLFVBQVU7WUFDaEIsSUFBSSxFQUFFLElBQUk7WUFDVixHQUFHLEVBQUUsVUFBVTtZQUNmLEdBQUcsRUFBRSxVQUFVO1lBQ2YsSUFBSSxFQUFFLFVBQVU7WUFDaEIsR0FBRyxFQUFFLFVBQVU7WUFDZixHQUFHLEVBQUUsVUFBVTtZQUNmLEdBQUcsRUFBRSxVQUFVO1lBQ2YsR0FBRyxFQUFFLFVBQVU7WUFDZixJQUFJLEVBQUUsVUFBVTtZQUNoQixLQUFLLEVBQUUsVUFBVTtTQUNsQjtRQUNELGlCQUFpQixFQUFFLEVBQUMsWUFBWSxFQUFFLDBCQUEwQixFQUFDO1FBQzdELFNBQVMsRUFBRSxFQUFFO1FBQ2IsZUFBZSxFQUFFLElBQUk7UUFDckIsVUFBVSxFQUFFLEtBQUs7UUFDakIsWUFBWSxFQUFFLEtBQUs7S0FDcEIsQ0FBQztJQUVGLElBQUksSUFBQSxjQUFNLEdBQUUsQ0FBQyxPQUFPLElBQUksVUFBVSxDQUFDLEdBQUcsS0FBSyxPQUFPLEVBQUU7UUFDbEQsTUFBTSxRQUFRLEdBQW9DO1lBQ2hELFVBQVUsRUFBRSxDQUFDO1lBQ2IsbUJBQW1CLEVBQUUsQ0FBQztZQUN0QixnQkFBZ0IsRUFBRSxFQUFFO1lBQ3BCLGtCQUFrQixFQUFFLEVBQUU7WUFDdEIsZUFBZSxFQUFFLElBQUk7WUFDckIsZ0JBQWdCLEVBQUUsRUFBQyxNQUFNLEVBQUUsdUJBQXVCLEVBQUM7U0FDcEQsQ0FBQztRQUNGLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsUUFBUSxDQUFDLENBQUM7S0FDOUM7SUFDRCxPQUFPLFlBQVksQ0FBQztBQUN0QixDQUFDLENBQUM7QUF6Q1csUUFBQSxjQUFjLGtCQXlDekI7QUFFRjs7O0dBR0c7QUFDSCxTQUFnQixVQUFVO0lBQ3hCLGlFQUFpRTtJQUNqRSxPQUFPLElBQUEsY0FBTSxHQUFFLENBQUMsdUJBQXVCLENBQUUsQ0FBQztBQUM1QyxDQUFDO0FBSEQsZ0NBR0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2NvbmZpZywgUGFja2FnZVNldHRpbmdJbnRlcmZ9IGZyb20gJ0B3ZmgvcGxpbmsnO1xuaW1wb3J0IHtPcHRpb25zfSBmcm9tICdodHRwLXByb3h5LW1pZGRsZXdhcmUnO1xuLyoqXG4gKiBQYWNrYWdlIHNldHRpbmcgdHlwZVxuICovXG5leHBvcnQgaW50ZXJmYWNlIEFzc2V0c1Byb2Nlc3NlclNldHRpbmcge1xuICAvKiogQGRlcHJlY2F0ZWQgKi9cbiAgZmV0Y2hVcmw6IHN0cmluZyB8IG51bGw7XG4gIC8qKiBAZGVwcmVjYXRlZCAqL1xuICBmZXRjaFJldHJ5OiBudW1iZXI7XG4gIC8qKiBAZGVwcmVjYXRlZCAqL1xuICBkb3dubG9hZE1vZGU6ICdmb3JrJztcbiAgLyoqIEBkZXByZWNhdGVkICovXG4gIGZldGNoTG9nRXJyUGVyVGltZXM6IG51bWJlcjtcbiAgLyoqIEBkZXByZWNhdGVkICovXG4gIGZldGNoSW50ZXJ2YWxTZWM6IG51bWJlcjtcbiAgLyoqIFJlc3BvbnNlIG1heEFnZSBoZWFkZXIgdmFsdWUgYWdhaW5zdCBkaWZmZXJlbnQgbWVkaWEgdHlwZSBmaWxlICovXG4gIGNhY2hlQ29udHJvbE1heEFnZToge1trZXk6IHN0cmluZ106IHN0cmluZyB8IG51bGx9O1xuICAvKiogRm9yIEhUTUwgNSBoaXN0b3J5IGJhc2VkIGNsaWVudCBzaWRlIHJvdXRlLCBzZXJ2aW5nIGluZGV4Lmh0bWwgZm9yIFxuICAgKiBzcGVjaWZpYyBwYXRoLlxuICAgKiBcbiAgICogS2V5IGlzIGEgUmVnRXhwIHN0cmluZywgdmFsdWUgaXMgdGFyZ2V0IHBhdGguXG4gICAqIGUuZy4gIHsnXi9bXi8/Iy5dKyc6ICc8JT1tYXRjaFswXSU+L2luZGV4Lmh0bWwnfVxuICAgKiBcbiAgICogSW4gY2FzZSB1c2VyIGFjY2VzcyBcIi9oZWxsb3c/dWlkPTEyM1wiLCB0aGUgYWN0dWFsIEV4cHJlc3MuanNcbiAgICogYHJlcXVlc3QucGF0aGAgd2lsbCBiZSBjaGFuZ2UgdG8gXCIvaW5kZXguaHRtbFwiLCBgcmVxdWVzdC5xdWVyeWAgd2lsbCBiZSBrZXB0XG4gICAqL1xuICBmYWxsYmFja0luZGV4SHRtbDoge1trZXk6IHN0cmluZ106IHN0cmluZ307XG4gIGh0dHBQcm94eToge1twcm94eVBhdGg6IHN0cmluZ106IHN0cmluZ307XG4gIGZldGNoTWFpbFNlcnZlcjoge1xuICAgIGltYXA6IHN0cmluZztcbiAgICBzbXRwOiBzdHJpbmc7XG4gICAgdXNlcjogc3RyaW5nO1xuICAgIGxvZ2luU2VjcmV0OiBzdHJpbmc7XG4gICAgZW52Pzogc3RyaW5nO1xuICB9IHwgbnVsbDtcbiAgLyoqIFNldHRpbmcgdGhpcyB2YWx1ZSB0byB0cnVlIHdpbGwgZW5hYmxlIHNlcnZpbmcgSW5kZXggSFRNTCBwYWdlIGZvciBzdGF0aWMgcmVzb3VyY2UgdW5kZXI6XG4gICAqICA8cm9vdCBkaXI+L2Rpc3Qvc3RhdGljLlxuICAgKiBcbiAgICogWW91IG1heSBhbHNvIGFzc2lnbiBhIGRpZmZlcmVudCB2YWx1ZSB0byBQbGluayBwcm9wZXJ0eSBcInN0YXRpY0RpclwiIHRvIGNoYW5nZSBzdGF0aWMgcmVzb3VyY2UgZGlyZWN0b3J5LFxuICAgKiBlLmcuIEJ5IGNvbW1hbmQgbGluZSBvcHRpb24gYC0tcHJvcCBzdGF0aWNEaXI9PGRpcj5gXG4gICAqL1xuICBzZXJ2ZUluZGV4OiBib29sZWFuO1xuICByZXF1aXJlVG9rZW46IGJvb2xlYW47XG4gIC8qKiBcbiAgICogQHR5cGUgaW1wb3J0KCdodHRwLXByb3h5LW1pZGRsZXdhcmUnKS5Db25maWdcbiAgICogUHJveHkgcmVxdWVzdCB0byBhbm90aGVyIGRldiBzZXJ2ZXIsIGlmIHByb3h5IGdvdCBhbiBlcnJvciByZXNwb25zZSwgdGhlbiBmYWxsYmFjayByZXF1ZXN0IHRvXG4gICAqIGxvY2FsIHN0YXRpYyBmaWxlIHJlc291cmNlXG4gICAqIGUuZy4ge3RhcmdldDogaHR0cDovL2xvY2FsaHNvdDozMDAwfSBmb3IgY3JlYXRlLXJlYWN0LWFwcCBkZXYgc2VydmVyLFxuICAgKiB7dGFyZ2V0OiBodHRwOi8vbG9jYWxob3N0OjQyMDB9IGZvciBBbmd1bGFyIGRldiBzZXJ2ZXJcbiAgICogXG4gICAqIERlZmF1bHQgdmFsdWUgaXMge3RhcmdldDogJ2h0dHA6Ly9sb2NhbGhvc3Q6NDIwMCd9IHdoZW4gXCItLWRldlwiIG1vZGUgaXMgb24uXG4gICAqIFxuICAgKiBDaGFuZ2VPcmlnaW4gYW5kIHdzICh3ZWJzb2NrZXQpIHdpbGwgYmUgZW5hYmxlZCwgc2luY2UgZGV2U2VydmVyIG1vc3QgbGlrZWx5IHdpbGxcbiAgICogZW5hYmxlIFdlYnBhY2sgSE1SIHRocm91Z2ggd2Vic29ja2V0LlxuICAqL1xuICBwcm94eVRvRGV2U2VydmVyPzogT3B0aW9ucztcbn1cblxuLyoqXG4gKiBQbGluayBydW4gdGhpcyBmdW50aW9uIHRvIGdldCBwYWNrYWdlIGxldmVsIHNldHRpbmcgdmFsdWVcbiAqL1xuZXhwb3J0IGNvbnN0IGRlZmF1bHRTZXR0aW5nOiBQYWNrYWdlU2V0dGluZ0ludGVyZjxBc3NldHNQcm9jZXNzZXJTZXR0aW5nPiA9IChjbGlPcHRpb25zKSA9PiB7XG4gIGNvbnN0IGRlZmF1bHRWYWx1ZTogQXNzZXRzUHJvY2Vzc2VyU2V0dGluZyA9IHtcbiAgICBmZXRjaFVybDogbnVsbCxcbiAgICBmZXRjaFJldHJ5OiA1LFxuICAgIGRvd25sb2FkTW9kZTogJ2ZvcmsnLFxuICAgIGZldGNoTG9nRXJyUGVyVGltZXM6IDIwLFxuICAgIGZldGNoSW50ZXJ2YWxTZWM6IDkwLFxuICAgIGNhY2hlQ29udHJvbE1heEFnZToge1xuICAgICAganM6ICczNjUgZGF5cycsXG4gICAgICBjc3M6ICczNjUgZGF5cycsXG4gICAgICBsZXNzOiAnMzY1IGRheXMnLFxuICAgICAgaHRtbDogbnVsbCxcbiAgICAgIHBuZzogJzM2NSBkYXlzJyxcbiAgICAgIGpwZzogJzM2NSBkYXlzJyxcbiAgICAgIGpwZWc6ICczNjUgZGF5cycsXG4gICAgICBnaWY6ICczNjUgZGF5cycsXG4gICAgICBzdmc6ICczNjUgZGF5cycsXG4gICAgICBlb3Q6ICczNjUgZGF5cycsXG4gICAgICB0dGY6ICczNjUgZGF5cycsXG4gICAgICB3b2ZmOiAnMzY1IGRheXMnLFxuICAgICAgd29mZjI6ICczNjUgZGF5cydcbiAgICB9LFxuICAgIGZhbGxiYWNrSW5kZXhIdG1sOiB7J14vW14vPyMuXSsnOiAnPCU9bWF0Y2hbMF0lPi9pbmRleC5odG1sJ30sXG4gICAgaHR0cFByb3h5OiB7fSxcbiAgICBmZXRjaE1haWxTZXJ2ZXI6IG51bGwsXG4gICAgc2VydmVJbmRleDogZmFsc2UsXG4gICAgcmVxdWlyZVRva2VuOiBmYWxzZVxuICB9O1xuXG4gIGlmIChjb25maWcoKS5kZXZNb2RlIHx8IGNsaU9wdGlvbnMuZW52ID09PSAnbG9jYWwnKSB7XG4gICAgY29uc3QgZGV2VmFsdWU6IFBhcnRpYWw8QXNzZXRzUHJvY2Vzc2VyU2V0dGluZz4gPSB7XG4gICAgICBmZXRjaFJldHJ5OiAwLFxuICAgICAgZmV0Y2hMb2dFcnJQZXJUaW1lczogMSxcbiAgICAgIGZldGNoSW50ZXJ2YWxTZWM6IDYwLFxuICAgICAgY2FjaGVDb250cm9sTWF4QWdlOiB7fSxcbiAgICAgIGZldGNoTWFpbFNlcnZlcjogbnVsbCxcbiAgICAgIHByb3h5VG9EZXZTZXJ2ZXI6IHt0YXJnZXQ6ICdodHRwOi8vbG9jYWxob3N0OjQyMDAnfVxuICAgIH07XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oZGVmYXVsdFZhbHVlLCBkZXZWYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbn07XG5cbi8qKlxuICogVGhlIHJldHVybiBzZXR0aW5nIHZhbHVlIGlzIG1lcmdlZCB3aXRoIGZpbGVzIHNwZWNpZmllZCBieSBjb21tYW5kIGxpbmUgb3B0aW9ucyAtLXByb3AgYW5kIC1jXG4gKiBAcmV0dXJuIHNldHRpbmcgb2YgY3VycmVudCBwYWNrYWdlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRTZXR0aW5nKCk6IEFzc2V0c1Byb2Nlc3NlclNldHRpbmcge1xuICAvKiBlc2xpbnQtZGlzYWJsZSBkb3Qtbm90YXRpb24sQHR5cGVzY3JpcHQtZXNsaW50L2RvdC1ub3RhdGlvbiAqL1xuICByZXR1cm4gY29uZmlnKClbJ0B3ZmgvYXNzZXRzLXByb2Nlc3NlciddITtcbn1cbiJdfQ==