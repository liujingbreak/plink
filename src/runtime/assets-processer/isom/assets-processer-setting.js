"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSetting = exports.defaultSetting = void 0;
const plink_1 = require("@wfh/plink");
/**
 * Plink run this funtion to get package level setting value
 */
const defaultSetting = (cliOptions) => {
    const defaultValue = {
        fetchUrl: null,
        fetchRetry: 5,
        downloadMode: 'fork',
        fetchLogErrPerTimes: 20,
        fetchIntervalSec: 90,
        cacheControlMaxAge: {
            js: '365 days',
            css: '365 days',
            less: '365 days',
            html: null,
            png: '365 days',
            jpg: '365 days',
            jpeg: '365 days',
            gif: '365 days',
            svg: '365 days',
            eot: '365 days',
            ttf: '365 days',
            woff: '365 days',
            woff2: '365 days'
        },
        fallbackIndexHtml: { '^/[^/?#.]+': '<%=match[0]%>/index.html' },
        httpProxy: {},
        fetchMailServer: null,
        serveIndex: false,
        requireToken: false
    };
    if ((0, plink_1.config)().devMode || cliOptions.env === 'local') {
        const devValue = {
            fetchRetry: 0,
            fetchLogErrPerTimes: 1,
            fetchIntervalSec: 60,
            cacheControlMaxAge: {},
            fetchMailServer: null,
            proxyToDevServer: { target: 'http://localhost:4200' }
        };
        return Object.assign(defaultValue, devValue);
    }
    return defaultValue;
};
exports.defaultSetting = defaultSetting;
/**
 * The return setting value is merged with files specified by command line options --prop and -c
 * @return setting of current package
 */
function getSetting() {
    /* eslint-disable dot-notation,@typescript-eslint/dot-notation */
    return (0, plink_1.config)()['@wfh/assets-processer'];
}
exports.getSetting = getSetting;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXRzLXByb2Nlc3Nlci1zZXR0aW5nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXNzZXRzLXByb2Nlc3Nlci1zZXR0aW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHNDQUF3RDtBQTJEeEQ7O0dBRUc7QUFDSSxNQUFNLGNBQWMsR0FBaUQsQ0FBQyxVQUFVLEVBQUUsRUFBRTtJQUN6RixNQUFNLFlBQVksR0FBMkI7UUFDM0MsUUFBUSxFQUFFLElBQUk7UUFDZCxVQUFVLEVBQUUsQ0FBQztRQUNiLFlBQVksRUFBRSxNQUFNO1FBQ3BCLG1CQUFtQixFQUFFLEVBQUU7UUFDdkIsZ0JBQWdCLEVBQUUsRUFBRTtRQUNwQixrQkFBa0IsRUFBRTtZQUNsQixFQUFFLEVBQUUsVUFBVTtZQUNkLEdBQUcsRUFBRSxVQUFVO1lBQ2YsSUFBSSxFQUFFLFVBQVU7WUFDaEIsSUFBSSxFQUFFLElBQUk7WUFDVixHQUFHLEVBQUUsVUFBVTtZQUNmLEdBQUcsRUFBRSxVQUFVO1lBQ2YsSUFBSSxFQUFFLFVBQVU7WUFDaEIsR0FBRyxFQUFFLFVBQVU7WUFDZixHQUFHLEVBQUUsVUFBVTtZQUNmLEdBQUcsRUFBRSxVQUFVO1lBQ2YsR0FBRyxFQUFFLFVBQVU7WUFDZixJQUFJLEVBQUUsVUFBVTtZQUNoQixLQUFLLEVBQUUsVUFBVTtTQUNsQjtRQUNELGlCQUFpQixFQUFFLEVBQUMsWUFBWSxFQUFFLDBCQUEwQixFQUFDO1FBQzdELFNBQVMsRUFBRSxFQUFFO1FBQ2IsZUFBZSxFQUFFLElBQUk7UUFDckIsVUFBVSxFQUFFLEtBQUs7UUFDakIsWUFBWSxFQUFFLEtBQUs7S0FDcEIsQ0FBQztJQUVGLElBQUksSUFBQSxjQUFNLEdBQUUsQ0FBQyxPQUFPLElBQUksVUFBVSxDQUFDLEdBQUcsS0FBSyxPQUFPLEVBQUU7UUFDbEQsTUFBTSxRQUFRLEdBQW9DO1lBQ2hELFVBQVUsRUFBRSxDQUFDO1lBQ2IsbUJBQW1CLEVBQUUsQ0FBQztZQUN0QixnQkFBZ0IsRUFBRSxFQUFFO1lBQ3BCLGtCQUFrQixFQUFFLEVBQUU7WUFDdEIsZUFBZSxFQUFFLElBQUk7WUFDckIsZ0JBQWdCLEVBQUUsRUFBQyxNQUFNLEVBQUUsdUJBQXVCLEVBQUM7U0FDcEQsQ0FBQztRQUNGLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsUUFBUSxDQUFDLENBQUM7S0FDOUM7SUFDRCxPQUFPLFlBQVksQ0FBQztBQUN0QixDQUFDLENBQUM7QUF6Q1csUUFBQSxjQUFjLGtCQXlDekI7QUFFRjs7O0dBR0c7QUFDSCxTQUFnQixVQUFVO0lBQ3hCLGlFQUFpRTtJQUNqRSxPQUFPLElBQUEsY0FBTSxHQUFFLENBQUMsdUJBQXVCLENBQUUsQ0FBQztBQUM1QyxDQUFDO0FBSEQsZ0NBR0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2NvbmZpZywgUGFja2FnZVNldHRpbmdJbnRlcmZ9IGZyb20gJ0B3ZmgvcGxpbmsnO1xuaW1wb3J0IHtPcHRpb25zfSBmcm9tICdodHRwLXByb3h5LW1pZGRsZXdhcmUnO1xuLyoqXG4gKiBQYWNrYWdlIHNldHRpbmcgdHlwZVxuICovXG5leHBvcnQgaW50ZXJmYWNlIEFzc2V0c1Byb2Nlc3NlclNldHRpbmcge1xuICAvKiogQGRlcHJlY2F0ZWQgKi9cbiAgZmV0Y2hVcmw6IHN0cmluZyB8IG51bGw7XG4gIC8qKiBAZGVwcmVjYXRlZCAqL1xuICBmZXRjaFJldHJ5OiBudW1iZXI7XG4gIC8qKiBAZGVwcmVjYXRlZCAqL1xuICBkb3dubG9hZE1vZGU6ICdmb3JrJztcbiAgLyoqIEBkZXByZWNhdGVkICovXG4gIGZldGNoTG9nRXJyUGVyVGltZXM6IG51bWJlcjtcbiAgLyoqIEBkZXByZWNhdGVkICovXG4gIGZldGNoSW50ZXJ2YWxTZWM6IG51bWJlcjtcbiAgLyoqIFJlc3BvbnNlIG1heEFnZSBoZWFkZXIgdmFsdWUgYWdhaW5zdCBkaWZmZXJlbnQgbWVkaWEgdHlwZSBmaWxlICovXG4gIGNhY2hlQ29udHJvbE1heEFnZToge1trZXk6IHN0cmluZ106IHN0cmluZyB8IG51bGx9O1xuICAvKiogRm9yIEhUTUwgNSBoaXN0b3J5IGJhc2VkIGNsaWVudCBzaWRlIHJvdXRlLCBzZXJ2aW5nIGluZGV4Lmh0bWwgZm9yIFxuICAgKiBzcGVjaWZpYyBwYXRoLlxuICAgKiBcbiAgICogS2V5IGlzIGEgUmVnRXhwIHN0cmluZywgdmFsdWUgaXMgdGFyZ2V0IHBhdGguXG4gICAqIGUuZy4gIHsnXi9bXi8/Iy5dKyc6ICc8JT1tYXRjaFswXSU+L2luZGV4Lmh0bWwnfVxuICAgKiBcbiAgICogSW4gY2FzZSB1c2VyIGFjY2VzcyBcIi9oZWxsb3c/dWlkPTEyM1wiLCB0aGUgYWN0dWFsIEV4cHJlc3MuanNcbiAgICogYHJlcXVlc3QucGF0aGAgd2lsbCBiZSBjaGFuZ2UgdG8gXCIvaW5kZXguaHRtbFwiLCBgcmVxdWVzdC5xdWVyeWAgd2lsbCBiZSBrZXB0XG4gICAqL1xuICBmYWxsYmFja0luZGV4SHRtbDoge1trZXk6IHN0cmluZ106IHN0cmluZ307XG4gIGh0dHBQcm94eToge1twcm94eVBhdGg6IHN0cmluZ106IHN0cmluZ307XG4gIGZldGNoTWFpbFNlcnZlcjoge1xuICAgIGltYXA6IHN0cmluZztcbiAgICBzbXRwOiBzdHJpbmc7XG4gICAgdXNlcjogc3RyaW5nO1xuICAgIGxvZ2luU2VjcmV0OiBzdHJpbmc7XG4gICAgZW52Pzogc3RyaW5nO1xuICB9IHwgbnVsbDtcbiAgLyoqIFNldHRpbmcgdGhpcyB2YWx1ZSB0byB0cnVlIHdpbGwgZW5hYmxlIHNlcnZpbmcgSW5kZXggSFRNTCBwYWdlIGZvciBzdGF0aWMgcmVzb3VyY2UgdW5kZXI6XG4gICAqICA8cm9vdCBkaXI+L2Rpc3Qvc3RhdGljLlxuICAgKiBcbiAgICogWW91IG1heSBhbHNvIGFzc2lnbiBhIGRpZmZlcmVudCB2YWx1ZSB0byBQbGluayBwcm9wZXJ0eSBcInN0YXRpY0RpclwiIHRvIGNoYW5nZSBzdGF0aWMgcmVzb3VyY2UgZGlyZWN0b3J5LFxuICAgKiBlLmcuIEJ5IGNvbW1hbmQgbGluZSBvcHRpb24gYC0tcHJvcCBzdGF0aWNEaXI9PGRpcj5gXG4gICAqL1xuICBzZXJ2ZUluZGV4OiBib29sZWFuO1xuICByZXF1aXJlVG9rZW46IGJvb2xlYW47XG4gIC8qKiBcbiAgICogQHR5cGUgaW1wb3J0KCdodHRwLXByb3h5LW1pZGRsZXdhcmUnKS5PcHRpb25zXG4gICAqIFByb3h5IHJlcXVlc3QgdG8gYW5vdGhlciBkZXYgc2VydmVyLCBpZiBwcm94eSBnb3QgYW4gZXJyb3IgcmVzcG9uc2UsIHRoZW4gZmFsbGJhY2sgcmVxdWVzdCB0b1xuICAgKiBsb2NhbCBzdGF0aWMgZmlsZSByZXNvdXJjZVxuICAgKiBlLmcuIHt0YXJnZXQ6IGh0dHA6Ly9sb2NhbGhzb3Q6MzAwMH0gZm9yIGNyZWF0ZS1yZWFjdC1hcHAgZGV2IHNlcnZlcixcbiAgICoge3RhcmdldDogaHR0cDovL2xvY2FsaG9zdDo0MjAwfSBmb3IgQW5ndWxhciBkZXYgc2VydmVyXG4gICAqIFxuICAgKiBEZWZhdWx0IHZhbHVlIGlzIHt0YXJnZXQ6ICdodHRwOi8vbG9jYWxob3N0OjQyMDAnfSB3aGVuIFwiLS1kZXZcIiBtb2RlIGlzIG9uLlxuICAgKiBcbiAgICogQ2hhbmdlT3JpZ2luIGFuZCB3cyAod2Vic29ja2V0KSB3aWxsIGJlIGVuYWJsZWQsIHNpbmNlIGRldlNlcnZlciBtb3N0IGxpa2VseSB3aWxsXG4gICAqIGVuYWJsZSBXZWJwYWNrIEhNUiB0aHJvdWdoIHdlYnNvY2tldC5cbiAgKi9cbiAgcHJveHlUb0RldlNlcnZlcj86IE9wdGlvbnM7XG59XG5cbi8qKlxuICogUGxpbmsgcnVuIHRoaXMgZnVudGlvbiB0byBnZXQgcGFja2FnZSBsZXZlbCBzZXR0aW5nIHZhbHVlXG4gKi9cbmV4cG9ydCBjb25zdCBkZWZhdWx0U2V0dGluZzogUGFja2FnZVNldHRpbmdJbnRlcmY8QXNzZXRzUHJvY2Vzc2VyU2V0dGluZz4gPSAoY2xpT3B0aW9ucykgPT4ge1xuICBjb25zdCBkZWZhdWx0VmFsdWU6IEFzc2V0c1Byb2Nlc3NlclNldHRpbmcgPSB7XG4gICAgZmV0Y2hVcmw6IG51bGwsXG4gICAgZmV0Y2hSZXRyeTogNSxcbiAgICBkb3dubG9hZE1vZGU6ICdmb3JrJyxcbiAgICBmZXRjaExvZ0VyclBlclRpbWVzOiAyMCxcbiAgICBmZXRjaEludGVydmFsU2VjOiA5MCxcbiAgICBjYWNoZUNvbnRyb2xNYXhBZ2U6IHtcbiAgICAgIGpzOiAnMzY1IGRheXMnLFxuICAgICAgY3NzOiAnMzY1IGRheXMnLFxuICAgICAgbGVzczogJzM2NSBkYXlzJyxcbiAgICAgIGh0bWw6IG51bGwsXG4gICAgICBwbmc6ICczNjUgZGF5cycsXG4gICAgICBqcGc6ICczNjUgZGF5cycsXG4gICAgICBqcGVnOiAnMzY1IGRheXMnLFxuICAgICAgZ2lmOiAnMzY1IGRheXMnLFxuICAgICAgc3ZnOiAnMzY1IGRheXMnLFxuICAgICAgZW90OiAnMzY1IGRheXMnLFxuICAgICAgdHRmOiAnMzY1IGRheXMnLFxuICAgICAgd29mZjogJzM2NSBkYXlzJyxcbiAgICAgIHdvZmYyOiAnMzY1IGRheXMnXG4gICAgfSxcbiAgICBmYWxsYmFja0luZGV4SHRtbDogeydeL1teLz8jLl0rJzogJzwlPW1hdGNoWzBdJT4vaW5kZXguaHRtbCd9LFxuICAgIGh0dHBQcm94eToge30sXG4gICAgZmV0Y2hNYWlsU2VydmVyOiBudWxsLFxuICAgIHNlcnZlSW5kZXg6IGZhbHNlLFxuICAgIHJlcXVpcmVUb2tlbjogZmFsc2VcbiAgfTtcblxuICBpZiAoY29uZmlnKCkuZGV2TW9kZSB8fCBjbGlPcHRpb25zLmVudiA9PT0gJ2xvY2FsJykge1xuICAgIGNvbnN0IGRldlZhbHVlOiBQYXJ0aWFsPEFzc2V0c1Byb2Nlc3NlclNldHRpbmc+ID0ge1xuICAgICAgZmV0Y2hSZXRyeTogMCxcbiAgICAgIGZldGNoTG9nRXJyUGVyVGltZXM6IDEsXG4gICAgICBmZXRjaEludGVydmFsU2VjOiA2MCxcbiAgICAgIGNhY2hlQ29udHJvbE1heEFnZToge30sXG4gICAgICBmZXRjaE1haWxTZXJ2ZXI6IG51bGwsXG4gICAgICBwcm94eVRvRGV2U2VydmVyOiB7dGFyZ2V0OiAnaHR0cDovL2xvY2FsaG9zdDo0MjAwJ31cbiAgICB9O1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKGRlZmF1bHRWYWx1ZSwgZGV2VmFsdWUpO1xuICB9XG4gIHJldHVybiBkZWZhdWx0VmFsdWU7XG59O1xuXG4vKipcbiAqIFRoZSByZXR1cm4gc2V0dGluZyB2YWx1ZSBpcyBtZXJnZWQgd2l0aCBmaWxlcyBzcGVjaWZpZWQgYnkgY29tbWFuZCBsaW5lIG9wdGlvbnMgLS1wcm9wIGFuZCAtY1xuICogQHJldHVybiBzZXR0aW5nIG9mIGN1cnJlbnQgcGFja2FnZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2V0dGluZygpOiBBc3NldHNQcm9jZXNzZXJTZXR0aW5nIHtcbiAgLyogZXNsaW50LWRpc2FibGUgZG90LW5vdGF0aW9uLEB0eXBlc2NyaXB0LWVzbGludC9kb3Qtbm90YXRpb24gKi9cbiAgcmV0dXJuIGNvbmZpZygpWydAd2ZoL2Fzc2V0cy1wcm9jZXNzZXInXSE7XG59XG4iXX0=