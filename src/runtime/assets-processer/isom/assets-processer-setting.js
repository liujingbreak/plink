"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSetting = exports.defaultSetting = void 0;
const plink_1 = require("@wfh/plink");
/**
 * Plink run this funtion to get package level setting value
 */
const defaultSetting = (cliOptions) => {
    const defaultValue = {
        fetchUrl: null,
        fetchRetry: 5,
        downloadMode: 'fork',
        fetchLogErrPerTimes: 20,
        fetchIntervalSec: 90,
        cacheControlMaxAge: {
            js: '365 days',
            css: '365 days',
            less: '365 days',
            html: null,
            png: '365 days',
            jpg: '365 days',
            jpeg: '365 days',
            gif: '365 days',
            svg: '365 days',
            eot: '365 days',
            ttf: '365 days',
            woff: '365 days',
            woff2: '365 days'
        },
        fallbackIndexHtml: { '^/[^/?#.]+': '<%=match[0]%>/index.html' },
        httpProxy: {},
        httpProxyWithCache: {},
        fetchMailServer: null,
        serveIndex: false,
        requireToken: false
    };
    if ((0, plink_1.config)().devMode || cliOptions.env === 'local') {
        const devValue = {
            fetchRetry: 0,
            fetchLogErrPerTimes: 1,
            fetchIntervalSec: 60,
            cacheControlMaxAge: {},
            fetchMailServer: null,
            proxyToDevServer: { target: 'http://localhost:4200' }
        };
        return Object.assign(defaultValue, devValue);
    }
    return defaultValue;
};
exports.defaultSetting = defaultSetting;
/**
 * The return setting value is merged with files specified by command line options --prop and -c
 * @return setting of current package
 */
function getSetting() {
    /* eslint-disable dot-notation,@typescript-eslint/dot-notation */
    return (0, plink_1.config)()['@wfh/assets-processer'];
}
exports.getSetting = getSetting;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXRzLXByb2Nlc3Nlci1zZXR0aW5nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXNzZXRzLXByb2Nlc3Nlci1zZXR0aW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHNDQUF3RDtBQTRFeEQ7O0dBRUc7QUFDSSxNQUFNLGNBQWMsR0FBaUQsQ0FBQyxVQUFVLEVBQUUsRUFBRTtJQUN6RixNQUFNLFlBQVksR0FBMkI7UUFDM0MsUUFBUSxFQUFFLElBQUk7UUFDZCxVQUFVLEVBQUUsQ0FBQztRQUNiLFlBQVksRUFBRSxNQUFNO1FBQ3BCLG1CQUFtQixFQUFFLEVBQUU7UUFDdkIsZ0JBQWdCLEVBQUUsRUFBRTtRQUNwQixrQkFBa0IsRUFBRTtZQUNsQixFQUFFLEVBQUUsVUFBVTtZQUNkLEdBQUcsRUFBRSxVQUFVO1lBQ2YsSUFBSSxFQUFFLFVBQVU7WUFDaEIsSUFBSSxFQUFFLElBQUk7WUFDVixHQUFHLEVBQUUsVUFBVTtZQUNmLEdBQUcsRUFBRSxVQUFVO1lBQ2YsSUFBSSxFQUFFLFVBQVU7WUFDaEIsR0FBRyxFQUFFLFVBQVU7WUFDZixHQUFHLEVBQUUsVUFBVTtZQUNmLEdBQUcsRUFBRSxVQUFVO1lBQ2YsR0FBRyxFQUFFLFVBQVU7WUFDZixJQUFJLEVBQUUsVUFBVTtZQUNoQixLQUFLLEVBQUUsVUFBVTtTQUNsQjtRQUNELGlCQUFpQixFQUFFLEVBQUMsWUFBWSxFQUFFLDBCQUEwQixFQUFDO1FBQzdELFNBQVMsRUFBRSxFQUFFO1FBQ2Isa0JBQWtCLEVBQUUsRUFBRTtRQUN0QixlQUFlLEVBQUUsSUFBSTtRQUNyQixVQUFVLEVBQUUsS0FBSztRQUNqQixZQUFZLEVBQUUsS0FBSztLQUNwQixDQUFDO0lBRUYsSUFBSSxJQUFBLGNBQU0sR0FBRSxDQUFDLE9BQU8sSUFBSSxVQUFVLENBQUMsR0FBRyxLQUFLLE9BQU8sRUFBRTtRQUNsRCxNQUFNLFFBQVEsR0FBb0M7WUFDaEQsVUFBVSxFQUFFLENBQUM7WUFDYixtQkFBbUIsRUFBRSxDQUFDO1lBQ3RCLGdCQUFnQixFQUFFLEVBQUU7WUFDcEIsa0JBQWtCLEVBQUUsRUFBRTtZQUN0QixlQUFlLEVBQUUsSUFBSTtZQUNyQixnQkFBZ0IsRUFBRSxFQUFDLE1BQU0sRUFBRSx1QkFBdUIsRUFBQztTQUNwRCxDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxRQUFRLENBQUMsQ0FBQztLQUM5QztJQUNELE9BQU8sWUFBWSxDQUFDO0FBQ3RCLENBQUMsQ0FBQztBQTFDVyxRQUFBLGNBQWMsa0JBMEN6QjtBQUVGOzs7R0FHRztBQUNILFNBQWdCLFVBQVU7SUFDeEIsaUVBQWlFO0lBQ2pFLE9BQU8sSUFBQSxjQUFNLEdBQUUsQ0FBQyx1QkFBdUIsQ0FBRSxDQUFDO0FBQzVDLENBQUM7QUFIRCxnQ0FHQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Y29uZmlnLCBQYWNrYWdlU2V0dGluZ0ludGVyZn0gZnJvbSAnQHdmaC9wbGluayc7XG5pbXBvcnQge09wdGlvbnN9IGZyb20gJ2h0dHAtcHJveHktbWlkZGxld2FyZSc7XG4vKipcbiAqIFBhY2thZ2Ugc2V0dGluZyB0eXBlXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQXNzZXRzUHJvY2Vzc2VyU2V0dGluZyB7XG4gIC8qKiBAZGVwcmVjYXRlZCAqL1xuICBmZXRjaFVybDogc3RyaW5nIHwgbnVsbDtcbiAgLyoqIEBkZXByZWNhdGVkICovXG4gIGZldGNoUmV0cnk6IG51bWJlcjtcbiAgLyoqIEBkZXByZWNhdGVkICovXG4gIGRvd25sb2FkTW9kZTogJ2ZvcmsnO1xuICAvKiogQGRlcHJlY2F0ZWQgKi9cbiAgZmV0Y2hMb2dFcnJQZXJUaW1lczogbnVtYmVyO1xuICAvKiogQGRlcHJlY2F0ZWQgKi9cbiAgZmV0Y2hJbnRlcnZhbFNlYzogbnVtYmVyO1xuICAvKiogUmVzcG9uc2UgbWF4QWdlIGhlYWRlciB2YWx1ZSBhZ2FpbnN0IGRpZmZlcmVudCBtZWRpYSB0eXBlIGZpbGUgKi9cbiAgY2FjaGVDb250cm9sTWF4QWdlOiB7W2tleTogc3RyaW5nXTogc3RyaW5nIHwgbnVsbH07XG4gIC8qKiBGb3IgSFRNTCA1IGhpc3RvcnkgYmFzZWQgY2xpZW50IHNpZGUgcm91dGUsIHNlcnZpbmcgaW5kZXguaHRtbCBmb3IgXG4gICAqIHNwZWNpZmljIHBhdGguXG4gICAqIFxuICAgKiBLZXkgaXMgYSBSZWdFeHAgc3RyaW5nLCB2YWx1ZSBpcyB0YXJnZXQgcGF0aC5cbiAgICogZS5nLiAgeydeL1teLz8jLl0rJzogJzwlPW1hdGNoWzBdJT4vaW5kZXguaHRtbCd9XG4gICAqIFxuICAgKiBJbiBjYXNlIHVzZXIgYWNjZXNzIFwiL2hlbGxvdz91aWQ9MTIzXCIgb3IgXCIvaGVsbG93L3N1YlwiLCB0aGUgYWN0dWFsIEV4cHJlc3MuanNcbiAgICogYHJlcXVlc3QucGF0aGAgd2lsbCBiZSBjaGFuZ2UgdG8gXCIvaW5kZXguaHRtbFwiLCBgcmVxdWVzdC5xdWVyeWAgd2lsbCBiZSBrZXB0XG4gICAqL1xuICBmYWxsYmFja0luZGV4SHRtbDoge1trZXk6IHN0cmluZ106IHN0cmluZ307XG4gIGh0dHBQcm94eToge1twcm94eVBhdGg6IHN0cmluZ106IHN0cmluZ307XG4gIGh0dHBQcm94eVdpdGhDYWNoZToge1twcm94eVBhdGg6IHN0cmluZ106IHN0cmluZ307XG4gIC8qKlxuICAgKiBTdGFydCB3aXRoIGEgTlBNIHJlZ2lzdHJ5IGNhY2hlIHNlcnZlclxuICAgKi9cbiAgbnBtUmVnaXN0cnlDYWNoZVNlcnZlcj86IHtcbiAgICAvKiogZGVmYXVsdCBpcyBjYWxjdWxhdGVkLCBieSBgY29uZmlnKCkubG9jYWxJUGAgYW5kIGBjb25maWcoKS5wb3J0YCwgZS5nLiAnaHR0cDovLzE5Mi4xNjguMS4zOjE0MzMzJyAqL1xuICAgIGhvc3Q/OiBzdHJpbmc7XG4gICAgLyoqIGRlZmF1bHQgaXMgL3JlZ2lzdHJ5ICovXG4gICAgcGF0aD86IHN0cmluZztcbiAgICAvKiogZGVmYXVsdCBjYWNoZSBkaXJlY3RvcnkgaXMgZGlzdC9ucG0tcmVnaXN0cnktY2FjaGUgKi9cbiAgICBjYWNoZURpcj86IHN0cmluZztcbiAgICAvKiogVVJJIG9mIHVwc3RyZWFtIHJlZ2lzdHJ5LCBkZWZhdWx0IGlzIGh0dHBzOi8vcmVnaXN0cnkubnBtanMub3JnICovXG4gICAgcmVnaXN0cnk/OiBzdHJpbmc7XG4gICAgLyoqIHByb3h5IHNlcnZlciAqL1xuICAgIHByb3h5Pzogc3RyaW5nO1xuICB9O1xuICBmZXRjaE1haWxTZXJ2ZXI6IHtcbiAgICBpbWFwOiBzdHJpbmc7XG4gICAgc210cDogc3RyaW5nO1xuICAgIHVzZXI6IHN0cmluZztcbiAgICBsb2dpblNlY3JldDogc3RyaW5nO1xuICAgIGVudj86IHN0cmluZztcbiAgfSB8IG51bGw7XG5cbiAgLyoqIFNldHRpbmcgdGhpcyB2YWx1ZSB0byB0cnVlIHdpbGwgZW5hYmxlIHNlcnZpbmcgSW5kZXggSFRNTCBwYWdlIGZvciBzdGF0aWMgcmVzb3VyY2UgdW5kZXI6XG4gICAqICA8cm9vdCBkaXI+L2Rpc3Qvc3RhdGljLlxuICAgKiBcbiAgICogWW91IG1heSBhbHNvIGFzc2lnbiBhIGRpZmZlcmVudCB2YWx1ZSB0byBQbGluayBwcm9wZXJ0eSBcInN0YXRpY0RpclwiIHRvIGNoYW5nZSBzdGF0aWMgcmVzb3VyY2UgZGlyZWN0b3J5LFxuICAgKiBlLmcuIEJ5IGNvbW1hbmQgbGluZSBvcHRpb24gYC0tcHJvcCBzdGF0aWNEaXI9PGRpcj5gXG4gICAqL1xuICBzZXJ2ZUluZGV4OiBib29sZWFuO1xuICByZXF1aXJlVG9rZW46IGJvb2xlYW47XG4gIC8qKiBcbiAgICogQHR5cGUgaW1wb3J0KCdodHRwLXByb3h5LW1pZGRsZXdhcmUnKS5PcHRpb25zXG4gICAqIFByb3h5IHJlcXVlc3QgdG8gYW5vdGhlciBkZXYgc2VydmVyLCBpZiBwcm94eSBnb3QgYW4gZXJyb3IgcmVzcG9uc2UsIHRoZW4gZmFsbGJhY2sgcmVxdWVzdCB0b1xuICAgKiBsb2NhbCBzdGF0aWMgZmlsZSByZXNvdXJjZVxuICAgKiBlLmcuIHt0YXJnZXQ6IGh0dHA6Ly9sb2NhbGhzb3Q6MzAwMH0gZm9yIGNyZWF0ZS1yZWFjdC1hcHAgZGV2IHNlcnZlcixcbiAgICoge3RhcmdldDogaHR0cDovL2xvY2FsaG9zdDo0MjAwfSBmb3IgQW5ndWxhciBkZXYgc2VydmVyXG4gICAqIFxuICAgKiBEZWZhdWx0IHZhbHVlIGlzIHt0YXJnZXQ6ICdodHRwOi8vbG9jYWxob3N0OjQyMDAnfSB3aGVuIFwiLS1kZXZcIiBtb2RlIGlzIG9uLlxuICAgKiBcbiAgICogQ2hhbmdlT3JpZ2luIGFuZCB3cyAod2Vic29ja2V0KSB3aWxsIGJlIGVuYWJsZWQsIHNpbmNlIGRldlNlcnZlciBtb3N0IGxpa2VseSB3aWxsXG4gICAqIGVuYWJsZSBXZWJwYWNrIEhNUiB0aHJvdWdoIHdlYnNvY2tldC5cbiAgKi9cbiAgcHJveHlUb0RldlNlcnZlcj86IE9wdGlvbnM7XG59XG5cbi8qKlxuICogUGxpbmsgcnVuIHRoaXMgZnVudGlvbiB0byBnZXQgcGFja2FnZSBsZXZlbCBzZXR0aW5nIHZhbHVlXG4gKi9cbmV4cG9ydCBjb25zdCBkZWZhdWx0U2V0dGluZzogUGFja2FnZVNldHRpbmdJbnRlcmY8QXNzZXRzUHJvY2Vzc2VyU2V0dGluZz4gPSAoY2xpT3B0aW9ucykgPT4ge1xuICBjb25zdCBkZWZhdWx0VmFsdWU6IEFzc2V0c1Byb2Nlc3NlclNldHRpbmcgPSB7XG4gICAgZmV0Y2hVcmw6IG51bGwsXG4gICAgZmV0Y2hSZXRyeTogNSxcbiAgICBkb3dubG9hZE1vZGU6ICdmb3JrJyxcbiAgICBmZXRjaExvZ0VyclBlclRpbWVzOiAyMCxcbiAgICBmZXRjaEludGVydmFsU2VjOiA5MCxcbiAgICBjYWNoZUNvbnRyb2xNYXhBZ2U6IHtcbiAgICAgIGpzOiAnMzY1IGRheXMnLFxuICAgICAgY3NzOiAnMzY1IGRheXMnLFxuICAgICAgbGVzczogJzM2NSBkYXlzJyxcbiAgICAgIGh0bWw6IG51bGwsXG4gICAgICBwbmc6ICczNjUgZGF5cycsXG4gICAgICBqcGc6ICczNjUgZGF5cycsXG4gICAgICBqcGVnOiAnMzY1IGRheXMnLFxuICAgICAgZ2lmOiAnMzY1IGRheXMnLFxuICAgICAgc3ZnOiAnMzY1IGRheXMnLFxuICAgICAgZW90OiAnMzY1IGRheXMnLFxuICAgICAgdHRmOiAnMzY1IGRheXMnLFxuICAgICAgd29mZjogJzM2NSBkYXlzJyxcbiAgICAgIHdvZmYyOiAnMzY1IGRheXMnXG4gICAgfSxcbiAgICBmYWxsYmFja0luZGV4SHRtbDogeydeL1teLz8jLl0rJzogJzwlPW1hdGNoWzBdJT4vaW5kZXguaHRtbCd9LFxuICAgIGh0dHBQcm94eToge30sXG4gICAgaHR0cFByb3h5V2l0aENhY2hlOiB7fSxcbiAgICBmZXRjaE1haWxTZXJ2ZXI6IG51bGwsXG4gICAgc2VydmVJbmRleDogZmFsc2UsXG4gICAgcmVxdWlyZVRva2VuOiBmYWxzZVxuICB9O1xuXG4gIGlmIChjb25maWcoKS5kZXZNb2RlIHx8IGNsaU9wdGlvbnMuZW52ID09PSAnbG9jYWwnKSB7XG4gICAgY29uc3QgZGV2VmFsdWU6IFBhcnRpYWw8QXNzZXRzUHJvY2Vzc2VyU2V0dGluZz4gPSB7XG4gICAgICBmZXRjaFJldHJ5OiAwLFxuICAgICAgZmV0Y2hMb2dFcnJQZXJUaW1lczogMSxcbiAgICAgIGZldGNoSW50ZXJ2YWxTZWM6IDYwLFxuICAgICAgY2FjaGVDb250cm9sTWF4QWdlOiB7fSxcbiAgICAgIGZldGNoTWFpbFNlcnZlcjogbnVsbCxcbiAgICAgIHByb3h5VG9EZXZTZXJ2ZXI6IHt0YXJnZXQ6ICdodHRwOi8vbG9jYWxob3N0OjQyMDAnfVxuICAgIH07XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oZGVmYXVsdFZhbHVlLCBkZXZWYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbn07XG5cbi8qKlxuICogVGhlIHJldHVybiBzZXR0aW5nIHZhbHVlIGlzIG1lcmdlZCB3aXRoIGZpbGVzIHNwZWNpZmllZCBieSBjb21tYW5kIGxpbmUgb3B0aW9ucyAtLXByb3AgYW5kIC1jXG4gKiBAcmV0dXJuIHNldHRpbmcgb2YgY3VycmVudCBwYWNrYWdlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRTZXR0aW5nKCk6IEFzc2V0c1Byb2Nlc3NlclNldHRpbmcge1xuICAvKiBlc2xpbnQtZGlzYWJsZSBkb3Qtbm90YXRpb24sQHR5cGVzY3JpcHQtZXNsaW50L2RvdC1ub3RhdGlvbiAqL1xuICByZXR1cm4gY29uZmlnKClbJ0B3ZmgvYXNzZXRzLXByb2Nlc3NlciddITtcbn1cbiJdfQ==