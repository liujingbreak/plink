"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSetting = exports.defaultSetting = void 0;
const plink_1 = require("@wfh/plink");
/**
 * Plink run this funtion to get package level setting value
 */
const defaultSetting = (cliOptions) => {
    const defaultValue = {
        fetchUrl: null,
        fetchRetry: 5,
        downloadMode: 'fork',
        fetchLogErrPerTimes: 20,
        fetchIntervalSec: 90,
        cacheControlMaxAge: {
            js: '365 days',
            css: '365 days',
            less: '365 days',
            html: null,
            png: '365 days',
            jpg: '365 days',
            jpeg: '365 days',
            gif: '365 days',
            svg: '365 days',
            eot: '365 days',
            ttf: '365 days',
            woff: '365 days',
            woff2: '365 days'
        },
        fallbackIndexHtml: { '^/[^/?#.]+': '<%=match[0]%>/index.html' },
        httpProxy: {},
        httpProxyWithCache: {},
        fetchMailServer: null,
        serveIndex: false,
        requireToken: false
    };
    if ((0, plink_1.config)().devMode || cliOptions.env === 'local') {
        const devValue = {
            fetchRetry: 0,
            fetchLogErrPerTimes: 1,
            fetchIntervalSec: 60,
            cacheControlMaxAge: {},
            fetchMailServer: null,
            proxyToDevServer: { target: 'http://localhost:4200' }
        };
        return Object.assign(defaultValue, devValue);
    }
    return defaultValue;
};
exports.defaultSetting = defaultSetting;
/**
 * The return setting value is merged with files specified by command line options --prop and -c
 * @return setting of current package
 */
function getSetting() {
    /* eslint-disable dot-notation,@typescript-eslint/dot-notation */
    return (0, plink_1.config)()['@wfh/assets-processer'];
}
exports.getSetting = getSetting;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXRzLXByb2Nlc3Nlci1zZXR0aW5nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXNzZXRzLXByb2Nlc3Nlci1zZXR0aW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHNDQUF3RDtBQXdFeEQ7O0dBRUc7QUFDSSxNQUFNLGNBQWMsR0FBaUQsQ0FBQyxVQUFVLEVBQUUsRUFBRTtJQUN6RixNQUFNLFlBQVksR0FBMkI7UUFDM0MsUUFBUSxFQUFFLElBQUk7UUFDZCxVQUFVLEVBQUUsQ0FBQztRQUNiLFlBQVksRUFBRSxNQUFNO1FBQ3BCLG1CQUFtQixFQUFFLEVBQUU7UUFDdkIsZ0JBQWdCLEVBQUUsRUFBRTtRQUNwQixrQkFBa0IsRUFBRTtZQUNsQixFQUFFLEVBQUUsVUFBVTtZQUNkLEdBQUcsRUFBRSxVQUFVO1lBQ2YsSUFBSSxFQUFFLFVBQVU7WUFDaEIsSUFBSSxFQUFFLElBQUk7WUFDVixHQUFHLEVBQUUsVUFBVTtZQUNmLEdBQUcsRUFBRSxVQUFVO1lBQ2YsSUFBSSxFQUFFLFVBQVU7WUFDaEIsR0FBRyxFQUFFLFVBQVU7WUFDZixHQUFHLEVBQUUsVUFBVTtZQUNmLEdBQUcsRUFBRSxVQUFVO1lBQ2YsR0FBRyxFQUFFLFVBQVU7WUFDZixJQUFJLEVBQUUsVUFBVTtZQUNoQixLQUFLLEVBQUUsVUFBVTtTQUNsQjtRQUNELGlCQUFpQixFQUFFLEVBQUMsWUFBWSxFQUFFLDBCQUEwQixFQUFDO1FBQzdELFNBQVMsRUFBRSxFQUFFO1FBQ2Isa0JBQWtCLEVBQUUsRUFBRTtRQUN0QixlQUFlLEVBQUUsSUFBSTtRQUNyQixVQUFVLEVBQUUsS0FBSztRQUNqQixZQUFZLEVBQUUsS0FBSztLQUNwQixDQUFDO0lBRUYsSUFBSSxJQUFBLGNBQU0sR0FBRSxDQUFDLE9BQU8sSUFBSSxVQUFVLENBQUMsR0FBRyxLQUFLLE9BQU8sRUFBRTtRQUNsRCxNQUFNLFFBQVEsR0FBb0M7WUFDaEQsVUFBVSxFQUFFLENBQUM7WUFDYixtQkFBbUIsRUFBRSxDQUFDO1lBQ3RCLGdCQUFnQixFQUFFLEVBQUU7WUFDcEIsa0JBQWtCLEVBQUUsRUFBRTtZQUN0QixlQUFlLEVBQUUsSUFBSTtZQUNyQixnQkFBZ0IsRUFBRSxFQUFDLE1BQU0sRUFBRSx1QkFBdUIsRUFBQztTQUNwRCxDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxRQUFRLENBQUMsQ0FBQztLQUM5QztJQUNELE9BQU8sWUFBWSxDQUFDO0FBQ3RCLENBQUMsQ0FBQztBQTFDVyxRQUFBLGNBQWMsa0JBMEN6QjtBQUVGOzs7R0FHRztBQUNILFNBQWdCLFVBQVU7SUFDeEIsaUVBQWlFO0lBQ2pFLE9BQU8sSUFBQSxjQUFNLEdBQUUsQ0FBQyx1QkFBdUIsQ0FBRSxDQUFDO0FBQzVDLENBQUM7QUFIRCxnQ0FHQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Y29uZmlnLCBQYWNrYWdlU2V0dGluZ0ludGVyZn0gZnJvbSAnQHdmaC9wbGluayc7XG5pbXBvcnQge09wdGlvbnN9IGZyb20gJ2h0dHAtcHJveHktbWlkZGxld2FyZSc7XG4vKipcbiAqIFBhY2thZ2Ugc2V0dGluZyB0eXBlXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQXNzZXRzUHJvY2Vzc2VyU2V0dGluZyB7XG4gIC8qKiBAZGVwcmVjYXRlZCAqL1xuICBmZXRjaFVybDogc3RyaW5nIHwgbnVsbDtcbiAgLyoqIEBkZXByZWNhdGVkICovXG4gIGZldGNoUmV0cnk6IG51bWJlcjtcbiAgLyoqIEBkZXByZWNhdGVkICovXG4gIGRvd25sb2FkTW9kZTogJ2ZvcmsnO1xuICAvKiogQGRlcHJlY2F0ZWQgKi9cbiAgZmV0Y2hMb2dFcnJQZXJUaW1lczogbnVtYmVyO1xuICAvKiogQGRlcHJlY2F0ZWQgKi9cbiAgZmV0Y2hJbnRlcnZhbFNlYzogbnVtYmVyO1xuICAvKiogUmVzcG9uc2UgbWF4QWdlIGhlYWRlciB2YWx1ZSBhZ2FpbnN0IGRpZmZlcmVudCBtZWRpYSB0eXBlIGZpbGUgKi9cbiAgY2FjaGVDb250cm9sTWF4QWdlOiB7W2tleTogc3RyaW5nXTogc3RyaW5nIHwgbnVsbH07XG4gIC8qKiBGb3IgSFRNTCA1IGhpc3RvcnkgYmFzZWQgY2xpZW50IHNpZGUgcm91dGUsIHNlcnZpbmcgaW5kZXguaHRtbCBmb3IgXG4gICAqIHNwZWNpZmljIHBhdGguXG4gICAqIFxuICAgKiBLZXkgaXMgYSBSZWdFeHAgc3RyaW5nLCB2YWx1ZSBpcyB0YXJnZXQgcGF0aC5cbiAgICogZS5nLiAgeydeL1teLz8jLl0rJzogJzwlPW1hdGNoWzBdJT4vaW5kZXguaHRtbCd9XG4gICAqIFxuICAgKiBJbiBjYXNlIHVzZXIgYWNjZXNzIFwiL2hlbGxvdz91aWQ9MTIzXCIgb3IgXCIvaGVsbG93L3N1YlwiLCB0aGUgYWN0dWFsIEV4cHJlc3MuanNcbiAgICogYHJlcXVlc3QucGF0aGAgd2lsbCBiZSBjaGFuZ2UgdG8gXCIvaW5kZXguaHRtbFwiLCBgcmVxdWVzdC5xdWVyeWAgd2lsbCBiZSBrZXB0XG4gICAqL1xuICBmYWxsYmFja0luZGV4SHRtbDoge1trZXk6IHN0cmluZ106IHN0cmluZ307XG4gIGh0dHBQcm94eToge1twcm94eVBhdGg6IHN0cmluZ106IHN0cmluZ307XG4gIGh0dHBQcm94eVdpdGhDYWNoZToge1twcm94eVBhdGg6IHN0cmluZ106IHN0cmluZ307XG4gIC8qKlxuICAgKiBTdGFydCB3aXRoIGEgTlBNIHJlZ2lzdHJ5IGNhY2hlIHNlcnZlclxuICAgKi9cbiAgbnBtUmVnaXN0cnlDYWNoZVNlcnZlcj86IHtcbiAgICAvKiogZGVmYXVsdCBpcyAvcmVnaXN0cnkgKi9cbiAgICBwYXRoPzogc3RyaW5nO1xuICAgIC8qKiBkZWZhdWx0IGNhY2hlIGRpcmVjdG9yeSBpcyBkaXN0L25wbS1yZWdpc3RyeS1jYWNoZSAqL1xuICAgIGNhY2hlRGlyPzogc3RyaW5nO1xuICAgIC8qKiBVUkkgb2YgdXBzdHJlYW0gcmVnaXN0cnksIGRlZmF1bHQgaXMgaHR0cHM6Ly9yZWdpc3RyeS5ucG1qcy5vcmcgKi9cbiAgICByZWdpc3RyeT86IHN0cmluZztcbiAgfTtcbiAgZmV0Y2hNYWlsU2VydmVyOiB7XG4gICAgaW1hcDogc3RyaW5nO1xuICAgIHNtdHA6IHN0cmluZztcbiAgICB1c2VyOiBzdHJpbmc7XG4gICAgbG9naW5TZWNyZXQ6IHN0cmluZztcbiAgICBlbnY/OiBzdHJpbmc7XG4gIH0gfCBudWxsO1xuXG4gIC8qKiBTZXR0aW5nIHRoaXMgdmFsdWUgdG8gdHJ1ZSB3aWxsIGVuYWJsZSBzZXJ2aW5nIEluZGV4IEhUTUwgcGFnZSBmb3Igc3RhdGljIHJlc291cmNlIHVuZGVyOlxuICAgKiAgPHJvb3QgZGlyPi9kaXN0L3N0YXRpYy5cbiAgICogXG4gICAqIFlvdSBtYXkgYWxzbyBhc3NpZ24gYSBkaWZmZXJlbnQgdmFsdWUgdG8gUGxpbmsgcHJvcGVydHkgXCJzdGF0aWNEaXJcIiB0byBjaGFuZ2Ugc3RhdGljIHJlc291cmNlIGRpcmVjdG9yeSxcbiAgICogZS5nLiBCeSBjb21tYW5kIGxpbmUgb3B0aW9uIGAtLXByb3Agc3RhdGljRGlyPTxkaXI+YFxuICAgKi9cbiAgc2VydmVJbmRleDogYm9vbGVhbjtcbiAgcmVxdWlyZVRva2VuOiBib29sZWFuO1xuICAvKiogXG4gICAqIEB0eXBlIGltcG9ydCgnaHR0cC1wcm94eS1taWRkbGV3YXJlJykuT3B0aW9uc1xuICAgKiBQcm94eSByZXF1ZXN0IHRvIGFub3RoZXIgZGV2IHNlcnZlciwgaWYgcHJveHkgZ290IGFuIGVycm9yIHJlc3BvbnNlLCB0aGVuIGZhbGxiYWNrIHJlcXVlc3QgdG9cbiAgICogbG9jYWwgc3RhdGljIGZpbGUgcmVzb3VyY2VcbiAgICogZS5nLiB7dGFyZ2V0OiBodHRwOi8vbG9jYWxoc290OjMwMDB9IGZvciBjcmVhdGUtcmVhY3QtYXBwIGRldiBzZXJ2ZXIsXG4gICAqIHt0YXJnZXQ6IGh0dHA6Ly9sb2NhbGhvc3Q6NDIwMH0gZm9yIEFuZ3VsYXIgZGV2IHNlcnZlclxuICAgKiBcbiAgICogRGVmYXVsdCB2YWx1ZSBpcyB7dGFyZ2V0OiAnaHR0cDovL2xvY2FsaG9zdDo0MjAwJ30gd2hlbiBcIi0tZGV2XCIgbW9kZSBpcyBvbi5cbiAgICogXG4gICAqIENoYW5nZU9yaWdpbiBhbmQgd3MgKHdlYnNvY2tldCkgd2lsbCBiZSBlbmFibGVkLCBzaW5jZSBkZXZTZXJ2ZXIgbW9zdCBsaWtlbHkgd2lsbFxuICAgKiBlbmFibGUgV2VicGFjayBITVIgdGhyb3VnaCB3ZWJzb2NrZXQuXG4gICovXG4gIHByb3h5VG9EZXZTZXJ2ZXI/OiBPcHRpb25zO1xufVxuXG4vKipcbiAqIFBsaW5rIHJ1biB0aGlzIGZ1bnRpb24gdG8gZ2V0IHBhY2thZ2UgbGV2ZWwgc2V0dGluZyB2YWx1ZVxuICovXG5leHBvcnQgY29uc3QgZGVmYXVsdFNldHRpbmc6IFBhY2thZ2VTZXR0aW5nSW50ZXJmPEFzc2V0c1Byb2Nlc3NlclNldHRpbmc+ID0gKGNsaU9wdGlvbnMpID0+IHtcbiAgY29uc3QgZGVmYXVsdFZhbHVlOiBBc3NldHNQcm9jZXNzZXJTZXR0aW5nID0ge1xuICAgIGZldGNoVXJsOiBudWxsLFxuICAgIGZldGNoUmV0cnk6IDUsXG4gICAgZG93bmxvYWRNb2RlOiAnZm9yaycsXG4gICAgZmV0Y2hMb2dFcnJQZXJUaW1lczogMjAsXG4gICAgZmV0Y2hJbnRlcnZhbFNlYzogOTAsXG4gICAgY2FjaGVDb250cm9sTWF4QWdlOiB7XG4gICAgICBqczogJzM2NSBkYXlzJyxcbiAgICAgIGNzczogJzM2NSBkYXlzJyxcbiAgICAgIGxlc3M6ICczNjUgZGF5cycsXG4gICAgICBodG1sOiBudWxsLFxuICAgICAgcG5nOiAnMzY1IGRheXMnLFxuICAgICAganBnOiAnMzY1IGRheXMnLFxuICAgICAganBlZzogJzM2NSBkYXlzJyxcbiAgICAgIGdpZjogJzM2NSBkYXlzJyxcbiAgICAgIHN2ZzogJzM2NSBkYXlzJyxcbiAgICAgIGVvdDogJzM2NSBkYXlzJyxcbiAgICAgIHR0ZjogJzM2NSBkYXlzJyxcbiAgICAgIHdvZmY6ICczNjUgZGF5cycsXG4gICAgICB3b2ZmMjogJzM2NSBkYXlzJ1xuICAgIH0sXG4gICAgZmFsbGJhY2tJbmRleEh0bWw6IHsnXi9bXi8/Iy5dKyc6ICc8JT1tYXRjaFswXSU+L2luZGV4Lmh0bWwnfSxcbiAgICBodHRwUHJveHk6IHt9LFxuICAgIGh0dHBQcm94eVdpdGhDYWNoZToge30sXG4gICAgZmV0Y2hNYWlsU2VydmVyOiBudWxsLFxuICAgIHNlcnZlSW5kZXg6IGZhbHNlLFxuICAgIHJlcXVpcmVUb2tlbjogZmFsc2VcbiAgfTtcblxuICBpZiAoY29uZmlnKCkuZGV2TW9kZSB8fCBjbGlPcHRpb25zLmVudiA9PT0gJ2xvY2FsJykge1xuICAgIGNvbnN0IGRldlZhbHVlOiBQYXJ0aWFsPEFzc2V0c1Byb2Nlc3NlclNldHRpbmc+ID0ge1xuICAgICAgZmV0Y2hSZXRyeTogMCxcbiAgICAgIGZldGNoTG9nRXJyUGVyVGltZXM6IDEsXG4gICAgICBmZXRjaEludGVydmFsU2VjOiA2MCxcbiAgICAgIGNhY2hlQ29udHJvbE1heEFnZToge30sXG4gICAgICBmZXRjaE1haWxTZXJ2ZXI6IG51bGwsXG4gICAgICBwcm94eVRvRGV2U2VydmVyOiB7dGFyZ2V0OiAnaHR0cDovL2xvY2FsaG9zdDo0MjAwJ31cbiAgICB9O1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKGRlZmF1bHRWYWx1ZSwgZGV2VmFsdWUpO1xuICB9XG4gIHJldHVybiBkZWZhdWx0VmFsdWU7XG59O1xuXG4vKipcbiAqIFRoZSByZXR1cm4gc2V0dGluZyB2YWx1ZSBpcyBtZXJnZWQgd2l0aCBmaWxlcyBzcGVjaWZpZWQgYnkgY29tbWFuZCBsaW5lIG9wdGlvbnMgLS1wcm9wIGFuZCAtY1xuICogQHJldHVybiBzZXR0aW5nIG9mIGN1cnJlbnQgcGFja2FnZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2V0dGluZygpOiBBc3NldHNQcm9jZXNzZXJTZXR0aW5nIHtcbiAgLyogZXNsaW50LWRpc2FibGUgZG90LW5vdGF0aW9uLEB0eXBlc2NyaXB0LWVzbGludC9kb3Qtbm90YXRpb24gKi9cbiAgcmV0dXJuIGNvbmZpZygpWydAd2ZoL2Fzc2V0cy1wcm9jZXNzZXInXSE7XG59XG4iXX0=