{"version":3,"file":"assets-processer-setting.js","sourceRoot":"","sources":["assets-processer-setting.ts"],"names":[],"mappings":";;;AAAA,sCAAwD;AA4ExD;;GAEG;AACI,MAAM,cAAc,GAAiD,CAAC,UAAU,EAAE,EAAE;IACzF,MAAM,YAAY,GAA2B;QAC3C,QAAQ,EAAE,IAAI;QACd,UAAU,EAAE,CAAC;QACb,YAAY,EAAE,MAAM;QACpB,mBAAmB,EAAE,EAAE;QACvB,gBAAgB,EAAE,EAAE;QACpB,kBAAkB,EAAE;YAClB,EAAE,EAAE,UAAU;YACd,GAAG,EAAE,UAAU;YACf,IAAI,EAAE,UAAU;YAChB,IAAI,EAAE,IAAI;YACV,GAAG,EAAE,UAAU;YACf,GAAG,EAAE,UAAU;YACf,IAAI,EAAE,UAAU;YAChB,GAAG,EAAE,UAAU;YACf,GAAG,EAAE,UAAU;YACf,GAAG,EAAE,UAAU;YACf,GAAG,EAAE,UAAU;YACf,IAAI,EAAE,UAAU;YAChB,KAAK,EAAE,UAAU;SAClB;QACD,iBAAiB,EAAE,EAAC,YAAY,EAAE,0BAA0B,EAAC;QAC7D,SAAS,EAAE,EAAE;QACb,kBAAkB,EAAE,EAAE;QACtB,eAAe,EAAE,IAAI;QACrB,UAAU,EAAE,KAAK;QACjB,YAAY,EAAE,KAAK;KACpB,CAAC;IAEF,IAAI,IAAA,cAAM,GAAE,CAAC,OAAO,IAAI,UAAU,CAAC,GAAG,KAAK,OAAO,EAAE;QAClD,MAAM,QAAQ,GAAoC;YAChD,UAAU,EAAE,CAAC;YACb,mBAAmB,EAAE,CAAC;YACtB,gBAAgB,EAAE,EAAE;YACpB,kBAAkB,EAAE,EAAE;YACtB,eAAe,EAAE,IAAI;YACrB,gBAAgB,EAAE,EAAC,MAAM,EAAE,uBAAuB,EAAC;SACpD,CAAC;QACF,OAAO,MAAM,CAAC,MAAM,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;KAC9C;IACD,OAAO,YAAY,CAAC;AACtB,CAAC,CAAC;AA1CW,QAAA,cAAc,kBA0CzB;AAEF;;;GAGG;AACH,SAAgB,UAAU;IACxB,iEAAiE;IACjE,OAAO,IAAA,cAAM,GAAE,CAAC,uBAAuB,CAAE,CAAC;AAC5C,CAAC;AAHD,gCAGC","sourcesContent":["import {config, PackageSettingInterf} from '@wfh/plink';\nimport {Options} from 'http-proxy-middleware';\n/**\n * Package setting type\n */\nexport interface AssetsProcesserSetting {\n  /** @deprecated */\n  fetchUrl: string | null;\n  /** @deprecated */\n  fetchRetry: number;\n  /** @deprecated */\n  downloadMode: 'fork';\n  /** @deprecated */\n  fetchLogErrPerTimes: number;\n  /** @deprecated */\n  fetchIntervalSec: number;\n  /** Response maxAge header value against different media type file */\n  cacheControlMaxAge: {[key: string]: string | null};\n  /** For HTML 5 history based client side route, serving index.html for \n   * specific path.\n   * \n   * Key is a RegExp string, value is target path.\n   * e.g.  {'^/[^/?#.]+': '<%=match[0]%>/index.html'}\n   * \n   * In case user access \"/hellow?uid=123\" or \"/hellow/sub\", the actual Express.js\n   * `request.path` will be change to \"/index.html\", `request.query` will be kept\n   */\n  fallbackIndexHtml: {[key: string]: string};\n  httpProxy: {[proxyPath: string]: string};\n  httpProxyWithCache: {[proxyPath: string]: string};\n  /**\n   * Start with a NPM registry cache server\n   */\n  npmRegistryCacheServer?: {\n    /** default is calculated, by `config().localIP` and `config().port`, e.g. 'http://192.168.1.3:14333' */\n    host?: string;\n    /** default is /registry */\n    path?: string;\n    /** default cache directory is dist/npm-registry-cache */\n    cacheDir?: string;\n    /** URI of upstream registry, default is https://registry.npmjs.org */\n    registry?: string;\n    /** proxy server */\n    proxy?: string;\n  };\n  fetchMailServer: {\n    imap: string;\n    smtp: string;\n    user: string;\n    loginSecret: string;\n    env?: string;\n  } | null;\n\n  /** Setting this value to true will enable serving Index HTML page for static resource under:\n   *  <root dir>/dist/static.\n   * \n   * You may also assign a different value to Plink property \"staticDir\" to change static resource directory,\n   * e.g. By command line option `--prop staticDir=<dir>`\n   */\n  serveIndex: boolean;\n  requireToken: boolean;\n  /** \n   * @type import('http-proxy-middleware').Options\n   * Proxy request to another dev server, if proxy got an error response, then fallback request to\n   * local static file resource\n   * e.g. {target: http://localhsot:3000} for create-react-app dev server,\n   * {target: http://localhost:4200} for Angular dev server\n   * \n   * Default value is {target: 'http://localhost:4200'} when \"--dev\" mode is on.\n   * \n   * ChangeOrigin and ws (websocket) will be enabled, since devServer most likely will\n   * enable Webpack HMR through websocket.\n  */\n  proxyToDevServer?: Options;\n}\n\n/**\n * Plink run this funtion to get package level setting value\n */\nexport const defaultSetting: PackageSettingInterf<AssetsProcesserSetting> = (cliOptions) => {\n  const defaultValue: AssetsProcesserSetting = {\n    fetchUrl: null,\n    fetchRetry: 5,\n    downloadMode: 'fork',\n    fetchLogErrPerTimes: 20,\n    fetchIntervalSec: 90,\n    cacheControlMaxAge: {\n      js: '365 days',\n      css: '365 days',\n      less: '365 days',\n      html: null,\n      png: '365 days',\n      jpg: '365 days',\n      jpeg: '365 days',\n      gif: '365 days',\n      svg: '365 days',\n      eot: '365 days',\n      ttf: '365 days',\n      woff: '365 days',\n      woff2: '365 days'\n    },\n    fallbackIndexHtml: {'^/[^/?#.]+': '<%=match[0]%>/index.html'},\n    httpProxy: {},\n    httpProxyWithCache: {},\n    fetchMailServer: null,\n    serveIndex: false,\n    requireToken: false\n  };\n\n  if (config().devMode || cliOptions.env === 'local') {\n    const devValue: Partial<AssetsProcesserSetting> = {\n      fetchRetry: 0,\n      fetchLogErrPerTimes: 1,\n      fetchIntervalSec: 60,\n      cacheControlMaxAge: {},\n      fetchMailServer: null,\n      proxyToDevServer: {target: 'http://localhost:4200'}\n    };\n    return Object.assign(defaultValue, devValue);\n  }\n  return defaultValue;\n};\n\n/**\n * The return setting value is merged with files specified by command line options --prop and -c\n * @return setting of current package\n */\nexport function getSetting(): AssetsProcesserSetting {\n  /* eslint-disable dot-notation,@typescript-eslint/dot-notation */\n  return config()['@wfh/assets-processer']!;\n}\n"]}