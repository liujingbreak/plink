{"version":3,"file":"remote-deploy.js","sourceRoot":"","sources":["remote-deploy.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable no-console */\nimport fs from 'fs-extra';\nimport {ZipFile} from 'yazl';\nimport glob from 'glob';\nimport { resolve } from 'path';\nimport { defer, from, timer } from 'rxjs';\nimport { catchError, map, retry } from 'rxjs/operators';\nimport api from '__api';\nimport { ImapManager } from './fetch-remote-imap';\nimport {Checksum} from './fetch-types';\nimport Path from 'path';\nimport crypto from 'crypto';\nimport {getRootDir} from '@wfh/plink/wfh/dist';\n\nconst log = require('log4js').getLogger(api.packageName + '.remote-deploy');\n\nexport function main() {\n    defer(() => from(mailDeployStaticRes())).pipe(\n    catchError(err => {\n      log.warn(err);\n      return timer(1000).pipe(map(() => {\n        throw err;\n      }));\n    }),\n    retry(3)\n    ).subscribe();\n}\n\nasync function mailDeployStaticRes() {\n  console.log('Remote deploy (mail)...');\n  let {env, src} = api.argv;\n  let appName: string | undefined;\n  if (api.argv.appName) {\n    appName = api.argv.appName;\n  }\n\n  if (env == null) {\n    // eslint-disable-next-line no-console\n    console.log('missing command arguments,', api.argv);\n    process.exit(1);\n    return;\n  }\n  const installDir = resolve(getRootDir(), 'install-' + env);\n\n  if (!fs.existsSync(installDir))\n    fs.mkdirpSync(installDir);\n  const imap = new ImapManager(env, installDir);\n\n  if (appName) {\n    await checkZipFile(src, installDir, appName);\n    await imap.fetchUpdateCheckSum(appName);\n  } else {\n    await imap.fetchChecksum();\n  }\n}\n\n/**\n * Pack directory into zip file\n * @param zipFileOrDir \n * @param installDir \n * @param appName \n */\nexport async function checkZipFile(zipFileOrDir: string, installDir: string, appName: string, excludePat?: RegExp | string) {\n\n  zipFileOrDir = zipFileOrDir ? resolve(zipFileOrDir) : resolve(installDir, `${appName}.zip`);\n\n  if (!fs.existsSync(zipFileOrDir)) {\n    console.error('\\n%s not exist, quit!', zipFileOrDir);\n    throw new Error(`${zipFileOrDir} not exist`);\n  }\n  if (fs.statSync(zipFileOrDir).isDirectory()) {\n    const destZip = resolve(installDir, `${appName}.zip`);\n    await zipDir(zipFileOrDir, destZip, excludePat);\n\n    log.info(destZip + ' is zipped: ' + fs.existsSync(destZip));\n    zipFileOrDir = destZip;\n  }\n  return zipFileOrDir;\n}\n\nexport async function zipDir(srcDir: string, destZip: string, excludePat?: RegExp | string) {\n  fs.mkdirpSync(Path.dirname(destZip));\n  log.info(`${srcDir} is a directory, zipping into ${destZip}`);\n\n  const zipFile = new ZipFile();\n  const zipDone = new Promise(resolve => {\n    zipFile.outputStream.pipe(fs.createWriteStream(destZip))\n    .on('close', resolve);\n  });\n\n  if (excludePat && typeof excludePat === 'string') {\n    excludePat = new RegExp(excludePat);\n  }\n\n  glob(srcDir.replace(/[\\\\/]/, '/') + '/**/*', {nodir: true}, (err, matches) => {\n    for (let item of matches) {\n      // item = item.replace(/[/\\\\]/, '/');\n      if (excludePat == null || !(excludePat as RegExp).test(item)) {\n        log.info(`- zip content: ${item}`);\n        zipFile.addFile(item, Path.relative(srcDir, item).replace(/[\\\\/]/, '/'));\n      }\n    }\n    zipFile.end({forceZip64Format: false});\n  });\n\n  await zipDone;\n}\n\n/**\n * drcp run assets-processer/ts/remote-deploy.ts#fetchAllZips --env test -c conf/remote-deploy-test.yaml\n */\nexport async function fetchAllZips() {\n  const env = api.argv.env;\n  if (env == null) {\n    throw new Error('Missing arguments \"--env <environment>\"');\n  }\n  const installDir = resolve(getRootDir(), 'install-' + env);\n\n  if (!fs.existsSync(installDir))\n    fs.mkdirpSync(installDir);\n  const imap = new ImapManager(env, installDir);\n  await imap.fetchChecksum();\n  await imap.fetchOtherZips('');\n}\n\ntype ChecksumItem = Checksum extends Array<infer I> ? I : unknown;\n/**\n * Call this file to generate checksum files in build process\n */\nexport async function digestInstallingFiles(rootDir?: string) {\n  if (rootDir == null) {\n    rootDir = getRootDir();\n  }\n  const list = fs.readdirSync(rootDir);\n  for (const name of list) {\n    const match = /^install-([^]+)$/.exec(name);\n    if (match == null || !fs.statSync(Path.resolve(rootDir, name)).isDirectory())\n      continue;\n    const env = match[1];\n    const files = fs.readdirSync(Path.resolve(rootDir, name));\n\n    const checksumDones: Promise<ChecksumItem>[] = [];\n\n    for (const file of files) {\n      if (!file.endsWith('.zip'))\n        continue;\n      const hash = crypto.createHash('sha256');\n      const zip = Path.resolve(rootDir, name, file);\n      const input = fs.createReadStream(zip);\n      const done = new Promise<ChecksumItem>(resolve => {\n        const stream = input.pipe(hash);\n        stream.on('readable', () => {\n          const buf = stream.read() as Buffer;\n          if (buf) {\n            const now = new Date();\n            resolve({\n              sha256: buf.toString('hex'),\n              file: (name + '/' + file).replace(/\\\\/g, '/'),\n              created: now.toLocaleString(),\n              createdTime: now.getTime()\n            });\n            stream.resume();\n          }\n        });\n      });\n      checksumDones.push(done);\n    }\n\n    const checksum = await Promise.all(checksumDones);\n    const checksumText = JSON.stringify(checksum, null, '  ');\n    // console.log(`checksum.${env}.json:\\n`, checksumText);\n    fs.writeFileSync(Path.resolve(rootDir, `checksum.${env}.json`), checksumText);\n  }\n}\n"]}