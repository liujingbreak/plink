"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.keyOfUri = exports.createProxyWithCache = void 0;
const path_1 = __importDefault(require("path"));
const stream_1 = __importDefault(require("stream"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const rx = __importStar(require("rxjs"));
const op = __importStar(require("rxjs/operators"));
const lodash_1 = __importDefault(require("lodash"));
const __plink_1 = __importDefault(require("__plink"));
const plink_1 = require("@wfh/plink");
const http_proxy_middleware_1 = require("http-proxy-middleware");
const tiny_redux_toolkit_1 = require("@wfh/redux-toolkit-observable/dist/tiny-redux-toolkit");
const utils_1 = require("../utils");
const log = (0, plink_1.log4File)(__filename);
const httpProxyLog = plink_1.logger.getLogger(log.category + '#httpProxy');
function createProxyWithCache(proxyPath, targetUrl, cacheRootDir, opts = { manual: false }) {
    var _a;
    const initialState = {
        // proxyOptions: defaultProxyOptions(proxyPath, targetUrl),
        cacheDir: cacheRootDir,
        cacheByUri: new Map(),
        responseTransformer: []
    };
    if (!opts.manual) {
        __plink_1.default.expressAppSet(app => {
            app.use(proxyPath, (req, res, next) => {
                const key = keyOfUri(req.method, req.url);
                cacheController.actionDispatcher.hitCache({ key, req, res, next });
            });
        });
    }
    const cacheController = (0, tiny_redux_toolkit_1.createSlice)({
        initialState,
        name: `HTTP-proxy-cache-${proxyPath}`,
        debug: (_a = (0, plink_1.config)().cliOptions) === null || _a === void 0 ? void 0 : _a.verbose,
        reducers: {
            configureProxy(s, payload) {
            },
            configTransformer(s, payload) {
                s.responseTransformer = payload;
            },
            hitCache(s, payload) { },
            _addToCache(s, payload) { },
            _loadFromStorage(s, payload) {
                s.cacheByUri.set(payload.key, 'loading');
            },
            _requestRemote(s, payload) {
                s.cacheByUri.set(payload.key, 'requesting');
            },
            _gotCache(s, payload) {
                log.info('got cache', payload.key);
                s.cacheByUri.set(payload.key, payload.data);
                // s.cacheByUri.delete(payload.key);
            }
        }
    });
    cacheController.epic(action$ => {
        const defaultProxyOpt = (0, utils_1.defaultProxyOptions)(proxyPath, targetUrl);
        if (opts.pathRewrite)
            defaultProxyOpt.pathRewrite = opts.pathRewrite;
        const proxyError$ = new rx.Subject();
        const proxyRes$ = new rx.Subject();
        let proxyMiddleware$ = new rx.ReplaySubject(1);
        const actions = (0, tiny_redux_toolkit_1.castByActionType)(cacheController.actions, action$);
        return rx.merge(actions.configureProxy.pipe(op.map(({ payload: extraOpt }) => {
            proxyMiddleware$.next((0, http_proxy_middleware_1.createProxyMiddleware)(Object.assign(Object.assign(Object.assign({}, defaultProxyOpt), extraOpt), { onProxyRes(...args) {
                    proxyRes$.next(args);
                    defaultProxyOpt.onProxyRes(...args);
                    if (extraOpt.onProxyRes)
                        extraOpt.onProxyRes(...args);
                },
                onError(...args) {
                    defaultProxyOpt.onError(...args);
                    proxyError$.next(args);
                    if (extraOpt.onError)
                        extraOpt.onError(...args);
                } })));
        })), actions.hitCache.pipe(op.mergeMap(({ payload }) => {
            const item = cacheController.getState().cacheByUri.get(payload.key);
            if (item == null) {
                cacheController.actionDispatcher._loadFromStorage(payload);
                return rx.EMPTY;
            }
            else if (item === 'loading' || item === 'requesting') {
                return actions._gotCache.pipe(op.filter(action => action.payload.key === payload.key), op.take(1), op.map(({ payload: { data } }) => {
                    for (const entry of data.headers) {
                        payload.res.setHeader(entry[0], entry[1]);
                    }
                    payload.res.end(data.body);
                }));
            }
            else {
                httpProxyLog.info('hit cached', payload.key);
                sendRes(payload.res, item.statusCode, item.headers, item.body);
                return rx.EMPTY;
            }
        })), actions._loadFromStorage.pipe(op.map(async ({ payload }) => {
            const dir = path_1.default.join(cacheController.getState().cacheDir, payload.key);
            const hFile = path_1.default.join(dir, 'header.json');
            const bFile = path_1.default.join(dir, 'body');
            if (fs_extra_1.default.existsSync(hFile)) {
                httpProxyLog.info('load', payload.key);
                const [headersStr, body] = await Promise.all([
                    fs_extra_1.default.promises.readFile(hFile, 'utf-8'),
                    fs_extra_1.default.promises.readFile(bFile)
                ]);
                const { statusCode, headers } = JSON.parse(headersStr);
                cacheController.actionDispatcher._gotCache({ key: payload.key, data: {
                        statusCode,
                        headers,
                        body
                    } });
                sendRes(payload.res, statusCode, headers, body);
            }
            else {
                log.info('No existing file for', payload.key);
                cacheController.actionDispatcher._requestRemote(payload);
            }
        })), actions._requestRemote.pipe(op.mergeMap(({ payload }) => rx.merge(rx.race(proxyRes$.pipe(op.filter(([proxyRes, origReq]) => origReq === payload.req), op.take(1), op.map(([proxyRes]) => {
            httpProxyLog.warn('Incoming response read completed ?', proxyRes.complete);
            cacheController.actionDispatcher._addToCache({
                key: payload.key,
                data: {
                    headers: Object.entries(proxyRes.headers).filter(entry => entry[1] != null),
                    readable: proxyRes
                }
            });
        })), proxyError$.pipe(op.filter(([err, origReq]) => origReq === payload.req), op.take(1), op.map(() => { }))), proxyMiddleware$.pipe(op.take(1), op.map(proxy => proxy(payload.req, payload.res, payload.next)))))), actions._addToCache.pipe(op.mergeMap(({ payload: { key, data } }) => {
            httpProxyLog.info('cache size:', cacheController.getState().cacheByUri.size);
            const dir = path_1.default.join(cacheController.getState().cacheDir, key);
            const file = path_1.default.join(dir, 'body');
            const statusCode = data.readable.statusCode || 200;
            const { responseTransformer } = cacheController.getState();
            return pipeToBuffer(data.readable, ...(responseTransformer ? lodash_1.default.flatten(responseTransformer.map(entry => entry(data.headers))) :
                [])).pipe(op.mergeMap(async (buf) => {
                cacheController.actionDispatcher._gotCache({ key, data: {
                        statusCode,
                        headers: data.headers,
                        body: buf
                    } });
                await fs_extra_1.default.mkdirp(path_1.default.dirname(file));
                await Promise.all([
                    fs_extra_1.default.promises.writeFile(file, buf),
                    fs_extra_1.default.promises.writeFile(path_1.default.join(dir, 'header.json'), JSON.stringify({ statusCode, headers: data.headers }, null, '  '), 'utf-8')
                ]);
                httpProxyLog.info('write response to file', path_1.default.posix.relative(process.cwd(), file));
            }), op.catchError((err, src) => {
                httpProxyLog.error('HTTP proxy cache error: failed to cache response', err);
                if (fs_extra_1.default.existsSync(dir)) {
                    return rx.defer(() => fs_extra_1.default.remove(dir)).pipe(op.take(1), op.ignoreElements() // for better TS type inference
                    );
                }
                return rx.EMPTY;
            }));
        }))).pipe(op.ignoreElements(), op.catchError((err, src) => {
            httpProxyLog.error('HTTP proxy cache error', err);
            return src;
        }));
    });
    return cacheController;
}
exports.createProxyWithCache = createProxyWithCache;
function pipeToBuffer(source, ...transformers) {
    return new rx.Observable(sub => {
        const bodyBufs = [];
        let completeBody;
        if (source.complete) {
            sub.error(new Error('response is completed earlier'));
        }
        else {
            const streams = [
                source,
                ...transformers,
                new stream_1.default.Writable({
                    write(chunk, enc, cb) {
                        bodyBufs.push(chunk);
                        cb();
                    }
                })
            ];
            stream_1.default.pipeline(streams, (err) => {
                if (err)
                    return sub.error(err);
                completeBody = Buffer.concat(bodyBufs);
                sub.next(completeBody);
                sub.complete();
            });
        }
        return () => {
            // I am not sure if this is proper cancelling of a stream pipeline
            source.pause();
            source.destroy();
        };
    });
}
function sendRes(res, statusCode, headers, body) {
    res.status(statusCode);
    for (const [name, value] of headers) {
        res.setHeader(name, value);
    }
    if (Buffer.isBuffer(body))
        res.end(body);
    else
        stream_1.default.pipeline(body, res);
}
function keyOfUri(method, uri) {
    const url = new URL('http://f.com' + uri);
    const key = method + url.pathname + (url.search ? '/' + lodash_1.default.trimStart(url.search, '?') : '');
    return key;
}
exports.keyOfUri = keyOfUri;
//# sourceMappingURL=data:application/json;base64,