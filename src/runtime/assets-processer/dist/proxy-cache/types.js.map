{"version":3,"file":"types.js","sourceRoot":"","sources":["types.ts"],"names":[],"mappings":"","sourcesContent":["import httpProxy from 'http-proxy';\n// import {HttpProxyEventObs} from '../http-proxy-observable';\n// import { Options as HpmOptions} from 'http-proxy-middleware';\n\nexport type Transformer = (resHeaders: CacheData['headers'],\n  reqHost: string | undefined, source: NodeJS.ReadableStream) => PromiseLike<{\n  readable: () => NodeJS.ReadableStream;\n  length: number\n}>;\n\nexport type ProxyCacheState = {\n  proxy: httpProxy;\n  cacheDir: string;\n  cacheByUri: Map<string, CacheData |\n    'loading' | 'requesting' | 'saving'>;\n  /** transform remote response */\n  responseTransformer?: Transformer;\n  /** transform cached response */\n  cacheTransformer?: Transformer;\n  memCacheLength: number;\n  error?: Error;\n};\n\nexport type CacheData = {\n  statusCode: number;\n  headers: [string, string | string[]][];\n  body: () => NodeJS.ReadableStream;\n};\n\nexport type NpmRegistryVersionJson = {\n  name: string;\n  'dist-tags': {[key: string]: string};\n  versions: {\n    [version: string]: {\n      version: string;\n      dist: {\n        shasum: string;\n        size: number;\n        noattachment: boolean;\n        tarball: string;\n      };\n    };\n  };\n};\n\n/**\n * Store original tarball download URL\n */\nexport type TarballsInfo = {\n  [pkgName: string]: {\n    [version: string]: string;\n  };\n};\n"]}