{"version":3,"file":"cd-client.js","sourceRoot":"","sources":["cd-client.ts"],"names":[],"mappings":"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","sourcesContent":["import { defer, Observable, Subject } from 'rxjs';\nimport http from 'http';\nimport https from 'https';\nimport Url from 'url';\nimport api from '__api';\nimport { Checksum } from '../fetch-types';\nimport util from 'util';\nimport fs from 'fs';\nimport crypto from 'crypto';\n// import PromQ from 'promise-queue';\nconst log = require('log4js').getLogger(api.packageName + '.cd-client');\n\nconst RES_SKIP = 'Skip sending';\nexport interface Options {\n  url: string;\n  /** Name of the file to be created or replaced in remote server*/\n  remoteFile: string;\n  numOfNode: number;\n  numOfConc: number; // number of concurrent request\n  secret?: string;\n}\n\nexport interface ServerMetaInfo {\n  checksum: Checksum;\n  id: string;\n}\n\nexport async function sendAppZip(opt: Options = {} as Options, file?: string) {\n  const argv = api.argv;\n  if (!opt.url)\n    opt.url = argv.url;\n\n  if (opt.numOfNode == null) {\n    if (argv.numOfNode == null)\n      opt.numOfNode = 1;\n    else\n      opt.numOfNode = parseInt(argv.numOfNode, 10);\n  }\n\n  if (opt.numOfConc == null) {\n    if (argv.numOfConc == null)\n      opt.numOfConc = 2;\n    else\n      opt.numOfConc = parseInt(argv.numOfConc, 10);\n  }\n\n  if (file == null)\n    file = api.argv.file;\n\n  if (!opt.url) {\n    throw new Error(`Missing arguments: url... in ${opt}`);\n  }\n  log.info(opt);\n\n  let sendCount = 0;\n\n  const bufferToSend = file ? fs.readFileSync(file) : undefined;\n  let sha = '';\n  if (bufferToSend) {\n    const hash = crypto.createHash('sha256');\n    hash.update(bufferToSend);\n    sha = hash.digest('hex');\n  }\n\n\n  return new Promise<void>((resolve, reject) => {\n    // const concurQ = new PromQ(opt.numOfConc, 20);\n\n    let finishedSet = new Set<string>();\n\n    for (let i = 0, l = opt.numOfConc; i < l; i++) {\n      send();\n    }\n\n    async function send() {\n      sendCount++;\n      try {\n        log.info('#%s sending App: %s', sendCount, sha);\n        const reply = await sendRequest(opt, sha, bufferToSend);\n        const match = /^\\[ACCEPT\\] \\s*(\\S+)\\s+pid:/.exec(reply);\n        if (match && match[1])\n        finishedSet.add(match[1]);\n      } catch (ex) {\n        if (ex.message !== RES_SKIP)\n          log.warn(ex);\n      }\n      if (finishedSet.size >= opt.numOfNode) {\n        log.info(`All server recieved ${finishedSet.size} finished: ${Array.from(finishedSet.values()).join('\\n')}`);\n        resolve();\n      } else if (sendCount > 15) {\n        const msg = `Tried 15 times, ${finishedSet.size} finished: ${Array.from(finishedSet.values()).join('\\n')}`;\n        log.info(msg);\n        reject(new Error(msg));\n      } else {\n        send();\n      }\n    }\n  });\n}\n\nenum SendState {\n  ready = 0, sending, sent\n}\nfunction sendRequest(opt: Options, sha: string, buffer?: Buffer): Promise<string> {\n  const urlObj = Url.parse(opt.url, true);\n  let url = opt.url + `/${encodeURIComponent(opt.remoteFile)}/${encodeURIComponent(sha)}`;\n\n  if (opt.secret) {\n    url += '?whisper=' + encodeURIComponent(opt.secret);\n  }\n\n  let sendState = SendState.ready;\n\n  return new Promise<string>((resolve, reject) => {\n    let req: http.ClientRequest;\n    const reqOpt: http.RequestOptions = {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/octet-stream'\n      }\n    };\n\n    if (urlObj.protocol === 'http:') {\n      req = http.request(url, reqOpt, onResponse);\n    } else {\n      req = https.request(url, reqOpt, onResponse);\n    }\n\n    function onResponse(res: http.IncomingMessage) {\n      const status = res.statusCode;\n      if (status == null) {\n        reject(new Error('response status Null'));\n        return;\n      }\n\n      res.setEncoding('utf8');\n      let buf = '';\n      res.on('data', (chunk: string) => {\n        buf += chunk;\n      });\n      res.on('end', () => {\n        log.info('recieve: ', buf);\n\n        if (status === 409) {\n          if (timer) {\n            clearTimeout(timer);\n            req.end();\n            log.info('Skip sending');\n          }\n          reject(new Error(RES_SKIP));\n          return;\n        } else if (status < 200 || status > 299) {\n          reject(new Error(`status: ${status} ${res.statusMessage}, headers: ${util.inspect(res.headers)}`));\n          return;\n        }\n        resolve(buf);\n      });\n    }\n\n    req.on('error', err => reject(err));\n    let timer: ReturnType<typeof setTimeout> | null = setTimeout(() => {\n      timer = null;\n      sendState++;\n      if (buffer)\n        log.info('sending....%s b', buffer!.byteLength);\n      req.end(buffer ? buffer : 'ok', () => {\n        sendState++;\n        log.info('done sending body ', sendState);\n      });\n    }, 1000);\n  });\n}\n\nconst LR = '\\n'.charCodeAt(0);\n\n// async function connectToContentServer(opt: Options) {\n//   enum State {\n//     wait4ServerInfo = 0,\n//     wait4UploadAck\n//   }\n//   let state = State.wait4ServerInfo;\n//   let socket: TLSSocket|undefined;\n//   try {\n//     socket = await new Promise<ReturnType<typeof tslConnect>>((resolve, reject) => {\n//       const socket = tslConnect({\n//         host: opt.host, port: opt.port,\n//         enableTrace: true\n//       } as ConnectionOptions);\n\n//       fromEventPattern<Buffer>(handler => {\n//         socket!.on('data', handler);\n//       })\n//       .pipe(\n//         toLines,\n//         tap(onEachReply)\n//       ).subscribe();\n\n//       socket.on('secureConnect', () => {\n//         log.info('connected', socket.authorized ? 'authorized' : 'unauthorized');\n//         resolve(socket);\n//       })\n//       .on('error', err => reject(err))\n//       .on('timeout', () => reject(new Error('Timeout')));\n//     });\n//   } catch (ex) {\n//     if (socket)\n//       socket.end();\n//   }\n\n//   function onEachReply(line: string) {\n//     log.info('<=', line);\n//     switch (state) {\n//       case State.wait4ServerInfo:\n//         state++;\n\n//         break;\n//       case State.wait4UploadAck:\n//       default:\n//     }\n//   }\n// }\n\nexport function toLines(src: Observable<Buffer>) {\n  let chars = Buffer.alloc(100);\n    let charsOffset = 0;\n    return defer(() => {\n      const sub = new Subject<string>();\n      src.subscribe(data => {\n          for (const byte of data) {\n            if (byte === LR) {\n              sub.next(chars.toString('utf8', 0, charsOffset));\n              charsOffset = 0;\n              continue;\n            }\n            if (chars.byteLength === charsOffset) {\n              let newChars = Buffer.alloc(Math.ceil(chars.byteLength * 1.3));\n              chars.copy(newChars, 0, 0, chars.byteLength);\n              chars = newChars;\n            }\n            chars.writeUInt8(byte, charsOffset++);\n          }\n        },\n        err => sub.error(err),\n        () => sub.complete()\n      );\n      return sub;\n    });\n}\n"]}