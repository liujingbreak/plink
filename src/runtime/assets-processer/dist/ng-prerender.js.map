{"version":3,"file":"ng-prerender.js","sourceRoot":"","sources":["ng-prerender.ts"],"names":[],"mappings":"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","sourcesContent":["import {Request, Response, NextFunction} from 'express';\nimport { readFile, existsSync } from 'fs-extra';\nimport {join} from 'path';\nimport * as _ from 'lodash';\nimport api from '__api';\nconst log = require('log4js').getLogger(api.packageName);\n\nexport const ROUTE_MAP_FILE = 'prerender-routes.json';\nconst staticDir: string = api.config.resolve('staticDir');\n\nexport class PrerenderForExpress {\n  // noPrerender = false;\n  prerenderPages: {[route: string]: string} = {}; // page contents\n  // lastQueried: Map<string, number> = new Map();\n  prerenderMap: {[route: string]: string};\n\n  /**\n\t * constructor\n\t * @param routeMapFiles array of dist/static/<app>/_prerender/prerender-routes.json\n\t */\n  constructor(...routeMapFiles: string[]) {\n    // this.prerenderMapFile = join(staticDir, this.applName, '_prerender', ROUTE_MAP_FILE);\n    // this.noPrerender = !existsSync(this.prerenderMapFile);\n    // if (this.noPrerender) {\n    // \tlog.warn('No prerender files found in ', this.prerenderMapFile);\n    // \treturn;\n    // }\n    this.queryPrerenderPages(routeMapFiles)\n    .then(pages => this.prerenderPages = pages);\n\n    api.eventBus.on('@wfh/assets-processer.downloaded', async () => {\n      log.info('assets downloaded, update prerendered pages');\n      const pages = await this.queryPrerenderPages(routeMapFiles);\n      this.prerenderPages = pages;\n    });\n  }\n\n  asMiddleware() {\n    // if (api.argv.hmr) {\n    //   log.warn('Hot module replacement mode is on, no prerendered page will be served\\n');\n    //   return (req: Request, res: Response, next: NextFunction) => next();\n    // }\n    return (req: Request, res: Response, next: NextFunction) => {\n      if (req.method !== 'GET')\n        return next();\n      const route = _.trimEnd(req.originalUrl, '/');\n      if (_.has(this.prerenderPages, route)) {\n        log.info('Serve with prerender page for ', route);\n        if (this.prerenderPages[route] === null) {\n          readFile(join(staticDir, this.prerenderMap[route]), 'utf-8', (err, cont) => {\n            if (err) {\n              log.error('Failed to read prerendered page: ' + this.prerenderMap[route], err);\n              next();\n            }\n            this.prerenderPages[route] = cont;\n            res.send(cont);\n          });\n        } else {\n          res.send(this.prerenderPages[route]);\n        }\n      } else {\n        next();\n      }\n    };\n  }\n\n  protected queryPrerenderPages(routeMapFiles: string[]) {\n    const pages: {[route: string]: string} = {};\n    const allDone: Array<Promise<void>> = [];\n    for (const prerenderMapFile of routeMapFiles) {\n      if (!existsSync(prerenderMapFile))\n        continue;\n      log.info('read', prerenderMapFile);\n      allDone.push(new Promise((resolve, rej) => {\n        readFile(prerenderMapFile, 'utf-8', (err, content) => {\n          if (err)\n            return rej(err);\n          this.prerenderMap = JSON.parse(content);\n          _.forEach(this.prerenderMap, (file, route) => {\n            pages[route] = file;\n          });\n          resolve();\n        });\n      }));\n    }\n    return Promise.all(allDone).then(() => pages);\n  }\n}\n"]}