{"version":3,"file":"fetch-remote-imap.js","sourceRoot":"","sources":["fetch-remote-imap.ts"],"names":[],"mappings":"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","sourcesContent":["import { connect as tslConnect, ConnectionOptions, TLSSocket } from 'tls';\nimport Path from 'path';\nimport { createTransport } from 'nodemailer';\nimport SMTPTransport from 'nodemailer/lib/smtp-transport';\nimport {Observable, BehaviorSubject } from 'rxjs';\nimport { map, /* concatMap, takeWhile, takeLast, mapTo,*/ tap, distinctUntilChanged\n  // skip, filter, take\n} from 'rxjs/operators';\nimport fs from 'fs-extra';\nimport * as _ from 'lodash';\nimport {log4File, config} from '@wfh/plink';\nimport __plink from '__plink';\nimport { LookAhead, Token } from '@wfh/plink/wfh/dist/async-LLn-parser';\nimport {Checksum, WithMailServerConfig} from './fetch-types';\nimport {createServerDataHandler, parseLinesOfTokens, ImapTokenType, StringLit} from './mail/imap-msg-parser';\nimport {parse as parseRfc822, RCF822ParseResult} from './mail/rfc822-sync-parser';\n\n// import {Socket} from 'net';\nconst log = log4File(__filename);\n\nconst setting = config()['@wfh/assets-processer'];\nconst env = setting.fetchMailServer ? setting.fetchMailServer.env : 'local';\n\n\nconst currChecksumFile = Path.resolve('checksum.' + (setting.fetchMailServer ? env : 'local') + '.json');\n\nexport async function sendMail(subject: string, text: string, file?: string) {\n  log.info('login');\n  if (!setting.fetchMailServer) {\n    log.info('fetchMailServer is not configured! Skip sendMail');\n    return;\n  }\n  const {\n    user: EMAIL,\n    loginSecret: SECRET,\n    // imap: IMAP,\n    smtp: SMTP\n  } = setting.fetchMailServer;\n\n  const transporter = createTransport({\n    host: SMTP,\n    auth: {\n      type: 'login',\n      user: EMAIL,\n      pass: SECRET\n    },\n    secure: true\n  } as SMTPTransport.Options);\n\n  log.info('send mail');\n  const info = await transporter.sendMail({\n    from: EMAIL,\n    to: EMAIL,\n    subject: `build artifact: ${subject}`,\n    text,\n    attachments: file ? [\n      {\n        filename: Path.basename(file),\n        path: Path.resolve(file)\n      }\n    ] : undefined\n  });\n\n  log.info(info);\n}\n\nexport async function retrySendMail(subject: string, text: string, file?: string) {\n  let error: Error | undefined;\n  for (let i = 0; i < 3; i++) {\n    try {\n      await sendMail(subject, text, file);\n      error = undefined;\n      break;\n    } catch (err) {\n      log.info('Got error', err);\n      error = err;\n      await new Promise(resolve => setTimeout(resolve, 1000));\n    }\n  }\n  if (error) {\n    throw error;\n  }\n}\n\nexport interface ImapFetchData {\n  headers: {[key: string]: string[] | undefined};\n  texts: string[];\n  files: string[];\n}\n\nexport interface ImapCommandContext {\n  /**\n   * Index of latest mail\n   */\n  lastIndex: number;\n  fileWritingState: Observable<boolean>;\n  waitForReply<R = any>(command?: string,\n    onLine?: (la: LookAhead<Token<ImapTokenType>>, tag: string) => Promise<R>): Promise<R | null>;\n  findMail(fromIndx: number, subject: string): Promise<number | undefined>;\n  waitForFetch(mailIdx: string | number, headerOnly?: boolean, overrideFileName?: string): Promise<ImapFetchData>;\n  waitForFetchText(index: number): Promise<string | undefined>;\n  appendMail(subject: string, content: string): Promise<void | null>;\n}\n\n/**\n * IMAP specification\n * https://tools.ietf.org/html/rfc1730\n * \n * ID command\n * https://tools.ietf.org/html/rfc2971\n */\nexport async function connectImap(callback: (context: ImapCommandContext) => Promise<any>) {\n\n  let logEnabled = true;\n  let cmdIdx = 1;\n  const fileWritingState = new BehaviorSubject<Set<string>>(new Set<string>());\n\n  if (!setting.fetchMailServer) {\n    log.warn('fetchMailServer is not configured! Skip sendMail');\n    return;\n  }\n  const {\n      user: EMAIL,\n      loginSecret: SECRET,\n      imap: IMAP\n      // smtp: SMTP\n  } = setting.fetchMailServer;\n\n  const context: {[k in keyof ImapCommandContext]?: ImapCommandContext[k]} = {};\n\n  context.waitForReply = waitForReply;\n  context.waitForFetch = waitForFetch;\n  context.waitForFetchText = waitForFetchText;\n  context.findMail = findMail;\n  context.fileWritingState = fileWritingState.pipe(\n    map(fileSet => {\n      // log.warn('writing: ', fileSet.values());\n      return fileSet.size > 0;\n    }),\n    distinctUntilChanged()\n  );\n\n  context.appendMail = (subject: string, content: string) => {\n    const mailBody = `Date: Mon, 7 Feb 2020 21:52:25 -0800 (PST)\n      From: Credit team build machine\n      Subject: ${subject}\n      To: Admininstrator\n      Message-Id: <B27397-0100000@Blurdybloop.COM>\n      MIME-Version: 1.0\n      Content-Type: TEXT/PLAIN; CHARSET=US-ASCII\n      \n      ${content}\n      `.replace(/^[ ]+/mg, '').replace(/\\r/g, '').replace(/\\n/g, '\\r\\n');\n    return waitForReply(`APPEND INBOX {${mailBody.length}}\\r\\n` + mailBody);\n  };\n\n  const serverResHandler = createServerDataHandler();\n  serverResHandler.output.pipe(\n    tap(msg => {\n      if (msg != null)\n        // eslint-disable-next-line no-console\n        console.log('  <- ' + msg.map(token => token.text).join(' '));\n    })\n  ).subscribe();\n\n  let socket: TLSSocket | undefined;\n  try {\n    socket = await new Promise<ReturnType<typeof tslConnect>>((resolve, reject) => {\n      const socket = tslConnect({\n        host: IMAP, port: 993,\n        enableTrace: true\n      } as ConnectionOptions);\n\n      socket.on('secureConnect', () => {\n        log.info('connected', socket.authorized ? 'authorized' : 'unauthorized');\n        resolve(socket);\n      })\n      .on('error', err => reject(err))\n      .on('timeout', () => reject(new Error('Timeout')));\n      socket.on('data', (data: Buffer) => {\n        // console.log(data.toString());\n        serverResHandler.input(data);\n      });\n    });\n\n    await waitForReply();\n    await waitForReply('ID (\"name\" \"com.tencent.foxmail\" \"version\" \"7.2.9.79\")');\n    await waitForReply(`LOGIN ${EMAIL} ${SECRET}`);\n    await waitForReply('SELECT INBOX', async la => {\n      const exitsTk = await la.la(3);\n      if (exitsTk && exitsTk.text.toUpperCase() === 'EXISTS') {\n        context.lastIndex = parseInt((await la.la(2))!.text, 10);\n      }\n    });\n    // await waitForReply('SEARCH ALL');\n\n    await callback(context as ImapCommandContext);\n    await waitForReply('LOGOUT');\n  } catch (ex) {\n    log.error(ex);\n    try {\n      await waitForReply('LOGOUT');\n    } catch (er) {}\n    if (socket)\n      socket.end();\n    throw ex;\n  }\n\n  serverResHandler.input(null);\n  socket.end();\n\n  async function waitForFetchText(index: number) {\n    let body1: string | undefined;\n    await waitForReply(`FETCH ${index} BODY[1]`, async la => {\n      while ((await la.la()) != null) {\n        const token = await la.advance();\n        if (token.text === 'BODY' && (await la.la())!.text === '[1]') {\n          await la.advance();\n          body1 = ((await la.advance()) as unknown as StringLit).data.toString('utf8');\n        }\n      }\n    });\n\n    // log.warn(buf);\n    // return /^\\*\\s+\\d+\\s+FETCH\\s+\\(.*?\\{\\d+\\}([^]*)\\)$/m.exec(buf)![1];\n    return body1;\n  }\n\n  function waitForReply<R = any>(command?: string, onLine?: (la: LookAhead<Token<ImapTokenType>>, tag: string) => Promise<R>): Promise<R | null> {\n    let tag: string;\n    if (command)\n      tag = 'a' + (cmdIdx++);\n\n    let result: R | null = null;\n    const prom = parseLinesOfTokens(serverResHandler.output, async la => {\n      const resTag = await la.la();\n      if (!tag && resTag!.text === '*' || resTag!.text === tag) {\n        await la.advance();\n        const state = await la.la();\n        let returnText = '';\n        if (/OK|NO/.test(state!.text)) {\n          returnText += (await la.advance()).text;\n          while ((await la.la()) != null) {\n            returnText += ' ' + (await la.advance()).text;\n          }\n        }\n        return returnText;\n      } else if (onLine) {\n        result = await onLine(la, tag);\n      }\n    });\n\n    if (command) {\n      const cmd = tag! + ' ' + command;\n      if (socket)\n        socket.write(Buffer.from(`${tag!} ${command}\\r\\n`, 'utf8'));\n      log.debug('=>', cmd);\n    }\n\n    return prom.then(() => result);\n  }\n\n  async function waitForFetch(mailIdx: string | number = '*', headerOnly = true, overrideFileName?: string): Promise<ImapFetchData> {\n    const originLogEnabled = logEnabled;\n    logEnabled = headerOnly;\n    const result = await waitForReply(`FETCH ${mailIdx} RFC822${headerOnly ? '.HEADER' : ''}`, async (la) => {\n      let msg: RCF822ParseResult | undefined;\n      while ((await la.la()) != null) {\n        const tk = await la.advance();\n        if (tk.type !== ImapTokenType.stringLit) {\n          // log.debug(tk.text);\n        } else {\n          // log.debug('string literal:\\n', (tk as unknown as StringLit).data.byteLength);\n          // const writtenFile = `email-${new Date().getTime()}.txt`;\n          // fs.writeFileSync(writtenFile, (tk as unknown as StringLit).data, 'utf8');\n          // log.debug(`writen to ${writtenFile}`);\n          msg = parseRfc822((tk as StringLit).data);\n        }\n      }\n      return {\n        headers: msg ? msg.headers.reduce((prev, curr) => {\n          prev[curr.key.toLowerCase()] = curr.value;\n          return prev;\n        }, {} as ImapFetchData['headers']) : {},\n        texts: msg ? msg.parts.filter(part => part.body != null).map(part => part.body!.toString()) : [],\n        files: msg ? msg.parts.filter(part => part.file != null).map(part => part.file!) : []\n      } as ImapFetchData;\n    });\n    logEnabled = originLogEnabled;\n\n    if (overrideFileName && result!.files[0]) {\n      fs.renameSync(result!.files[0], overrideFileName);\n    }\n\n    return result!;\n  }\n\n  async function findMail(fromIndx: number, subject: string): Promise<number | undefined> {\n    log.info('findMail', fromIndx, subject);\n    while (fromIndx > 0) {\n      const res = await waitForFetch(fromIndx);\n      if (res.headers.subject) {\n        log.debug(res.headers.subject);\n      }\n      if (res.headers.subject && res.headers.subject[0].indexOf(subject) >= 0)\n        return fromIndx;\n      fromIndx--;\n    }\n    return undefined;\n  }\n}\n\nexport class ImapManager {\n  checksumState = new BehaviorSubject<Checksum | null>(null);\n  fileWritingState: ImapCommandContext['fileWritingState'];\n  watching = false;\n  private toFetchAppsState = new BehaviorSubject<string[]>([]);\n\n  private ctx?: ImapCommandContext;\n\n  constructor(public env: string, public zipDownloadDir?: string) {\n    if (zipDownloadDir == null)\n      this.zipDownloadDir = Path.resolve(Path.dirname(currChecksumFile), 'deploy-static-' + env);\n  }\n\n  async fetchChecksum() {\n  //   let cs: Checksum | undefined;\n  //   await connectImap(async ctx => {\n  //     cs = await this._fetchChecksum(ctx);\n  //   });\n  //   log.info('fetched checksum:', cs);\n  //   this.checksumState.next(cs!);\n  //   return cs;\n  }\n\n  async fetchUpdateCheckSum(appName: string) {\n  //   let cs = await this.fetchChecksum();\n  //   log.info('fetched checksum:', cs);\n  //   if (cs!.versions![appName] == null) {\n  //     cs!.versions![appName] = {\n  //       version: 0,\n  //       path: '<see attachement file name>'\n  //     };\n  //   }\n  //   cs!.versions![appName].version++;\n  //   this.checksumState.next(cs!);\n  //   fs.mkdirpSync(Path.dirname(currChecksumFile));\n  //   const checksumStr = JSON.stringify(cs!, null, '  ');\n  //   fs.writeFileSync(currChecksumFile, checksumStr);\n  //   log.info('write %s\\n%s', currChecksumFile, checksumStr);\n  //   return cs!;\n  }\n\n  /**\n   * Done when files are written\n   * @param excludeApp exclude app\n   */\n  async fetchOtherZips(excludeApp?: string) {\n  //   let appNames = Object.keys(this.checksumState.getValue()!.versions!)\n  //   .filter(app => app !== excludeApp);\n\n  //   let fileWrittenProm: Promise<boolean> | undefined;\n\n  //   await connectImap(async ctx => {\n\n  //     fileWrittenProm = ctx.fileWritingState.pipe(\n  //       skip(1),\n  //       filter(writing => !writing),\n  //       take(appNames.length)\n  //     ).toPromise();\n\n  //     for (const app of appNames) {\n  //       log.info('fetch other zip: ' + app);\n  //       const idx = await ctx.findMail(ctx.lastIndex, `bkjk-pre-build(${this.env}-${app})`);\n  //       if (!idx) {\n  //         log.info(`mail \"bkjk-pre-build(${this.env}-${app})\" is not Found, skip download zip`);\n  //         continue;\n  //       }\n  //       await ctx.waitForFetch(idx, false, Path.resolve(this.zipDownloadDir!, app + '.zip'));\n  //     }\n  //   });\n  //   if (fileWrittenProm)\n  //     await fileWrittenProm;\n  //   return appNames;\n  }\n\n  async appendMail(subject: string, content: string) {\n    await connectImap(async ctx => {\n      await ctx.appendMail(subject, content);\n    });\n  }\n\n  // async startWatchMail(pollInterval = 60000) {\n  //   this.watching = true;\n  //   while (this.watching) {\n  //     await this.checkMailForUpdate();\n  //     await new Promise(resolve => setTimeout(resolve, pollInterval)); // 60 sec\n  //   }\n  // }\n\n  async checkMailForUpdate() {\n    await connectImap(async ctx => {\n      this.ctx = ctx;\n      this.fileWritingState = ctx.fileWritingState;\n\n      const cs = await this._fetchChecksum(ctx);\n      this.checksumState.next(cs);\n\n      const toFetchApps = this.toFetchAppsState.getValue();\n      if (toFetchApps.length > 0) {\n        this.toFetchAppsState.next([]);\n        for (const appName of toFetchApps) {\n          await this.fetchAttachment(appName);\n        }\n      }\n      // await ctx.waitForReply('SUBSCRIBE INBOX');\n      // await new Promise(resolve => setTimeout(resolve, 30000)); // 30 sec\n      delete this.ctx;\n    });\n  }\n\n  fetchAppDuringWatchAction(...appNames: string[]) {\n    this.toFetchAppsState.next(appNames);\n  }\n\n  // async sendFileAndUpdatedChecksum(appName: string, file: string) {\n  //   const cs = await this.fetchUpdateCheckSum(appName);\n  //   await retrySendMail(`bkjk-pre-build(${this.env}-${appName})`, JSON.stringify(cs, null, '  '), file);\n  // }\n\n  stopWatch() {\n    this.watching = false;\n  }\n\n  private async fetchAttachment(app: string) {\n    // const idx = await this.ctx.findMail(this.ctx.lastIndex, `bkjk-pre-build(${this.env}-${app})`);\n    // if (idx == null)\n    //   throw new Error('Cant find mail: ' + `bkjk-pre-build(${this.env}-${app})`);\n    // await this.ctx.waitForFetch(idx!, false, Path.resolve(this.zipDownloadDir!, `${app}.zip`));\n  }\n\n  private async _fetchChecksum(ctx: ImapCommandContext) {\n    const idx = await ctx.findMail(ctx.lastIndex, `bkjk-pre-build(${this.env}-`);\n    log.info('_fetchChecksum, index:', idx);\n    if (idx == null) {\n      return [];\n    }\n    const jsonStr = await ctx.waitForFetchText(idx);\n    if (jsonStr == null) {\n      throw new Error('Empty JSON text');\n    }\n    return JSON.parse(jsonStr) as Checksum;\n  }\n\n}\n\nexport async function testMail(imap: string, user: string, loginSecret: string) {\n  log.debug = log.info;\n  if (imap)\n    config.set([__plink.packageName, 'fetchMailServer'], {\n      imap, user, loginSecret\n    } as WithMailServerConfig['fetchMailServer']);\n  await connectImap(async ctx => {\n    await ctx.waitForReply('SEARCH HEAD Subject \"build artifact: bkjk-pre-build\"');\n  });\n}\n"]}