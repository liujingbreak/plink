{"version":3,"file":"index-html-route.js","sourceRoot":"","sources":["index-html-route.ts"],"names":[],"mappings":"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","sourcesContent":["import proxy, {ServerOptions} from 'http-proxy';\nimport _ from 'lodash';\n// import Url from 'url';\nimport {log4File, ExtensionContext} from '@wfh/plink';\nimport {getSetting} from '../isom/assets-processer-setting';\nimport {createBufferForHttpProxy} from './utils';\nconst log = log4File(__filename);\n\nexport function proxyToDevServer(api: ExtensionContext) {\n  // const hpmLog = log4js.getLogger('assets-process.index-html-route.proxy');\n  const setting = getSetting().proxyToDevServer as ServerOptions | undefined;\n  if (setting == null)\n    return;\n\n  const config: ServerOptions = _.cloneDeep(setting);\n  config.changeOrigin = true;\n  config.ws = true;\n  // const plinkSetting = plinkConfig();\n  // config.onProxyReq = fixRequestBody;\n  // config.logLevel = plinkSetting.devMode || plinkSetting.cliOptions?.verbose ? 'debug' : 'info';\n  // config.onError = (err, req, res) => {\n  //   if ((err as NodeJS.ErrnoException).code === 'ECONNREFUSED') {\n  //     log.info('Can not connect to %s%s, farward to local static resource', config.target, req.url);\n  //     if (isReqWithNextCb(req))\n  //       return req.__goNext();\n  //     return;\n  //   }\n  // log.warn(err);\n  // if (isReqWithNextCb(req))\n  //   req.__goNext(err);\n  // };\n\n  // const proxyHandler = proxy('/', config);\n  const proxyHanlder = proxy.createProxyServer(config);\n  api.use((req, res, next) => {\n    const body = createBufferForHttpProxy(req);\n    proxyHanlder.web(req, res, {\n      buffer: body?.readable,\n      headers: body ? {'content-length': body?.length + '' || '0'} : {}\n    }, next);\n  });\n}\n\nexport function fallbackIndexHtml(api: ExtensionContext) {\n  const ruleObj: {[key: string]: string} = getSetting().fallbackIndexHtml;\n\n  const rules: Array<{reg: RegExp; tmpl: _.TemplateExecutor}> = [];\n\n  Object.keys(ruleObj).forEach(key => {\n    rules.push({\n      reg: new RegExp(key),\n      tmpl: _.template(ruleObj[key] )\n    });\n  });\n\n  api.use('/', (req, res, next) => {\n    if (req.method !== 'GET')\n      return next();\n    log.debug(req.url);\n    rules.some(({reg, tmpl}) => {\n      const orig = req.url;\n      const match = reg.exec(req.url);\n      if (!match)\n        return false;\n      // Reference to https://github.com/kapouer/express-urlrewrite/blob/master/index.js#L45\n      req.url = req.originalUrl = tmpl({match});\n      log.info('rewrite url %s to %s', orig, req.url);\n      // const qpSetting: string | undefined = api.expressApp.get('query parser');\n\n      return true;\n    });\n    next();\n  });\n}\n"]}