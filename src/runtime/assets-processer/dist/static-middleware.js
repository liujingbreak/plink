"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createStaticRoute = void 0;
const tslib_1 = require("tslib");
const path_1 = tslib_1.__importDefault(require("path"));
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const express_1 = tslib_1.__importDefault(require("express"));
const ms = require('ms');
function createStaticRoute(staticDir, maxAgeMap = {}) {
    let maxAgeNumMap = parseMaxAgeMap(maxAgeMap);
    return express_1.default.static(staticDir, {
        setHeaders: createSetHeaderFunc(maxAgeNumMap),
        redirect: false
    });
}
exports.createStaticRoute = createStaticRoute;
// export function createZipRoute(maxAgeMap: {[extname: string]: string} = {}):
// serveZip.ZipResourceMiddleware {
//   const maxAgeNumMap = parseMaxAgeMap(maxAgeMap);
//   const zss = serveZip('', {setHeaders: createSetHeaderFunc(maxAgeNumMap)});
//   return zss;
// }
function createSetHeaderFunc(maxAgeNumMap) {
    return (res, path, entry) => {
        var ext = path_1.default.extname(path).toLowerCase();
        if (ext.startsWith('.'))
            ext = ext.substring(1);
        if (lodash_1.default.has(maxAgeNumMap, ext))
            setCacheControlHeader(res, maxAgeNumMap[ext]);
        else
            res.setHeader('Cache-Control', 'no-cache');
        res.setHeader('Access-Control-Allow-Origin', '*');
    };
}
function setCacheControlHeader(res, _maxage = 0, immutable = false) {
    if (_maxage == null) {
        res.setHeader('Cache-Control', 'no-cache');
        return;
    }
    var cacheControl = 'public, max-age=' + Math.floor(_maxage / 1000);
    if (immutable) {
        cacheControl += ', immutable';
    }
    res.setHeader('Cache-Control', cacheControl);
}
function parseMaxAgeMap(maxAgeMap) {
    let maxAgeNumMap = {};
    for (const [key, value] of Object.entries(maxAgeMap)) {
        if (value != null)
            maxAgeNumMap[key] = typeof value === 'string' ? ms(value) : value;
    }
    return maxAgeNumMap;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGljLW1pZGRsZXdhcmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzdGF0aWMtbWlkZGxld2FyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEsd0RBQXdCO0FBQ3hCLDREQUF1QjtBQUN2Qiw4REFBOEI7QUFFOUIsTUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBRXpCLFNBQWdCLGlCQUFpQixDQUFDLFNBQWlCLEVBQUUsWUFBeUQsRUFBRTtJQUM5RyxJQUFJLFlBQVksR0FBRyxjQUFjLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDN0MsT0FBTyxpQkFBTyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUU7UUFDL0IsVUFBVSxFQUFFLG1CQUFtQixDQUFDLFlBQVksQ0FBQztRQUM3QyxRQUFRLEVBQUUsS0FBSztLQUNoQixDQUFDLENBQUM7QUFDTCxDQUFDO0FBTkQsOENBTUM7QUFFRCwrRUFBK0U7QUFDL0UsbUNBQW1DO0FBQ25DLG9EQUFvRDtBQUNwRCwrRUFBK0U7QUFDL0UsZ0JBQWdCO0FBQ2hCLElBQUk7QUFFSixTQUFTLG1CQUFtQixDQUFDLFlBQXlDO0lBQ3BFLE9BQU8sQ0FBQyxHQUFhLEVBQUUsSUFBWSxFQUFFLEtBQVUsRUFBRSxFQUFFO1FBQ2pELElBQUksR0FBRyxHQUFHLGNBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDM0MsSUFBSSxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQztZQUNyQixHQUFHLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6QixJQUFJLGdCQUFDLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxHQUFHLENBQUM7WUFDMUIscUJBQXFCLENBQUMsR0FBRyxFQUFFLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDOztZQUU5QyxHQUFHLENBQUMsU0FBUyxDQUFDLGVBQWUsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUM3QyxHQUFHLENBQUMsU0FBUyxDQUFDLDZCQUE2QixFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ3BELENBQUMsQ0FBQztBQUNKLENBQUM7QUFFRCxTQUFTLHFCQUFxQixDQUFDLEdBQWEsRUFBRSxVQUF5QixDQUFDLEVBQUUsU0FBUyxHQUFHLEtBQUs7SUFDekYsSUFBSSxPQUFPLElBQUksSUFBSSxFQUFFO1FBQ25CLEdBQUcsQ0FBQyxTQUFTLENBQUMsZUFBZSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQzNDLE9BQU87S0FDUjtJQUNELElBQUksWUFBWSxHQUFHLGtCQUFrQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxDQUFDO0lBQ25FLElBQUksU0FBUyxFQUFFO1FBQ2IsWUFBWSxJQUFJLGFBQWEsQ0FBQztLQUMvQjtJQUNELEdBQUcsQ0FBQyxTQUFTLENBQUMsZUFBZSxFQUFFLFlBQVksQ0FBQyxDQUFDO0FBQy9DLENBQUM7QUFFRCxTQUFTLGNBQWMsQ0FBQyxTQUFzRDtJQUM1RSxJQUFJLFlBQVksR0FBZ0MsRUFBRSxDQUFDO0lBQ25ELEtBQUssTUFBTSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFO1FBQ3BELElBQUksS0FBSyxJQUFJLElBQUk7WUFDZixZQUFZLENBQUMsR0FBRyxDQUFDLEdBQUcsT0FBTyxLQUFLLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztLQUNyRTtJQUNELE9BQU8sWUFBWSxDQUFDO0FBQ3RCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBpbXBvcnQgc2VydmVaaXAgZnJvbSAnc2VydmUtc3RhdGljLXppcCc7XG5pbXBvcnQge1Jlc3BvbnNlLCBIYW5kbGVyfSBmcm9tICdleHByZXNzJztcbmltcG9ydCBQYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBleHByZXNzIGZyb20gJ2V4cHJlc3MnO1xuXG5jb25zdCBtcyA9IHJlcXVpcmUoJ21zJyk7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTdGF0aWNSb3V0ZShzdGF0aWNEaXI6IHN0cmluZywgbWF4QWdlTWFwOiB7W2V4dG5hbWU6IHN0cmluZ106IHN0cmluZyB8IG51bWJlciB8IG51bGx9ID0ge30pOiBIYW5kbGVyIHtcbiAgbGV0IG1heEFnZU51bU1hcCA9IHBhcnNlTWF4QWdlTWFwKG1heEFnZU1hcCk7XG4gIHJldHVybiBleHByZXNzLnN0YXRpYyhzdGF0aWNEaXIsIHtcbiAgICBzZXRIZWFkZXJzOiBjcmVhdGVTZXRIZWFkZXJGdW5jKG1heEFnZU51bU1hcCksXG4gICAgcmVkaXJlY3Q6IGZhbHNlXG4gIH0pO1xufVxuXG4vLyBleHBvcnQgZnVuY3Rpb24gY3JlYXRlWmlwUm91dGUobWF4QWdlTWFwOiB7W2V4dG5hbWU6IHN0cmluZ106IHN0cmluZ30gPSB7fSk6XG4vLyBzZXJ2ZVppcC5aaXBSZXNvdXJjZU1pZGRsZXdhcmUge1xuLy8gICBjb25zdCBtYXhBZ2VOdW1NYXAgPSBwYXJzZU1heEFnZU1hcChtYXhBZ2VNYXApO1xuLy8gICBjb25zdCB6c3MgPSBzZXJ2ZVppcCgnJywge3NldEhlYWRlcnM6IGNyZWF0ZVNldEhlYWRlckZ1bmMobWF4QWdlTnVtTWFwKX0pO1xuLy8gICByZXR1cm4genNzO1xuLy8gfVxuXG5mdW5jdGlvbiBjcmVhdGVTZXRIZWFkZXJGdW5jKG1heEFnZU51bU1hcDoge1tleHRuYW1lOiBzdHJpbmddOiBudW1iZXJ9KSB7XG4gIHJldHVybiAocmVzOiBSZXNwb25zZSwgcGF0aDogc3RyaW5nLCBlbnRyeTogYW55KSA9PiB7XG4gICAgdmFyIGV4dCA9IFBhdGguZXh0bmFtZShwYXRoKS50b0xvd2VyQ2FzZSgpO1xuICAgIGlmIChleHQuc3RhcnRzV2l0aCgnLicpKVxuICAgICAgZXh0ID0gZXh0LnN1YnN0cmluZygxKTtcbiAgICBpZiAoXy5oYXMobWF4QWdlTnVtTWFwLCBleHQpKVxuICAgICAgc2V0Q2FjaGVDb250cm9sSGVhZGVyKHJlcywgbWF4QWdlTnVtTWFwW2V4dF0pO1xuICAgIGVsc2VcbiAgICAgIHJlcy5zZXRIZWFkZXIoJ0NhY2hlLUNvbnRyb2wnLCAnbm8tY2FjaGUnKTtcbiAgICByZXMuc2V0SGVhZGVyKCdBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW4nLCAnKicpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzZXRDYWNoZUNvbnRyb2xIZWFkZXIocmVzOiBSZXNwb25zZSwgX21heGFnZTogbnVtYmVyIHwgbnVsbCA9IDAsIGltbXV0YWJsZSA9IGZhbHNlKSB7XG4gIGlmIChfbWF4YWdlID09IG51bGwpIHtcbiAgICByZXMuc2V0SGVhZGVyKCdDYWNoZS1Db250cm9sJywgJ25vLWNhY2hlJyk7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBjYWNoZUNvbnRyb2wgPSAncHVibGljLCBtYXgtYWdlPScgKyBNYXRoLmZsb29yKF9tYXhhZ2UgLyAxMDAwKTtcbiAgaWYgKGltbXV0YWJsZSkge1xuICAgIGNhY2hlQ29udHJvbCArPSAnLCBpbW11dGFibGUnO1xuICB9XG4gIHJlcy5zZXRIZWFkZXIoJ0NhY2hlLUNvbnRyb2wnLCBjYWNoZUNvbnRyb2wpO1xufVxuXG5mdW5jdGlvbiBwYXJzZU1heEFnZU1hcChtYXhBZ2VNYXA6IHtbZXh0bmFtZTogc3RyaW5nXTogc3RyaW5nIHwgbnVtYmVyIHwgbnVsbH0pIHtcbiAgbGV0IG1heEFnZU51bU1hcDoge1tleHRuYW1lOiBzdHJpbmddOiBudW1iZXJ9ID0ge307XG4gIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKG1heEFnZU1hcCkpIHtcbiAgICBpZiAodmFsdWUgIT0gbnVsbClcbiAgICAgIG1heEFnZU51bU1hcFtrZXldID0gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/IG1zKHZhbHVlKSA6IHZhbHVlO1xuICB9XG4gIHJldHVybiBtYXhBZ2VOdW1NYXA7XG59XG4iXX0=