{"version":3,"file":"dev-serve-assets.js","sourceRoot":"","sources":["dev-serve-assets.ts"],"names":[],"mappings":"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","sourcesContent":["import api from '__api';\nimport {parse} from 'url';\nimport _ from 'lodash';\nimport Path from 'path';\nimport fs from 'fs';\nimport {findAllPackages} from '@wfh/plink/wfh/dist/package-utils';\n// import {createStaticRoute} from './static-middleware';\n// import express from 'express';\n\nconst log = require('log4js').getLogger(api.packageName + '.dev-serve-assets');\n\n// const api = __api as ExpressAppApi & typeof __api;\n/**\n * Used by @wfh/ng-app-builder\n * @param deployUrl \n * @param onEach \n */\nexport function packageAssetsFolders(deployUrl: string, onEach: (dir: string, outputDir: string) => void) {\n  const rootPath = _.trimEnd(parse(deployUrl).pathname || '', '/');\n  findAllPackages(\n    (name: string, entryPath: string, parsedName: {name: string}, json: any, packagePath: string) => {\n\n    // TODO: should move this piece logic to cra-scripts\n    if (json.dr && json.dr['cra-lib-entry']) {\n      const assetsFolder = 'build/' + parsedName.name + '/static/media';\n      let assetsDir = Path.resolve(packagePath, assetsFolder);\n      if (!fs.existsSync(assetsDir))\n        return;\n      assetsDir = fs.realpathSync(assetsDir);\n\n      const pathElement = [];\n      if (rootPath)\n        pathElement.push(rootPath);\n      pathElement.push(parsedName.name + '/static/media');\n\n      const path = pathElement.join('/') + '/';\n      onEach(assetsDir, path);\n      log.info('assets: ' + path + ' -> ' + assetsDir);\n    } else {\n      const assetsFolder = json.dr ?\n        (json.dr.assetsDir ? json.dr.assetsDir : 'assets')\n          :'assets';\n\n      let assetsDir = Path.resolve(packagePath, assetsFolder);\n      let assetsDirConfigured = api.config().outputPathMap[name];\n\n      if (assetsDirConfigured != null)\n        assetsDirConfigured = _.trim(assetsDirConfigured, '/');\n      else if (json.dr && json.dr.ngRouterPath) {\n        assetsDirConfigured = _.trim(json.dr.ngRouterPath, '/');\n        log.info(packagePath + `/package.json contains \"dr.ngRouterPath\", assets directory is changed to \"${assetsDirConfigured}\"`);\n      }\n      if (fs.existsSync(assetsDir)) {\n        assetsDir = fs.realpathSync(assetsDir);\n        var pathElement = [];\n        if (rootPath)\n          pathElement.push(rootPath);\n\n        if (assetsDirConfigured == null)\n          pathElement.push(parsedName.name);\n        else if (assetsDirConfigured !== '')\n          pathElement.push(assetsDirConfigured);\n\n        let path = pathElement.join('/');\n        if (path.length > 1)\n          path += '/';\n        log.info('assets: ' + path + ' -> ' + assetsDir);\n        onEach(assetsDir, path);\n      }\n    }\n  });\n}\n"]}