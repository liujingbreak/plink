{"version":3,"file":"fetch-remote.js","sourceRoot":"","sources":["fetch-remote.ts"],"names":[],"mappings":"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","sourcesContent":["// import api from '__api';\n// import request from 'request';\n// import * as Url from 'url';\nimport * as _ from 'lodash';\nimport os from 'os';\nimport Path from 'path';\nimport fs from 'fs-extra';\nimport cluster from 'cluster';\nimport {filter, switchMap /*skip, take*/} from 'rxjs/operators';\nimport {fork, ChildProcess} from 'child_process';\nimport {Checksum, WithMailServerConfig as Setting} from './fetch-types';\nimport {ImapManager} from './fetch-remote-imap';\nimport api from '__api';\nconst log = require('log4js').getLogger('@wfh/assets-processer.fetch-remote');\n\nconst {/*pm2InstanceId, isPm2,*/ isMainProcess} = getPm2Info();\n\n// let currVersion: number = Number.NEGATIVE_INFINITY;\nlet currentChecksum: Checksum = [];\n\nconst setting = (api.config.get(api.packageName) as Setting);\nconst env = setting.fetchMailServer ? setting.fetchMailServer.env : 'local';\n// let timer: NodeJS.Timer;\n// let stopped = false;\n// let errCount = 0;\nconst currChecksumFile = api.config.resolve('rootPath', `checksum.${env}.json`);\n\nexport const zipDownloadDir = Path.resolve(Path.dirname(currChecksumFile), 'deploy-static-' + env);\n// let watcher: any;\nlet imap: ImapManager;\n\nexport async function start(imap: ImapManager) {\n  // eslint-disable-next-line\n\tlog.info(`[memory status] total ${Math.floor(os.totalmem() / 1048576)}Mb, free ${Math.floor(os.freemem() / 1048576)}Mb\\n` +\n    `[num of CPU] ${os.cpus().length}`);\n\n  if (!setting.fetchMailServer) {\n    log.info('No fetchUrl configured, skip fetching resource.');\n    return;\n  }\n\n  if (setting.downloadMode !== 'memory'  && !isMainProcess) {\n    // non inMemory mode means extracting zip file to local directory dist/static,\n    // in case of cluster mode, we only want single process do zip extracting and file writing task to avoid conflict.\n    log.info('This process is not main process');\n    return;\n  }\n  if (!fs.existsSync(zipDownloadDir))\n    fs.mkdirpSync(zipDownloadDir);\n\n  const installDir = api.config.resolve('rootPath', 'install-' + setting.fetchMailServer.env);\n  if (fs.existsSync(installDir)) {\n    fs.mkdirpSync(api.config.resolve('staticDir'));\n    const fileNames = fs.readdirSync(installDir).filter(name => Path.extname(name) === '.zip');\n    if (fileNames.length > 0) {\n      await retry(2, () => forkExtractExstingZip(installDir, api.config.resolve('staticDir'), true));\n    }\n  }\n\n  const serverContentDir = api.config.resolve('rootPath', 'server-content-' + setting.fetchMailServer.env);\n  if (fs.existsSync(serverContentDir)) {\n    const zipDir = api.config.resolve('destDir', 'server');\n    fs.mkdirpSync(zipDir);\n    const fileNames = fs.readdirSync(serverContentDir).filter(name => Path.extname(name) === '.zip');\n    if (fileNames.length > 0) {\n      await retry(2, () => forkExtractExstingZip(serverContentDir, zipDir, true));\n    }\n  }\n\n  if (setting.fetchRetry == null)\n    setting.fetchRetry = 3;\n\n  if (fs.existsSync(currChecksumFile)) {\n    currentChecksum = Object.assign(currentChecksum, fs.readJSONSync(currChecksumFile));\n    log.info('Found saved checksum file after reboot\\n', JSON.stringify(currentChecksum, null, '  '));\n  }\n  log.info('start poll mail');\n\n  imap.checksumState.pipe(\n    filter(cs => cs != null),\n    switchMap(cs => checkAndDownload(cs!, imap))\n  ).subscribe();\n\n  // await imap.checkMailForUpdate();\n\n  // await imap.startWatchMail(setting.fetchIntervalSec * 1000);\n}\n\n/**\n * It seems ok to quit process without calling this function\n */\nexport function stop() {\n  if (imap)\n    imap.stopWatch();\n  // stopped = true;\n  // if (watcher)\n  //   watcher.close();\n  // if (timer) {\n  //   clearTimeout(timer);\n  // }\n}\n\nexport function getPm2Info() {\n  const pm2InstanceId = process.env.NODE_APP_INSTANCE;\n  const isPm2 = cluster.isWorker && pm2InstanceId != null;\n  const isMainProcess = !isPm2 || pm2InstanceId === '0';\n  return {\n    isPm2,\n    pm2InstanceId,\n    isMainProcess\n  };\n}\n\n// async function runRepeatly(setting: Setting): Promise<void> {\n//   while (true) {\n//     if (stopped)\n//       return;\n\n//     try {\n//       await new Promise(resolve => setTimeout(resolve, 20000));\n//     } catch (err) {\n//       log.error(err);\n//     }\n//   }\n// }\n\nasync function checkAndDownload(checksumObj: Checksum, imap: ImapManager) {\n  // let toUpdateApps: string[] = [];\n  // if (checksumObj.versions) {\n  //   let currVersions = currentChecksum.versions;\n  //   if (currVersions == null) {\n  //     currVersions = currentChecksum.versions = {};\n  //   }\n  //   const targetVersions = checksumObj.versions;\n  //   for (const appName of Object.keys(targetVersions)) {\n  //     if (currVersions[appName] == null ||\n  //       ( targetVersions[appName] &&\n  //         currVersions[appName].version < targetVersions[appName].version)\n  //     ) {\n  //       log.info(`Find updated version of ${appName}`);\n  //       toUpdateApps.push(appName);\n  //     }\n  //   }\n  // }\n\n  // if (toUpdateApps.length > 0) {\n  //   imap.fetchAppDuringWatchAction(...toUpdateApps);\n  //   log.info('waiting for zip file written');\n  //   await imap.fileWritingState.pipe(\n  //     skip(1),\n  //     filter(writing => !writing),\n  //     take(toUpdateApps.length)\n  //     ).toPromise();\n  //   log.info('waiting for zip file written - done');\n  //   await retry(2, forkExtractExstingZip);\n  //   toUpdateApps.forEach(name => {\n  //     currentChecksum.versions![name] = checksumObj.versions![name];\n  //   });\n  // }\n}\n\n// async function run(setting: Setting) {\n//   let checksumObj: Checksum;\n//   try {\n//     checksumObj = await retry(setting.fetchRetry, fetch, setting.fetchUrl);\n//   } catch (err) {\n//     if (errCount++ % setting.fetchLogErrPerTimes === 0) {\n//       throw err;\n//     }\n//     return;\n//   }\n//   if (checksumObj == null)\n//     return;\n\n//   if (checksumObj.changeFetchUrl) {\n//     setting.fetchUrl = checksumObj.changeFetchUrl;\n//     log.info('Change fetch URL to', setting.fetchUrl);\n//   }\n//   let downloads: string[] = [];\n//   // if (checksumObj.version != null && currentChecksum.version !== checksumObj.version && checksumObj.path) {\n//   //   const file = await downloadZip(checksumObj.path);\n//   //   downloads.push(file);\n//   //   currentChecksum.version = checksumObj.version;\n//   // }\n//   if (checksumObj.versions) {\n//     let currVersions = currentChecksum.versions;\n//     if (currVersions == null) {\n//       currVersions = currentChecksum.versions = {};\n//     }\n//     const targetVersions = checksumObj.versions;\n//     for (const key of Object.keys(targetVersions)) {\n//       if (!_.has(targetVersions, key) || _.get(currVersions, [key, 'version']) !==\n//         _.get(targetVersions, [key, 'version'])) {\n//           const file = await downloadZip(targetVersions[key].path);\n//           currVersions[key] = targetVersions[key];\n//           downloads.push(file);\n//         }\n//     }\n//   }\n\n//   if (downloads.length > 0) {\n//     fs.writeFileSync(currChecksumFile, JSON.stringify(currentChecksum, null, '  '), 'utf8');\n//     // downloads.forEach(file => updateServerStatic(file, szip));\n//     if (setting.downloadMode === 'fork') {\n//       await retry(20, forkExtractExstingZip);\n//     }\n//     api.eventBus.emit(api.packageName + '.downloaded');\n//   }\n// }\n\n// let downloadCount = 0;\n\n// async function downloadZip(path: string) {\n// eslint-disable-next-line\n// \t// log.info(`${os.hostname()} ${os.userInfo().username} download zip[Free mem]: ${Math.round(os.freemem() / 1048576)}M, [total mem]: ${Math.round(os.totalmem() / 1048576)}M`);\n//   const resource = Url.resolve( setting.fetchUrl, path + '?' + Math.random());\n//   // const downloadTo = api.config.resolve('destDir', `remote-${Math.random()}-${path.split('/').pop()}`);\n//   const newName = path.replace(/[\\\\/]/g, '_');\n//   const downloadTo = Path.resolve(zipDownloadDir, newName);\n//   log.info('fetch', resource);\n//   await retry<string>(setting.fetchRetry, forkDownloadzip, resource, downloadTo);\n//   return downloadTo;\n// }\n\n// function fetch(fetchUrl: string): Promise<any> {\n//   const checkUrl = fetchUrl + '?' + Math.random();\n//   log.debug('check', checkUrl);\n//   return new Promise((resolve, rej) => {\n//     request.get(checkUrl,\n//       {headers: {Referer: Url.resolve(checkUrl, '/')}}, (error: any, response: request.Response, body: any) => {\n//       if (error) {\n//         return rej(new Error(error));\n//       }\n//       if (response.statusCode < 200 || response.statusCode > 302) {\n//         return rej(new Error(`status code ${response.statusCode}\\nresponse:\\n${response}\\nbody:\\n${body}`));\n//       }\n//       try {\n//         if (typeof body === 'string')\n//           body = JSON.parse(body);\n//       } catch (ex) {\n//         rej(ex);\n//       }\n//       resolve(body);\n//     });\n//   });\n// }\n\nexport async function retry<T>(times: number, func: (...args: any[]) => Promise<T>, ...args: any[]): Promise<T> {\n  for (let cnt = 0;;) {\n    try {\n      return await func(...args);\n    } catch (err) {\n      cnt++;\n      if (cnt >= setting.fetchRetry) {\n        throw err;\n      }\n      log.warn(err);\n      log.info('Encounter error, will retry');\n    }\n    await new Promise(res => setTimeout(res, cnt * 500));\n  }\n}\n\n// function forkDownloadzip(resource: string, toFileName: string): Promise<string> {\n//   return forkProcess('download', 'node_modules/' + api.packageName + '/dist/download-zip-process.js', [\n//     resource, toFileName, setting.fetchRetry + ''\n//   ]);\n// }\nexport function forkExtractExstingZip(zipDir?: string, outputDir?: string, doNotDelete = false) {\n  return forkProcess('extract', Path.resolve(__dirname, 'extract-zip-process.js'), [\n    zipDir ? zipDir : zipDownloadDir,\n    outputDir != null ? outputDir : api.config.resolve('staticDir'),\n    doNotDelete ? 'keep' : 'delete'\n  ]);\n}\n\nasync function forkProcess(name: string, filePath: string, args: string[], onProcess?: (child: ChildProcess) => void) {\n  return new Promise<string>((resolve, reject) => {\n    let extractingDone = false;\n    const env = Object.assign({}, process.env);\n    if (env.NODE_OPTIONS && env.NODE_OPTIONS.indexOf('--inspect') >= 0) {\n      delete env.NODE_OPTIONS;\n    }\n    const child = fork(filePath,\n      args, {\n      silent: true,\n      env\n    });\n    if (onProcess) {\n      onProcess(child);\n    }\n    child.on('message', (msg: any) => {\n      if (msg.log) {\n        log.info('[child process] %s - %s', name, msg.log);\n        return;\n      } else if (msg.done) {\n        extractingDone = true;\n      } else if (msg.error) {\n        log.error(msg.error);\n      }\n    });\n    child.on('error', err => {\n      log.error(err);\n      reject(output);\n    });\n    child.on('exit', (code, signal) => {\n      log.info('process [pid:%s] %s - exit with: %d - %s', child.pid, name, code, signal);\n      if (code !== 0) {\n        if (extractingDone) {\n          return resolve(output);\n        }\n        log.error(`process [pid:${child.pid}] ${name} exit with error code %d - \"%s\"`, JSON.stringify(code), signal);\n        if (output)\n          log.error(`[child process][pid:${child.pid}]${name} - `, output);\n        reject(output);\n      } else {\n        log.info(`process [pid:${child.pid}] ${name} done successfully:`, output);\n        resolve(output);\n      }\n    });\n    let output = '';\n    child.stdout!.setEncoding('utf-8');\n    child.stdout!.on('data', (chunk) => {\n      output += chunk;\n    });\n    child.stderr!.setEncoding('utf-8');\n    child.stderr!.on('data', (chunk) => {\n      output += chunk;\n    });\n  });\n}\n"]}