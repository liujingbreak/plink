{"version":3,"file":"http-proxy-observable.js","sourceRoot":"","sources":["http-proxy-observable.ts"],"names":[],"mappings":";;;;AACA,iDAA2B;AAC3B,2DAAqC;AAgBrC,MAAM,MAAM,GAAG,oEAAoE,CAAC,KAAK,CAAC,GAAG,CAC1D,CAAC;AAMpC,SAAgB,mBAAmB,CAAC,KAAgB;IAClD,MAAM,MAAM,GAAG,EAAuB,CAAC;IACvC,MAAM,YAAY,GAAG,EAAmB,CAAC;IAEzC,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE;QAC1B,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,KAAK,EAAE;YACnC,GAAG;gBACD,MAAM,EAAE,GAAG,YAAY,CAAC,KAAK,CAAC,CAAC;gBAC/B,IAAI,EAAE,EAAE;oBACN,OAAO,EAAE,CAAC;iBACX;gBAED,MAAM,GAAG,GAAG,EAAE,CAAC,gBAAgB,CAC7B,OAAO,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,EAAE,OAAO,CAAC,EACnC,OAAO,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,EAAE,OAAO,CAAC,CACrC,CAAC,IAAI,CACJ,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;oBACd,IAAI,EAAE,KAAK;oBACX,OAAO,EAAE,IAAI;iBACd,CAAC,CAAC,CACJ,CAAC;gBACF,mEAAmE;gBACnE,YAAY,CAAC,KAAK,CAAC,GAAG,GAAU,CAAC;gBACjC,OAAO,GAAG,CAAC;YACb,CAAC;SACF,CAAC,CAAC;KACJ;IACD,OAAO,MAAM,CAAC;AAChB,CAAC;AA5BD,kDA4BC;AAED,MAAM,eAAe,GAAG,IAAI,GAAG,CAAiB,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;AAChG;;;;;;;;GAQG;AACH,SAAgB,oBAAoB,CAAC,UAA6B,EAAE,GAAa,EAC/E,eAAe,GAAG,IAAI;IAEtB,+CAA+C;IAC/C,OAAO,EAAE,CAAC,KAAK,CACb,UAAU,CAAC,QAAQ,CAAC,IAAI,CACtB,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,GAAG;QACzC,CAAC,CAAC,eAAe,IAAI,eAAe,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,UAAU,IAAI,GAAG,CAAC,CAAC,CAC9E,EACD,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CACX,EACD,EAAE,CAAC,KAAK,CAAC,UAAU,CAAC,UAAU,EAAE,UAAU,CAAC,KAAK,CAAC,CAAC,IAAI,CACpD,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,EAC5C,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EACV,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAC,OAAO,EAAE,CAAC,GAAG,CAAC,EAAC,EAAE,EAAE;QAC/B,OAAO,EAAE,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;IAC5B,CAAC,CAAC,CACH,CACF,CAAC,IAAI,CACJ,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CACX,CAAC;AACJ,CAAC;AArBD,oDAqBC","sourcesContent":["import HttpProxy from 'http-proxy';\nimport * as rx from 'rxjs';\nimport * as op from 'rxjs/operators';\n\ntype Response = Parameters<HttpProxy['web']>[1];\n\nexport type HttpProxyEventParams = {\n  error: Parameters<HttpProxy.ErrorCallback>;\n  start: Parameters<HttpProxy.StartCallback>;\n  proxyReq: Parameters<HttpProxy.ProxyReqCallback>;\n  proxyRes: Parameters<HttpProxy.ProxyResCallback>;\n  proxyReqWs: Parameters<HttpProxy.ProxyReqWsCallback>;\n  econnreset: Parameters<HttpProxy.EconnresetCallback>;\n  end: Parameters<HttpProxy.EndCallback>;\n  open: Parameters<HttpProxy.OpenCallback>;\n  close: Parameters<HttpProxy.CloseCallback>;\n};\n\nconst EVENTS = 'error,start,proxyReq,proxyRes,ProxyReqWs,econnreset,end,open,close'.split(',') as\n  Array<keyof HttpProxyEventParams>;\n\nexport type HttpProxyEventObs = {\n  [evt in keyof HttpProxyEventParams]: rx.Observable<{type: evt; payload: HttpProxyEventParams[evt]}>\n};\n\nexport function httpProxyObservable(proxy: HttpProxy): HttpProxyEventObs {\n  const obsObj = {} as HttpProxyEventObs;\n  const createdSubjs = {} as typeof obsObj;\n\n  for (const event of EVENTS) {\n    Object.defineProperty(obsObj, event, {\n      get() {\n        const ob = createdSubjs[event];\n        if (ob) {\n          return ob;\n        }\n\n        const sub = rx.fromEventPattern<HttpProxyEventParams[typeof event]>(\n          handler => proxy.on(event, handler),\n          handler => proxy.off(event, handler)\n        ).pipe(\n          op.map(args => ({\n            type: event,\n            payload: args\n          }))\n        );\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        createdSubjs[event] = sub as any;\n        return sub;\n      }\n    });\n  }\n  return obsObj;\n}\n\nconst REDIRECT_STATUS = new Map<number, number>([301, 302, 307, 308].map(code => [code, code]));\n/**\n * e.g.\n```\n  rx.defer(() => {\n    proxy.web(req, res, {timeout: 10000});\n    return observeProxyResponse(proxy$, payload.res);\n  })\n```\n */\nexport function observeProxyResponse(httpProxy$: HttpProxyEventObs, res: Response,\n  skipRedirectRes = true):\n  HttpProxyEventObs['proxyRes'] {\n  // Same as \"race\" which is deprecated in RxJS 7\n  return rx.merge(\n    httpProxy$.proxyRes.pipe(\n      op.filter(event => event.payload[2] === res &&\n        !(skipRedirectRes && REDIRECT_STATUS.has(event.payload[0].statusCode || 200))\n      ),\n      op.take(1)\n    ),\n    rx.merge(httpProxy$.econnreset, httpProxy$.error).pipe(\n      op.filter(event => event.payload[2] === res),\n      op.take(1),\n      op.mergeMap(({payload: [err]}) => {\n        return rx.throwError(err);\n      })\n    )\n  ).pipe(\n    op.take(1)\n  );\n}\n\n"]}