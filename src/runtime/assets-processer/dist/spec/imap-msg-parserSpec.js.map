{"version":3,"file":"imap-msg-parserSpec.js","sourceRoot":"","sources":["imap-msg-parserSpec.ts"],"names":[],"mappings":";AAAA,+BAA+B;;;AAE/B,6DAAmG;AACnG,yDAA4C;AAC5C,mEAA8D;AAC9D,oDAAoB;AACpB,wDAAwB;AAExB,SAAS,CAAC,iBAAiB,EAAE,GAAG,EAAE;IAChC,GAAG,CAAC,uDAAuD,EAAE,CAAC,IAAI,EAAE,EAAE;QACpE,MAAM,OAAO,GAAG,IAAA,yCAAuB,GAAE,CAAC;QAC1C,OAAO,CAAC,MAAM,CAAC,SAAS,CACtB,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,GAAG,CAAC,EACjC,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,EACvB,GAAG,EAAE,CAAC,IAAI,EAAE,CACb,CAAC;QAEF,MAAM,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,wCAAwC,EAAE,MAAM,CAAC,CAAC;QAC1E,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACnB,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IACtB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;QAChD,MAAM,OAAO,GAAG,IAAA,yCAAuB,GAAE,CAAC;QAE1C,MAAM,IAAI,GAAG,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,GAAG,EAAE,EAAE;YAC5C,OAAO,CAAC,MAAM,CAAC,SAAS,CACxB,GAAG,CAAC,EAAE,GAAE,CAAC,EACT,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,EACjB,GAAG,EAAE,CAAC,OAAO,EAAE,CAChB,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,KAAK,UAAU,KAAK;YAClB,MAAM,IAAA,oCAAkB,EAAC,OAAO,CAAC,MAAM,EAAE,KAAK,EAAC,EAAE,EAAC,EAAE;gBAClD,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;gBAC9B,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC,IAAI,IAAI,EAAE;oBAC9B,MAAM,EAAE,GAAG,MAAM,EAAE,CAAC,OAAO,EAAE,CAAC;oBAC9B,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC;oBAC5B,IAAI,EAAE,CAAC,IAAI,KAAK,+BAAa,CAAC,SAAS;wBACrC,OAAO,IAAI,CAAC;iBACf;YACH,CAAC,CAAC,CAAC;YACH,OAAO,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;YACpC,UAAU,CAAC,GAAG,EAAE;gBACd,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,yCAAyC,EAAE,MAAM,CAAC,CAAC,CAAC;gBAC9E,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YACtB,CAAC,EAAE,CAAC,CAAC,CAAC;YACN,MAAM,IAAA,oCAAkB,EAAC,OAAO,CAAC,MAAM,EAAE,KAAK,EAAC,EAAE,EAAC,EAAE;gBAClD,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;gBAC9B,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC,IAAI,IAAI,EAAE;oBAC9B,MAAM,EAAE,GAAG,MAAM,EAAE,CAAC,OAAO,EAAE,CAAC;oBAC9B,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC;iBAC7B;YACH,CAAC,CAAC,CAAC;QACL,CAAC;QACD,MAAM,SAAS,GAAG,KAAK,EAAE,CAAC;QAC1B,MAAM,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,6CAA6C,EAAE,MAAM,CAAC,CAAC;QAC/E,UAAU,CAAC,GAAG,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACrB,CAAC,EAAE,CAAC,CAAC,CAAC;QAEN,MAAM,OAAO,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC;IACvC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;IAC7B,GAAG,CAAC,SAAS,EAAE,KAAK,IAAI,EAAE;QACxB,MAAM,GAAG,GAAG,YAAE,CAAC,YAAY,CAAC,cAAI,CAAC,OAAO,CAAC,SAAS,EAAE,8BAA8B,CAAC,CAAC,CAAC;QACrF,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACtB,MAAM,MAAM,GAAG,MAAM,IAAA,qBAAK,EAAC,GAAG,CAAC,CAAC;QAChC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QACzB,KAAK,MAAM,IAAI,IAAI,MAAM,CAAC,KAAK,EAAE;YAC/B,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;SACnB;IACH,CAAC,CAAC,CAAC;IAEH,GAAG,CAAC,qBAAqB,EAAE,GAAG,EAAE;QAC9B,MAAM,GAAG,GAAG,YAAE,CAAC,YAAY,CAAC,cAAI,CAAC,OAAO,CAAC,SAAS,EAAE,8BAA8B,CAAC,CAAC,CAAC;QACrF,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACrB,MAAM,MAAM,GAAG,IAAA,0BAAS,EAAC,GAAG,CAAC,CAAC;QAC9B,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QACxB,KAAK,MAAM,IAAI,IAAI,MAAM,CAAC,KAAK,EAAE;YAC/B,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;SACnB;IACH,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qBAAqB,EAAE,GAAG,EAAE;QAC7B,MAAM,GAAG,GAAG,YAAE,CAAC,YAAY,CAAC,cAAI,CAAC,OAAO,CAAC,SAAS,EAAE,gCAAgC,CAAC,CAAC,CAAC;QACvF,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACrB,MAAM,MAAM,GAAG,IAAA,0BAAS,EAAC,GAAG,CAAC,CAAC;QAC9B,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QACxB,KAAK,MAAM,IAAI,IAAI,MAAM,CAAC,KAAK,EAAE;YAC/B,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC1B,IAAI,IAAI,CAAC,IAAI;gBACX,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;;gBAEvB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;SAC5C;IACH,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yCAAyC,EAAE,GAAG,EAAE;QACjD,MAAM,GAAG,GAAG,YAAE,CAAC,YAAY,CAAC,cAAI,CAAC,OAAO,CAAC,SAAS,EAAE,6BAA6B,CAAC,CAAC,CAAC;QACpF,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACrB,MAAM,MAAM,GAAG,IAAA,0BAAS,EAAC,GAAG,CAAC,CAAC;QAC9B,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QACxB,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACpB,qCAAqC;QACrC,uBAAuB;QACvB,IAAI;IACN,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/* eslint-disable no-console */\n\nimport {createServerDataHandler, parseLinesOfTokens, ImapTokenType} from '../mail/imap-msg-parser';\nimport {parse} from '../mail/rfc822-parser';\nimport {parse as parseSync} from '../mail/rfc822-sync-parser';\nimport fs from 'fs';\nimport Path from 'path';\n\nxdescribe('imap-msg-parser', () => {\n  xit('createServerDataHandler() should parse string literal', (done) => {\n    const handler = createServerDataHandler();\n    handler.output.subscribe(\n      tks => console.log('lines:', tks),\n      (err) => done.fail(err),\n      () => done()\n    );\n\n    const buf = Buffer.from('* OK 123\\r\\n* FETCH {14}abcdefghijklmn', 'utf8');\n    handler.input(buf);\n    handler.input(null);\n  });\n\n  it('parseLinesOfTokens() should work', async () => {\n    const handler = createServerDataHandler();\n\n    const done = new Promise<void>((resolve, rej) => {\n        handler.output.subscribe(\n        tks => {},\n        (err) => rej(err),\n        () => resolve()\n      );\n    });\n\n    async function parse() {\n      await parseLinesOfTokens(handler.output, async la => {\n        console.log('p1 parses line');\n        while ((await la.la()) != null) {\n          const tk = await la.advance();\n          console.log('p1:', tk.text);\n          if (tk.type === ImapTokenType.stringLit)\n            return true;\n        }\n      });\n      console.log('p1 parsing completes');\n      setTimeout(() => {\n        handler.input(Buffer.from('* OK 789\\r\\n* FETCH2 {10}1234567890\\r\\n', 'utf8'));\n        handler.input(null);\n      }, 0);\n      await parseLinesOfTokens(handler.output, async la => {\n        console.log('p2 parses line');\n        while ((await la.la()) != null) {\n          const tk = await la.advance();\n          console.log('p2:', tk.text);\n        }\n      });\n    }\n    const parseDone = parse();\n    const buf = Buffer.from('* OK 123\\r\\n* FETCH1 {14}abcdefghijklmn\\r\\n', 'utf8');\n    setTimeout(() => {\n      handler.input(buf);\n    }, 0);\n\n    await Promise.all([parseDone, done]);\n  });\n});\n\ndescribe('rfc822-parser', () => {\n  xit('parse()', async () => {\n    const buf = fs.readFileSync(Path.resolve(__dirname, '../../ts/spec/rfc822-msg.txt'));\n    console.time('async');\n    const result = await parse(buf);\n    console.timeEnd('async');\n    for (const part of result.parts) {\n      console.log(part);\n    }\n  });\n\n  xit('sync parse() case 1', () => {\n    const buf = fs.readFileSync(Path.resolve(__dirname, '../../ts/spec/rfc822-msg.txt'));\n    console.time('sync');\n    const result = parseSync(buf);\n    console.timeEnd('sync');\n    for (const part of result.parts) {\n      console.log(part);\n    }\n  });\n\n  it('sync parse() case 2', () => {\n    const buf = fs.readFileSync(Path.resolve(__dirname, '../../ts/spec/rfc822-msg-2.txt'));\n    console.time('sync');\n    const result = parseSync(buf);\n    console.timeEnd('sync');\n    for (const part of result.parts) {\n      console.log(part.headers);\n      if (part.file)\n        console.log(part.file);\n      else\n        console.log(part.body!.toString('utf8'));\n    }\n  });\n\n  it('sync parse() message without attachment', () => {\n    const buf = fs.readFileSync(Path.resolve(__dirname, '../../ts/spec/plain-msg.txt'));\n    console.time('sync');\n    const result = parseSync(buf);\n    console.timeEnd('sync');\n    console.log(result);\n    // for (const part of result.parts) {\n    //   console.log(part);\n    // }\n  });\n});\n"]}