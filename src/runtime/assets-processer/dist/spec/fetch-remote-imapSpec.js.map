{"version":3,"file":"fetch-remote-imapSpec.js","sourceRoot":"","sources":["fetch-remote-imapSpec.ts"],"names":[],"mappings":"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","sourcesContent":["// eslint-disable  no-console\n/**\n * drcp test -f ../web-fun-house/src/runtime/assets-processer/ts/spec/fetch-remote-imapSpec.ts -c dist/config.local.yaml conf/remote-deploy-test.yaml\n */\nimport * as fetchImap from '../fetch-remote-imap';\nimport Path from 'path';\nconst log = require('log4js').getLogger('fetch-remote-imapSpec');\n\njasmine.DEFAULT_TIMEOUT_INTERVAL = 5 * 60 * 1000;\n\ndescribe('fetch-remote-imap', () => {\n\n  xit('can connect to server', async () => {\n    fetchImap.connectImap(async () => {\n      // await context.waitForReply('');\n    });\n  });\n\n  xit('can send mail', async () => {\n    await fetchImap.retrySendMail(\n      'Hellow world: ' + new Date().toLocaleString(),\n      Path.resolve(__dirname, '', '../../ts/spec/fetch-remote-attachment.zip')\n    );\n  });\n\n  xit('can append mail by IMAP', async () => {\n    await fetchImap.connectImap(async context => {\n      await context.appendMail('hellow world', 'test mail');\n    });\n  });\n\n  it('can recieve mail', async () => {\n    await fetchImap.connectImap(async context => {\n      const foundIdx = await context.findMail(context.lastIndex, 'build artifact:pre-build(prod-admin-bcl)');\n      if (foundIdx == null)\n        throw new Error('Can not find the mail');\n      log.info('--- find mail index ---', foundIdx);\n      // const foundIdx = 8;\n      const targetMail = await context.waitForFetch(foundIdx, false);\n      console.log(targetMail);\n      log.info('can recieve mail - done');\n    });\n  });\n\n  xit('can recieve mail only with text body', async () => {\n    const appName = 'Hellow world';\n    await fetchImap.connectImap(async context => {\n      const foundIdx = await context.findMail(context.lastIndex, `build artifact:pre-build(test-${appName})`);\n      if (foundIdx == null)\n        throw new Error(`Can not find mail for \"${appName}\"`);\n      const text = await context.waitForFetchText(foundIdx);\n      console.log('######text: %s#####', text);\n      await context.waitForReply(`FETCH ${foundIdx} BODY[2]`);\n      // console.log(targetMail);\n    });\n  });\n\n  xit('can fetch checksum and zips from mail server', async () => {\n    const mgr = new fetchImap.ImapManager('dev');\n    console.log(await mgr.fetchUpdateCheckSum('testApp'));\n    // console.log('---------fetchOtherZips starts ----------');\n    await mgr.fetchOtherZips('testApp');\n    // console.log('--------fetchOtherZips ends -----------');\n  });\n\n  xit('can send build mail with zip file', async ()=> {\n    // let mgr = new fetchImap.ImapManager('dev');\n    // await mgr.sendFileAndUpdatedChecksum('testApp1', Path.resolve(__dirname, '../../ts/spec/fetch-remote-attachment.zip'));\n\n    // mgr = new fetchImap.ImapManager('dev');\n    // await mgr.sendFileAndUpdatedChecksum(Path.resolve(__dirname, '../../ts/spec/fetch-remote-attachment.zip'));\n  });\n});\n"]}