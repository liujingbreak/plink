{"version":3,"file":"cli-unzip.js","sourceRoot":"","sources":["cli-unzip.ts"],"names":[],"mappings":"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","sourcesContent":["import yauzl from 'yauzl';\nimport chalk from 'chalk';\nimport { createWriteStream, existsSync } from 'fs';\nimport {mkdirpSync} from 'fs-extra';\nimport Path from 'path';\n\nexport async function listZip(fileName: string) {\n  const zip = await new Promise<yauzl.ZipFile | undefined>((resolve, rej) => {\n    yauzl.open(fileName, {lazyEntries: true}, (err, zip) => {\n      if (err) {\n        return rej(err);\n      }\n      resolve(zip);\n    });\n  });\n  const list: string[] = [];\n  if (zip == null) {\n    throw new Error(`yauzl can not list zip file ${fileName}`);\n  }\n  zip.on('entry', (entry: yauzl.Entry) => {\n    list.push(entry.fileName);\n\n    // eslint-disable-next-line no-console\n    console.log(entry.fileName + chalk.green(` (size: ${entry.uncompressedSize >> 10} Kb)`));\n    zip.readEntry();\n  });\n  zip.readEntry();\n\n  return new Promise<typeof list>(resolve => {\n    zip.on('end', () => resolve(list));\n  });\n}\n\nexport async function unZip(fileName: string, toDir = process.cwd()) {\n  const zip = await new Promise<yauzl.ZipFile | undefined>((resolve, rej) => {\n    yauzl.open(fileName, {lazyEntries: true}, (err, zip) => {\n      if (err) {\n        return rej(err);\n      }\n      resolve(zip);\n    });\n  });\n  if (zip == null) {\n    throw new Error(`yauzl can not unzip zip file ${fileName}`);\n  }\n  zip.on('entry', (entry: yauzl.Entry) => {\n    if (entry.fileName.endsWith('/')) {\n      // some zip format contains directory\n      zip.readEntry();\n      return;\n    }\n    // eslint-disable-next-line no-console\n    console.log(entry.fileName + chalk.gray(` (size: ${entry.uncompressedSize >> 10} Kb)`));\n\n    zip.openReadStream(entry, (err, readStream) => {\n      if (err) {\n        console.error(`yauzl is unable to extract file ${entry.fileName}`, err);\n        zip.readEntry();\n        return;\n      }\n      readStream!.on('end', () => {zip.readEntry();});\n      const target = Path.resolve(toDir, entry.fileName);\n      // eslint-disable-next-line no-console\n      console.log(`write ${target} ` + chalk.gray(` (size: ${entry.uncompressedSize >> 10} Kb)`));\n      const dir = Path.dirname(target);\n      if (!existsSync(dir))\n        mkdirpSync(dir);\n      readStream!.pipe(createWriteStream(target));\n    });\n  });\n  zip.readEntry();\n\n  return new Promise<void>(resolve => {\n    zip.on('end', () => resolve());\n  });\n}\n"]}